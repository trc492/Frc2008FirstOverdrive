MP2COD 3.90, COFF to COD File Converter
Copyright (c) 2004 Microchip Technology Inc.
Listing File Generated: Sat Mar 22 13:23:08 2008


Address  Value    Disassembly              Source                                                                           File
-------  -------  -----------------------  -------------------------------------------------------------------------------  -----
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	TITLE		adc.c                                                                   C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	VERSION:	0.4 (Beta)                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	DATE:		10-Jan-2006                                                             C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	AUTHOR:		R. Kevin Watson                                                       C:\code\2008\Mnemosyne - 2008\adc.c
                                           *				kevinw@jpl.nasa.gov                                                         C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	COMMENTS:	You are free to use this source code for any non-commercial          C:\code\2008\Mnemosyne - 2008\adc.c
                                           *				use. Please do not make copies of this source code, modified                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *				or un-modified, publicly available on the internet or                       C:\code\2008\Mnemosyne - 2008\adc.c
                                           *				elsewhere without permission. Thanks.                                       C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *				Copyright ©2005-2006 R. Kevin Watson. All rights are reserved.              C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           ******************************************************************************** C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	CHANGE LOG:                                                                    C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	DATE         REV  DESCRIPTION                                                  C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	-----------  ---  ----------------------------------------------------------   C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	10-Jul-2005  0.1  RKW - Original code.                                         C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	17-Jul-2005  0.2  RKW - Added x128 and x256 oversampling options.              C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	13-Dec-2005  0.3  RKW - Altered code to use the "special event trigger"        C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	                  functionality of the CCP2 hardware to initiate ADC           C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	                  conversions. This was formally done using timer 2.           C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	10-Jan-2006  0.4  RKW - Ported to PIC18F8722, which required going back        C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	                  to using timer 2 to initiate an analog to digital            C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	                  conversion due to a bug in the PIC18F8722 design.            C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	                  Modified #pragma interruptlow statement to include           C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	                  .tmpdata section.                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           #include "adc.h"                                                                 C:\code\2008\Mnemosyne - 2008\adc.c
                                           #include "ifi_aliases.h"                                                         C:\code\2008\Mnemosyne - 2008\adc.c
                                           #include "ifi_default.h"                                                         C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           unsigned int adc_sample_rate;                                                    C:\code\2008\Mnemosyne - 2008\adc.c
                                           unsigned int adc_samples_per_update;                                             C:\code\2008\Mnemosyne - 2008\adc.c
                                           unsigned char num_adc_channels;                                                  C:\code\2008\Mnemosyne - 2008\adc.c
                                           unsigned char adc_result_divisor;                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           volatile unsigned long accum[NUM_ADC_CHANNELS]; // sample accumulator            C:\code\2008\Mnemosyne - 2008\adc.c
                                           volatile unsigned int adc_result[NUM_ADC_CHANNELS]; // ADC recults               C:\code\2008\Mnemosyne - 2008\adc.c
                                           volatile unsigned int samples; // current number of samples accumulated          C:\code\2008\Mnemosyne - 2008\adc.c
                                           volatile unsigned char channel; // current ADC channel                           C:\code\2008\Mnemosyne - 2008\adc.c
                                           volatile unsigned char adc_update_count = 0; // ADC update flag                  C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	FUNCTION:		Initialize_ADC()                                                    C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PURPOSE:		Initializes the Analog to Digital Conversion (ADC) hardware.         C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	CALLED FROM:	user_routines.c/User_Initialization()                             C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	COMMENTS:		Place "#include "adc.h" in the includes section                     C:\code\2008\Mnemosyne - 2008\adc.c
                                           *					of user_routines.c then call Initialize_ADC() in                           C:\code\2008\Mnemosyne - 2008\adc.c
                                           *					user_routines.c/User_Initialization().                                     C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\adc.c
004600   cfd9     MOVFF     0xfd9,0xfe6    void Initialize_ADC(void)                                                        C:\code\2008\Mnemosyne - 2008\adc.c
004602   ffe6                                                                                                               
004604   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
004606   ffd9                                                                                                               
004608   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           	unsigned char i;                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// Initialize ADC related global variables using default values from adc.h.     C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// Another way to do this would be to pass the values in, read them from        C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// values stored in EEPROM or perhaps set them via a menu-based terminal        C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// interface.                                                                   C:\code\2008\Mnemosyne - 2008\adc.c
00460a   0ec8     MOVLW     0xc8           	adc_sample_rate = ADC_SAMPLE_RATE;                                              C:\code\2008\Mnemosyne - 2008\adc.c
00460c   0102     MOVLB     0x2                                                                                             
00460e   6f72     MOVWF     0x72,0x1                                                                                        
004610   6b73     CLRF      0x73,0x1                                                                                        
004612   0e02     MOVLW     0x2            	num_adc_channels = NUM_ADC_CHANNELS;                                            C:\code\2008\Mnemosyne - 2008\adc.c
004614   6f76     MOVWF     0x76,0x1                                                                                        
004616   0e01     MOVLW     0x1            	adc_result_divisor = ADC_RESULT_DIVISOR;                                        C:\code\2008\Mnemosyne - 2008\adc.c
004618   6f77     MOVWF     0x77,0x1                                                                                        
00461a   0e04     MOVLW     0x4            	adc_samples_per_update = ADC_SAMPLES_PER_UPDATE;                                C:\code\2008\Mnemosyne - 2008\adc.c
00461c   6f74     MOVWF     0x74,0x1                                                                                        
00461e   6b75     CLRF      0x75,0x1                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// reset the sample accumulator(s) to zero                                      C:\code\2008\Mnemosyne - 2008\adc.c
004620   6adf     CLRF      0xdf,0x0       	for(i=0; i < num_adc_channels; i++)                                             C:\code\2008\Mnemosyne - 2008\adc.c
004622   5176     MOVF      0x76,0x0,0x1                                                                                    
004624   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
004626   e210     BC        0x4648                                                                                          
004644   2adf     INCF      0xdf,0x1,0x0                                                                                    
004646   d7ed     BRA       0x4622                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\adc.c
004628   50df     MOVF      0xdf,0x0,0x0   		accum[i] = 0L;                                                                 C:\code\2008\Mnemosyne - 2008\adc.c
00462a   0d04     MULLW     0x4                                                                                             
00462c   cff3     MOVFF     0xff3,0xfe9                                                                                     
00462e   ffe9                                                                                                               
004630   cff4     MOVFF     0xff4,0xfea                                                                                     
004632   ffea                                                                                                               
004634   0e78     MOVLW     0x78                                                                                            
004636   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
004638   0e02     MOVLW     0x2                                                                                             
00463a   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00463c   6aee     CLRF      0xee,0x0                                                                                        
00463e   6aee     CLRF      0xee,0x0                                                                                        
004640   6aee     CLRF      0xee,0x0                                                                                        
004642   6aee     CLRF      0xee,0x0                                                                                        
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// start a new sample set                                                       C:\code\2008\Mnemosyne - 2008\adc.c
004648   6b84     CLRF      0x84,0x1       	samples = 0;                                                                    C:\code\2008\Mnemosyne - 2008\adc.c
00464a   6b85     CLRF      0x85,0x1                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// start at ADC channel zero                                                    C:\code\2008\Mnemosyne - 2008\adc.c
00464c   6b86     CLRF      0x86,0x1       	channel = 0;                                                                    C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// enable the ADC hardware and select ADC channel 0                             C:\code\2008\Mnemosyne - 2008\adc.c
00464e   0e01     MOVLW     0x1            	ADCON0 = 0b00000001;                                                            C:\code\2008\Mnemosyne - 2008\adc.c
004650   6ec2     MOVWF     0xc2,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	#ifdef _FRC_BOARD                                                               C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// If this is being built for the FRC-RC, enable all sixteen analog             C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// inputs. This shouldn't be changed because the FRC-RC has sixteen             C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// dedicated analog inputs. The VCFG0 and VCFG1 bits are also set to            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// select Vdd and Vss as the reference voltages                                 C:\code\2008\Mnemosyne - 2008\adc.c
004652   6ac1     CLRF      0xc1,0x0       	ADCON1 = 0;                                                                     C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	#else                                                                           C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// If this is being built for the EDU-RC, enable NUM_ADC_CHANNELS               C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// analog inputs (NUM_ADC_CHANNELS is documented in adc.h). This must           C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// match the default value used in user_routines.c/User_Initialization()/       C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// Set_Number_of_Analog_Channels(). The VCFG0 and VCFG1 bits are also           C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// set to select Vdd and Vss as the reference voltages                          C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	if(num_adc_channels >= 1 && num_adc_channels <= 14)                             C:\code\2008\Mnemosyne - 2008\adc.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\adc.c
                                           		ADCON1 = 15 - num_adc_channels;                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\adc.c
                                            	else                                                                           C:\code\2008\Mnemosyne - 2008\adc.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\adc.c
                                           		ADCON1 = 0; // sixteen channnels or out of range                               C:\code\2008\Mnemosyne - 2008\adc.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	#endif                                                                          C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// select Fosc/64 as the ADC Conversion Clock and right justify data            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// in the conversion result register                                            C:\code\2008\Mnemosyne - 2008\adc.c
004654   0e86     MOVLW     0x86           	ADCON2 = 0b10000110;                                                            C:\code\2008\Mnemosyne - 2008\adc.c
004656   6ec0     MOVWF     0xc0,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// ADC interrupt is low priority                                                C:\code\2008\Mnemosyne - 2008\adc.c
004658   9c9f     BCF       0x9f,0x6,0x0   	IPR1bits.ADIP = 0;                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// to prevent a spurious interrupt, make sure the interrupt flag is reset       C:\code\2008\Mnemosyne - 2008\adc.c
00465a   9c9e     BCF       0x9e,0x6,0x0   	PIR1bits.ADIF = 0;                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// enable the ADC interrupt                                                     C:\code\2008\Mnemosyne - 2008\adc.c
00465c   8c9d     BSF       0x9d,0x6,0x0   	PIE1bits.ADIE = 1;                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// initialize and start timer 2, which is responsible for starting              C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// analog to digital conversions                                                C:\code\2008\Mnemosyne - 2008\adc.c
00465e   c272     MOVFF     0x272,0xfe6    	Initialize_Timer_2(adc_sample_rate);                                            C:\code\2008\Mnemosyne - 2008\adc.c
004660   ffe6                                                                                                               
004662   c273     MOVFF     0x273,0xfe6                                                                                     
004664   ffe6                                                                                                               
004666   d814     RCALL     0x4690                                                                                          
004668   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00466a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00466c   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
00466e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004670   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
004672   ffd9                                                                                                               
004674   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	FUNCTION:		Disable_ADC()                                                       C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PURPOSE:		Disables the Analog to Digital Conversion (ADC) hardware.            C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\adc.c
004676   cfd9     MOVFF     0xfd9,0xfe6    void Disable_ADC(void)                                                           C:\code\2008\Mnemosyne - 2008\adc.c
004678   ffe6                                                                                                               
00467a   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00467c   ffd9                                                                                                               
00467e   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           	unsigned char i;                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// disable timer 2                                                              C:\code\2008\Mnemosyne - 2008\adc.c
004680   d85f     RCALL     0x4740         	Disable_Timer_2();                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// disable the ADC interrupt                                                    C:\code\2008\Mnemosyne - 2008\adc.c
004682   9c9d     BCF       0x9d,0x6,0x0   	PIE1bits.ADIE = 0;                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// disable the ADC hardware and select ADC channel 0                            C:\code\2008\Mnemosyne - 2008\adc.c
004684   6ac2     CLRF      0xc2,0x0       	ADCON0 = 0b00000000;                                                            C:\code\2008\Mnemosyne - 2008\adc.c
004686   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
004688   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00468a   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00468c   ffd9                                                                                                               
00468e   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	FUNCTION:		Initialize_Timer_2()                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PURPOSE:		Initializes the timer 2 hardware, which is responsible for           C:\code\2008\Mnemosyne - 2008\adc.c
                                           *					periodically starting analog to digital conversions.                       C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	CALLED FROM:	adc.c/Initialize_ADC()                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PARAMETERS:		Unsigned integer containing the sample rate expressed in Hz       C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	COMMENTS:		The only supported sample rates are 200Hz, 400Hz, 800Hz,            C:\code\2008\Mnemosyne - 2008\adc.c
                                           *					1600Hz, 3200Hz and 6400Hz.                                                 C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\adc.c
004690   cfd9     MOVFF     0xfd9,0xfe6    void Initialize_Timer_2(unsigned int adc_sample_rate)                            C:\code\2008\Mnemosyne - 2008\adc.c
004692   ffe6                                                                                                               
004694   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
004696   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
004698   0efd     MOVLW     0xfd           	switch(adc_sample_rate)                                                         C:\code\2008\Mnemosyne - 2008\adc.c
00469a   cfdb     MOVFF     0xfdb,0x41                                                                                      
00469c   f041                                                                                                               
00469e   0efe     MOVLW     0xfe                                                                                            
0046a0   cfdb     MOVFF     0xfdb,0x42                                                                                      
0046a2   f042                                                                                                               
0046a4   5041     MOVF      0x41,0x0,0x0                                                                                    
0046a6   e102     BNZ       0x46ac                                                                                          
0046a8   0e19     MOVLW     0x19                                                                                            
0046aa   1842     XORWF     0x42,0x0,0x0                                                                                    
0046ac   e03b     BZ        0x4724                                                                                          
0046ae   0e80     MOVLW     0x80                                                                                            
0046b0   1841     XORWF     0x41,0x0,0x0                                                                                    
0046b2   e102     BNZ       0x46b8                                                                                          
0046b4   0e0c     MOVLW     0xc                                                                                             
0046b6   1842     XORWF     0x42,0x0,0x0                                                                                    
0046b8   e030     BZ        0x471a                                                                                          
0046ba   0e40     MOVLW     0x40                                                                                            
0046bc   1841     XORWF     0x41,0x0,0x0                                                                                    
0046be   e102     BNZ       0x46c4                                                                                          
0046c0   0e06     MOVLW     0x6                                                                                             
0046c2   1842     XORWF     0x42,0x0,0x0                                                                                    
0046c4   e025     BZ        0x4710                                                                                          
0046c6   0e20     MOVLW     0x20                                                                                            
0046c8   1841     XORWF     0x41,0x0,0x0                                                                                    
0046ca   e102     BNZ       0x46d0                                                                                          
0046cc   0e03     MOVLW     0x3                                                                                             
0046ce   1842     XORWF     0x42,0x0,0x0                                                                                    
0046d0   e01a     BZ        0x4706                                                                                          
0046d2   0e90     MOVLW     0x90                                                                                            
0046d4   1841     XORWF     0x41,0x0,0x0                                                                                    
0046d6   e102     BNZ       0x46dc                                                                                          
0046d8   0e01     MOVLW     0x1                                                                                             
0046da   1842     XORWF     0x42,0x0,0x0                                                                                    
0046dc   e00f     BZ        0x46fc                                                                                          
0046de   0ec8     MOVLW     0xc8                                                                                            
0046e0   1841     XORWF     0x41,0x0,0x0                                                                                    
0046e2   e101     BNZ       0x46e6                                                                                          
0046e4   5042     MOVF      0x42,0x0,0x0                                                                                    
0046e6   e005     BZ        0x46f2                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\adc.c
                                           		case 200:                                                                      C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// use these parameters for a 200Hz ADC sample rate                           C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// use a 1:16 prescaler and 1:14 postscaler                                   C:\code\2008\Mnemosyne - 2008\adc.c
0046f2   0e6a     MOVLW     0x6a           			T2CON = 0b01101010;                                                           C:\code\2008\Mnemosyne - 2008\adc.c
0046f4   6eca     MOVWF     0xca,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// Count to 221 before rolling over and generating                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// an interrupt (223.21 - 2 is ideal)                                         C:\code\2008\Mnemosyne - 2008\adc.c
0046f6   0edd     MOVLW     0xdd           			PR2	= 221;                                                                    C:\code\2008\Mnemosyne - 2008\adc.c
0046f8   6ecb     MOVWF     0xcb,0x0                                                                                        
0046fa   d019     BRA       0x472e         			break;                                                                        C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           		case 400:                                                                      C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// use these parameters for a 400Hz ADC sample rate                           C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// use a 1:16 prescaler and 1:11 postscaler                                   C:\code\2008\Mnemosyne - 2008\adc.c
0046fc   0e52     MOVLW     0x52           			T2CON = 0b01010010;                                                           C:\code\2008\Mnemosyne - 2008\adc.c
0046fe   6eca     MOVWF     0xca,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// Count to 140 before rolling over and generating                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// an interrupt (142.05 - 2 is ideal)                                         C:\code\2008\Mnemosyne - 2008\adc.c
004700   0e8c     MOVLW     0x8c           			PR2	= 140;                                                                    C:\code\2008\Mnemosyne - 2008\adc.c
004702   6ecb     MOVWF     0xcb,0x0                                                                                        
004704   d014     BRA       0x472e         			break;                                                                        C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           		case 800:                                                                      C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// use these parameters for a 800Hz ADC sample rate                           C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// use a 1:16 prescaler and 1:11 postscaler                                   C:\code\2008\Mnemosyne - 2008\adc.c
004706   0e52     MOVLW     0x52           			T2CON = 0b01010010;                                                           C:\code\2008\Mnemosyne - 2008\adc.c
004708   6eca     MOVWF     0xca,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// Count to 69 before rolling over and generating                             C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// an interrupt (71.02 - 2 is ideal)                                          C:\code\2008\Mnemosyne - 2008\adc.c
00470a   0e45     MOVLW     0x45           			PR2	= 69;                                                                     C:\code\2008\Mnemosyne - 2008\adc.c
00470c   6ecb     MOVWF     0xcb,0x0                                                                                        
00470e   d00f     BRA       0x472e         			break;                                                                        C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           		case 1600:                                                                     C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// use these parameters for a 1600Hz ADC sample rate                          C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// use a 1:4 prescaler and 1:11 postscaler                                    C:\code\2008\Mnemosyne - 2008\adc.c
004710   0e51     MOVLW     0x51           			T2CON = 0b01010001;                                                           C:\code\2008\Mnemosyne - 2008\adc.c
004712   6eca     MOVWF     0xca,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// Count to 140 before rolling over and generating                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// an interrupt (142.05 - 2 is ideal)                                         C:\code\2008\Mnemosyne - 2008\adc.c
004714   0e8c     MOVLW     0x8c           			PR2	= 140;                                                                    C:\code\2008\Mnemosyne - 2008\adc.c
004716   6ecb     MOVWF     0xcb,0x0                                                                                        
004718   d00a     BRA       0x472e         			break;                                                                        C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           		case 3200:                                                                     C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// use these parameters for a 3200Hz ADC sample rate                          C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// use a 1:1 prescaler and 1:11 postscaler                                    C:\code\2008\Mnemosyne - 2008\adc.c
00471a   0e51     MOVLW     0x51           			T2CON = 0b01010001;                                                           C:\code\2008\Mnemosyne - 2008\adc.c
00471c   6eca     MOVWF     0xca,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// Count to 69 before rolling over and generating                             C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// an interrupt (71.02 - 2 is ideal)                                          C:\code\2008\Mnemosyne - 2008\adc.c
00471e   0e45     MOVLW     0x45           			PR2	= 69;                                                                     C:\code\2008\Mnemosyne - 2008\adc.c
004720   6ecb     MOVWF     0xcb,0x0                                                                                        
004722   d005     BRA       0x472e         			break;                                                                        C:\code\2008\Mnemosyne - 2008\adc.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           		case 6400:                                                                     C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// use these parameters for a 6400Hz ADC sample rate                          C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// use a 1:4 prescaler and 1:11 postscaler                                    C:\code\2008\Mnemosyne - 2008\adc.c
004724   0e50     MOVLW     0x50           			T2CON = 0b01010000;                                                           C:\code\2008\Mnemosyne - 2008\adc.c
004726   6eca     MOVWF     0xca,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// Count to 140 before rolling over and generating                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// an interrupt (142.05 - 2 is ideal)                                         C:\code\2008\Mnemosyne - 2008\adc.c
004728   0e8c     MOVLW     0x8c           			PR2	= 140;                                                                    C:\code\2008\Mnemosyne - 2008\adc.c
00472a   6ecb     MOVWF     0xcb,0x0                                                                                        
00472c   d000     BRA       0x472e         			break;                                                                        C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           		default:                                                                       C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// if a non-supported rate is specified,                                      C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// default to a 200Hz ADC sample rate                                         C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// use a 1:16 prescaler and 1:14 postscaler                                   C:\code\2008\Mnemosyne - 2008\adc.c
0046e8   0e6a     MOVLW     0x6a           			T2CON = 0b01101010;                                                           C:\code\2008\Mnemosyne - 2008\adc.c
0046ea   6eca     MOVWF     0xca,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// Count to 221 before rolling over and generating                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           			// an interrupt (223.21 - 2 is ideal)                                         C:\code\2008\Mnemosyne - 2008\adc.c
0046ec   0edd     MOVLW     0xdd           			PR2	= 221;                                                                    C:\code\2008\Mnemosyne - 2008\adc.c
0046ee   6ecb     MOVWF     0xcb,0x0                                                                                        
0046f0   d01e     BRA       0x472e         			break;                                                                        C:\code\2008\Mnemosyne - 2008\adc.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// make sure the timer 2 register starts at zero                                C:\code\2008\Mnemosyne - 2008\adc.c
00472e   6acc     CLRF      0xcc,0x0       	TMR2 = 0x00;                                                                    C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// timer 2 interrupt is low priority                                            C:\code\2008\Mnemosyne - 2008\adc.c
004730   929f     BCF       0x9f,0x1,0x0   	IPR1bits.TMR2IP = 0;                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// to prevent a spurious interrupt, make sure the interrupt flag is reset       C:\code\2008\Mnemosyne - 2008\adc.c
004732   929e     BCF       0x9e,0x1,0x0   	PIR1bits.TMR2IF = 0;                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// enable the timer 2 interrupt                                                 C:\code\2008\Mnemosyne - 2008\adc.c
004734   829d     BSF       0x9d,0x1,0x0   	PIE1bits.TMR2IE = 1;                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// enable timer 2                                                               C:\code\2008\Mnemosyne - 2008\adc.c
004736   84ca     BSF       0xca,0x2,0x0   	T2CONbits.TMR2ON = 1;                                                           C:\code\2008\Mnemosyne - 2008\adc.c
004738   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
00473a   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00473c   ffd9                                                                                                               
00473e   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	FUNCTION:		Disable_Timer_2()                                                   C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PURPOSE:		Disables the timer 2 hardware.                                       C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\adc.c
                                           void Disable_Timer_2(void)                                                       C:\code\2008\Mnemosyne - 2008\adc.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// disable the timer 2 interrupt                                                C:\code\2008\Mnemosyne - 2008\adc.c
004740   929d     BCF       0x9d,0x1,0x0   	PIE1bits.TMR2IE = 0;                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// disable timer 2                                                              C:\code\2008\Mnemosyne - 2008\adc.c
004742   94ca     BCF       0xca,0x2,0x0   	T2CONbits.TMR2ON = 0;                                                           C:\code\2008\Mnemosyne - 2008\adc.c
004744   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	FUNCTION:		Get_ADC_Result()                                                    C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PURPOSE:		Given the ADC channel number, returns the last ADC result            C:\code\2008\Mnemosyne - 2008\adc.c
                                           *					expressed in "data number" units.                                          C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PARAMETERS:		ADC channel number                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\adc.c
004746   cfd9     MOVFF     0xfd9,0xfe6    unsigned int Get_ADC_Result(unsigned char channel)                               C:\code\2008\Mnemosyne - 2008\adc.c
004748   ffe6                                                                                                               
00474a   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00474c   ffd9                                                                                                               
00474e   0e02     MOVLW     0x2                                                                                             
004750   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           	unsigned int temp_adc_result;                                                   C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
004752   0efe     MOVLW     0xfe           	if(channel <= num_adc_channels)                                                 C:\code\2008\Mnemosyne - 2008\adc.c
004754   cfdb     MOVFF     0xfdb,0x0                                                                                       
004756   f000                                                                                                               
004758   0102     MOVLB     0x2                                                                                             
00475a   5176     MOVF      0x76,0x0,0x1                                                                                    
00475c   80d8     BSF       0xd8,0x0,0x0                                                                                    
00475e   5400     SUBFWB    0x0,0x0,0x0                                                                                     
004760   e312     BNC       0x4786                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\adc.c
                                           		// disable the ADC interrupt                                                   C:\code\2008\Mnemosyne - 2008\adc.c
004762   9c9d     BCF       0x9d,0x6,0x0   		PIE1bits.ADIE = 0;                                                             C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           		// one is subtracted because analog input 1 maps to adc_result[0],             C:\code\2008\Mnemosyne - 2008\adc.c
                                           		// input 2 maps to adc_result[1],..., input 16 maps to adc_result[15]          C:\code\2008\Mnemosyne - 2008\adc.c
004764   0efe     MOVLW     0xfe           		temp_adc_result = adc_result[channel - 1];                                     C:\code\2008\Mnemosyne - 2008\adc.c
004766   04db     DECF      0xdb,0x0,0x0                                                                                    
004768   6ee9     MOVWF     0xe9,0x0                                                                                        
00476a   6aea     CLRF      0xea,0x0                                                                                        
00476c   90d8     BCF       0xd8,0x0,0x0                                                                                    
00476e   36e9     RLCF      0xe9,0x1,0x0                                                                                    
004770   36ea     RLCF      0xea,0x1,0x0                                                                                    
004772   0e80     MOVLW     0x80                                                                                            
004774   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
004776   0e02     MOVLW     0x2                                                                                             
004778   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00477a   cfee     MOVFF     0xfee,0xfde                                                                                     
00477c   ffde                                                                                                               
00477e   cfed     MOVFF     0xfed,0xfdd                                                                                     
004780   ffdd                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           		// enable the ADC interrupt                                                    C:\code\2008\Mnemosyne - 2008\adc.c
004782   8c9d     BSF       0x9d,0x6,0x0   		PIE1bits.ADIE = 1;                                                             C:\code\2008\Mnemosyne - 2008\adc.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\adc.c
004784   d002     BRA       0x478a         	else                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\adc.c
                                           		// bad channel number; return zero		//-1 is more distinct                      C:\code\2008\Mnemosyne - 2008\adc.c
004786   68de     SETF      0xde,0x0       		temp_adc_result = -1;                                                          C:\code\2008\Mnemosyne - 2008\adc.c
004788   68dd     SETF      0xdd,0x0                                                                                        
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
00478a   cfde     MOVFF     0xfde,0x0      	return(temp_adc_result);                                                        C:\code\2008\Mnemosyne - 2008\adc.c
00478c   f000                                                                                                               
00478e   cfdd     MOVFF     0xfdd,0x1                                                                                       
004790   f001                                                                                                               
004792   c000     MOVFF     0x0,0xff3                                                                                       
004794   fff3                                                                                                               
004796   c001     MOVFF     0x1,0xff4                                                                                       
004798   fff4                                                                                                               
00479a   d000     BRA       0x479c                                                                                          
00479c   cfd9     MOVFF     0xfd9,0xfe1    }                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
00479e   ffe1                                                                                                               
0047a0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0047a2   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0047a4   ffd9                                                                                                               
0047a6   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	FUNCTION:		Convert_ADC_to_mV()                                                 C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PURPOSE:		Converts the raw output of the ADC to millivolts.                    C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PARAMETERS:		ADC output value to convert                                       C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	RETURNS:		Millivolts                                                           C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\adc.c
0047a8   cfd9     MOVFF     0xfd9,0xfe6    unsigned int Convert_ADC_to_mV(unsigned int adc)                                 C:\code\2008\Mnemosyne - 2008\adc.c
0047aa   ffe6                                                                                                               
0047ac   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0047ae   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
0047b0   0efd     MOVLW     0xfd           	return((unsigned int)(((long)adc * (VREF_POS_MV - VREF_NEG_MV)) / ADC_RANGE));  C:\code\2008\Mnemosyne - 2008\adc.c
0047b2   cfdb     MOVFF     0xfdb,0x0                                                                                       
0047b4   f000                                                                                                               
0047b6   0efe     MOVLW     0xfe                                                                                            
0047b8   cfdb     MOVFF     0xfdb,0x1                                                                                       
0047ba   f001                                                                                                               
0047bc   6a02     CLRF      0x2,0x0                                                                                         
0047be   6a03     CLRF      0x3,0x0                                                                                         
0047c0   0e88     MOVLW     0x88                                                                                            
0047c2   6e44     MOVWF     0x44,0x0                                                                                        
0047c4   0e13     MOVLW     0x13                                                                                            
0047c6   6e45     MOVWF     0x45,0x0                                                                                        
0047c8   6a46     CLRF      0x46,0x0                                                                                        
0047ca   6a47     CLRF      0x47,0x0                                                                                        
0047cc   c000     MOVFF     0x0,0x3f                                                                                        
0047ce   f03f                                                                                                               
0047d0   c001     MOVFF     0x1,0x40                                                                                        
0047d2   f040                                                                                                               
0047d4   c002     MOVFF     0x2,0x41                                                                                        
0047d6   f041                                                                                                               
0047d8   c003     MOVFF     0x3,0x42                                                                                        
0047da   f042                                                                                                               
0047dc   ec15     CALL      0x5e2a,0x0                                                                                      
0047de   f02f                                                                                                               
0047e0   c03b     MOVFF     0x3b,0x0                                                                                        
0047e2   f000                                                                                                               
0047e4   c03c     MOVFF     0x3c,0x1                                                                                        
0047e6   f001                                                                                                               
0047e8   c03d     MOVFF     0x3d,0x2                                                                                        
0047ea   f002                                                                                                               
0047ec   c03e     MOVFF     0x3e,0x3                                                                                        
0047ee   f003                                                                                                               
0047f0   6a44     CLRF      0x44,0x0                                                                                        
0047f2   0e08     MOVLW     0x8                                                                                             
0047f4   6e45     MOVWF     0x45,0x0                                                                                        
0047f6   6a46     CLRF      0x46,0x0                                                                                        
0047f8   6a47     CLRF      0x47,0x0                                                                                        
0047fa   c000     MOVFF     0x0,0x3f                                                                                        
0047fc   f03f                                                                                                               
0047fe   c001     MOVFF     0x1,0x40                                                                                        
004800   f040                                                                                                               
004802   c002     MOVFF     0x2,0x41                                                                                        
004804   f041                                                                                                               
004806   c003     MOVFF     0x3,0x42                                                                                        
004808   f042                                                                                                               
00480a   ecf2     CALL      0x43e4,0x0                                                                                      
00480c   f021                                                                                                               
00480e   c03f     MOVFF     0x3f,0x0                                                                                        
004810   f000                                                                                                               
004812   c040     MOVFF     0x40,0x1                                                                                        
004814   f001                                                                                                               
004816   c041     MOVFF     0x41,0x2                                                                                        
004818   f002                                                                                                               
00481a   c042     MOVFF     0x42,0x3                                                                                        
00481c   f003                                                                                                               
00481e   c000     MOVFF     0x0,0xff3                                                                                       
004820   fff3                                                                                                               
004822   c001     MOVFF     0x1,0xff4                                                                                       
004824   fff4                                                                                                               
004826   d000     BRA       0x4828                                                                                          
004828   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
00482a   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00482c   ffd9                                                                                                               
00482e   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	FUNCTION:		Get_ADC_Result_Count()                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PURPOSE:                                                                       C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\adc.c
004830   cfd9     MOVFF     0xfd9,0xfe6    unsigned char Get_ADC_Result_Count()                                             C:\code\2008\Mnemosyne - 2008\adc.c
004832   ffe6                                                                                                               
004834   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
004836   ffd9                                                                                                               
004838   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           	unsigned char temp_adc_update_count;                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// disable the ADC interrupt                                                    C:\code\2008\Mnemosyne - 2008\adc.c
00483a   9c9d     BCF       0x9d,0x6,0x0   	PIE1bits.ADIE = 0;                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
00483c   c2fb     MOVFF     0x2fb,0xfdf    	temp_adc_update_count = adc_update_count;                                       C:\code\2008\Mnemosyne - 2008\adc.c
00483e   ffdf                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// enable the ADC interrupt                                                     C:\code\2008\Mnemosyne - 2008\adc.c
004840   8c9d     BSF       0x9d,0x6,0x0   	PIE1bits.ADIE = 1;                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
004842   50df     MOVF      0xdf,0x0,0x0   	return(temp_adc_update_count);                                                  C:\code\2008\Mnemosyne - 2008\adc.c
004844   d000     BRA       0x4846                                                                                          
004846   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
004848   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00484a   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00484c   ffd9                                                                                                               
00484e   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	FUNCTION:		Reset_ADC_Result_Count()                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PURPOSE:		Resets the ADC update counter to zero                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\adc.c
                                           void Reset_ADC_Result_Count()                                                    C:\code\2008\Mnemosyne - 2008\adc.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// disable the ADC interrupt                                                    C:\code\2008\Mnemosyne - 2008\adc.c
004850   9c9d     BCF       0x9d,0x6,0x0   	PIE1bits.ADIE = 0;                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
004852   0102     MOVLB     0x2            	adc_update_count = 0;                                                           C:\code\2008\Mnemosyne - 2008\adc.c
004854   6bfb     CLRF      0xfb,0x1                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// enable the ADC interrupt                                                     C:\code\2008\Mnemosyne - 2008\adc.c
004856   8c9d     BSF       0x9d,0x6,0x0   	PIE1bits.ADIE = 1;                                                              C:\code\2008\Mnemosyne - 2008\adc.c
004858   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	FUNCTION:		Timer_2_Int_Handler()                                               C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PURPOSE:		Timer 2 interrupt service routine                                    C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	CALLED FROM:	user_routines_fast.c/InterruptHandlerLow()                        C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\adc.c
                                           void Timer_2_Int_Handler(void)                                                   C:\code\2008\Mnemosyne - 2008\adc.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// start a new analog to digital conversion                                     C:\code\2008\Mnemosyne - 2008\adc.c
00485a   82c2     BSF       0xc2,0x1,0x0   	ADCON0bits.GO = 1;                                                              C:\code\2008\Mnemosyne - 2008\adc.c
00485c   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	FUNCTION:		ADC_Int_Handler()                                                   C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PURPOSE:		ADC interrupt service routine                                        C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	CALLED FROM:	user_routines_fast.c/InterruptHandlerLow()                        C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\adc.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\adc.c
00485e   cfd9     MOVFF     0xfd9,0xfe6    void ADC_Int_Handler(void)                                                       C:\code\2008\Mnemosyne - 2008\adc.c
004860   ffe6                                                                                                               
004862   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
004864   ffd9                                                                                                               
004866   0e05     MOVLW     0x5                                                                                             
004868   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           	unsigned int adc;                                                               C:\code\2008\Mnemosyne - 2008\adc.c
                                           	unsigned char adcon0_temp;                                                      C:\code\2008\Mnemosyne - 2008\adc.c
                                           	int i;                                                                          C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// get conversion results                                                       C:\code\2008\Mnemosyne - 2008\adc.c
00486a   50c4     MOVF      0xc4,0x0,0x0   	adc = ADRESH;                                                                   C:\code\2008\Mnemosyne - 2008\adc.c
00486c   6ede     MOVWF     0xde,0x0                                                                                        
00486e   6add     CLRF      0xdd,0x0                                                                                        
004870   cfd9     MOVFF     0xfd9,0xfe9    	adc <<= 8;                                                                      C:\code\2008\Mnemosyne - 2008\adc.c
004872   ffe9                                                                                                               
004874   cfda     MOVFF     0xfda,0xfea                                                                                     
004876   ffea                                                                                                               
004878   50ee     MOVF      0xee,0x0,0x0                                                                                    
00487a   6eed     MOVWF     0xed,0x0                                                                                        
00487c   6aef     CLRF      0xef,0x0                                                                                        
00487e   50c3     MOVF      0xc3,0x0,0x0   	adc += ADRESL;                                                                  C:\code\2008\Mnemosyne - 2008\adc.c
004880   26de     ADDWF     0xde,0x1,0x0                                                                                    
004882   0e00     MOVLW     0x0                                                                                             
004884   22dd     ADDWFC    0xdd,0x1,0x0                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// add the ADC data to the appropriate accumulator                              C:\code\2008\Mnemosyne - 2008\adc.c
004886   cfde     MOVFF     0xfde,0x0      	accum[channel] += (long)adc;                                                    C:\code\2008\Mnemosyne - 2008\adc.c
004888   f000                                                                                                               
00488a   cfdd     MOVFF     0xfdd,0x1                                                                                       
00488c   f001                                                                                                               
00488e   6a02     CLRF      0x2,0x0                                                                                         
004890   6a03     CLRF      0x3,0x0                                                                                         
004892   0102     MOVLB     0x2                                                                                             
004894   5186     MOVF      0x86,0x0,0x1                                                                                    
004896   0d04     MULLW     0x4                                                                                             
004898   cff3     MOVFF     0xff3,0xfe9                                                                                     
00489a   ffe9                                                                                                               
00489c   cff4     MOVFF     0xff4,0xfea                                                                                     
00489e   ffea                                                                                                               
0048a0   0e78     MOVLW     0x78                                                                                            
0048a2   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
0048a4   0e02     MOVLW     0x2                                                                                             
0048a6   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0048a8   5000     MOVF      0x0,0x0,0x0                                                                                     
0048aa   26ee     ADDWF     0xee,0x1,0x0                                                                                    
0048ac   5001     MOVF      0x1,0x0,0x0                                                                                     
0048ae   22ee     ADDWFC    0xee,0x1,0x0                                                                                    
0048b0   5002     MOVF      0x2,0x0,0x0                                                                                     
0048b2   22ee     ADDWFC    0xee,0x1,0x0                                                                                    
0048b4   5003     MOVF      0x3,0x0,0x0                                                                                     
0048b6   22ee     ADDWFC    0xee,0x1,0x0                                                                                    
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// increment the ADC channel index                                              C:\code\2008\Mnemosyne - 2008\adc.c
0048b8   2b86     INCF      0x86,0x1,0x1   	channel++;                                                                      C:\code\2008\Mnemosyne - 2008\adc.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// do we need to wrap around to zero?                                           C:\code\2008\Mnemosyne - 2008\adc.c
0048ba   5176     MOVF      0x76,0x0,0x1   	if(channel >= num_adc_channels)                                                 C:\code\2008\Mnemosyne - 2008\adc.c
0048bc   5d86     SUBWF     0x86,0x0,0x1                                                                                    
0048be   e304     BNC       0x48c8                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\adc.c
0048c0   6b86     CLRF      0x86,0x1       		channel = 0;                                                                   C:\code\2008\Mnemosyne - 2008\adc.c
0048c2   2b84     INCF      0x84,0x1,0x1   		samples++;                                                                     C:\code\2008\Mnemosyne - 2008\adc.c
0048c4   0e00     MOVLW     0x0                                                                                             
0048c6   2385     ADDWFC    0x85,0x1,0x1                                                                                    
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// Select next ADC channel. This also starts the process whereby the ADC        C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// sample and hold capacitor is allowed to start charging, which must be        C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// completed before the next analog to digital conversion can be started.       C:\code\2008\Mnemosyne - 2008\adc.c
0048c8   0e02     MOVLW     0x2            	adcon0_temp = channel;                                                          C:\code\2008\Mnemosyne - 2008\adc.c
0048ca   c286     MOVFF     0x286,0xfdb                                                                                     
0048cc   ffdb                                                                                                               
0048ce   50db     MOVF      0xdb,0x0,0x0   	adcon0_temp <<= 2;                                                              C:\code\2008\Mnemosyne - 2008\adc.c
0048d0   0d04     MULLW     0x4                                                                                             
0048d2   0e02     MOVLW     0x2                                                                                             
0048d4   cff3     MOVFF     0xff3,0xfdb                                                                                     
0048d6   ffdb                                                                                                               
0048d8   80db     BSF       0xdb,0x0,0x0   	adcon0_temp |= 0b00000001;                                                      C:\code\2008\Mnemosyne - 2008\adc.c
0048da   50db     MOVF      0xdb,0x0,0x0   	ADCON0 = adcon0_temp;                                                           C:\code\2008\Mnemosyne - 2008\adc.c
0048dc   6ec2     MOVWF     0xc2,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           	// check to see if we've got a full sample set                                  C:\code\2008\Mnemosyne - 2008\adc.c
0048de   5174     MOVF      0x74,0x0,0x1   	if(samples >= adc_samples_per_update)                                           C:\code\2008\Mnemosyne - 2008\adc.c
0048e0   5d84     SUBWF     0x84,0x0,0x1                                                                                    
0048e2   5175     MOVF      0x75,0x0,0x1                                                                                    
0048e4   5985     SUBWFB    0x85,0x0,0x1                                                                                    
0048e6   e201     BC        0x48ea                                                                                          
0048e8   d083     BRA       0x49f0                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\adc.c
                                           		// update the ADC result array                                                 C:\code\2008\Mnemosyne - 2008\adc.c
0048ea   0e03     MOVLW     0x3            		for(i=0; i < num_adc_channels; i++)                                            C:\code\2008\Mnemosyne - 2008\adc.c
0048ec   6adb     CLRF      0xdb,0x0                                                                                        
0048ee   0e04     MOVLW     0x4                                                                                             
0048f0   6adb     CLRF      0xdb,0x0                                                                                        
0048f2   0e03     MOVLW     0x3                                                                                             
0048f4   cfdb     MOVFF     0xfdb,0x0                                                                                       
0048f6   f000                                                                                                               
0048f8   0e04     MOVLW     0x4                                                                                             
0048fa   cfdb     MOVFF     0xfdb,0x1                                                                                       
0048fc   f001                                                                                                               
0048fe   0102     MOVLB     0x2                                                                                             
004900   5176     MOVF      0x76,0x0,0x1                                                                                    
004902   0100     MOVLB     0x0                                                                                             
004904   ae01     BTFSS     0x1,0x7,0x0                                                                                     
004906   d002     BRA       0x490c                                                                                          
004908   90d8     BCF       0xd8,0x0,0x0                                                                                    
00490a   d003     BRA       0x4912                                                                                          
00490c   5c00     SUBWF     0x0,0x0,0x0                                                                                     
00490e   0e00     MOVLW     0x0                                                                                             
004910   5801     SUBWFB    0x1,0x0,0x0                                                                                     
004912   e23a     BC        0x4988                                                                                          
00497c   0e03     MOVLW     0x3                                                                                             
00497e   2adb     INCF      0xdb,0x1,0x0                                                                                    
004980   0e04     MOVLW     0x4                                                                                             
004982   e301     BNC       0x4986                                                                                          
004984   2adb     INCF      0xdb,0x1,0x0                                                                                    
004986   d7b5     BRA       0x48f2                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\adc.c
004914   0e03     MOVLW     0x3            			adc_result[i] = (long)(accum[i] >> adc_result_divisor);                       C:\code\2008\Mnemosyne - 2008\adc.c
004916   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
004918   ffe9                                                                                                               
00491a   0e04     MOVLW     0x4                                                                                             
00491c   cfdb     MOVFF     0xfdb,0xfea                                                                                     
00491e   ffea                                                                                                               
004920   90d8     BCF       0xd8,0x0,0x0                                                                                    
004922   36e9     RLCF      0xe9,0x1,0x0                                                                                    
004924   36ea     RLCF      0xea,0x1,0x0                                                                                    
004926   90d8     BCF       0xd8,0x0,0x0                                                                                    
004928   36e9     RLCF      0xe9,0x1,0x0                                                                                    
00492a   36ea     RLCF      0xea,0x1,0x0                                                                                    
00492c   0e78     MOVLW     0x78                                                                                            
00492e   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
004930   0e02     MOVLW     0x2                                                                                             
004932   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
004934   0102     MOVLB     0x2                                                                                             
004936   5177     MOVF      0x77,0x0,0x1                                                                                    
004938   0b1f     ANDLW     0x1f                                                                                            
00493a   cfee     MOVFF     0xfee,0x0                                                                                       
00493c   f000                                                                                                               
00493e   cfee     MOVFF     0xfee,0x1                                                                                       
004940   f001                                                                                                               
004942   cfee     MOVFF     0xfee,0x2                                                                                       
004944   f002                                                                                                               
004946   cfee     MOVFF     0xfee,0x3                                                                                       
004948   f003                                                                                                               
00494a   e007     BZ        0x495a                                                                                          
00494c   90d8     BCF       0xd8,0x0,0x0                                                                                    
00494e   3203     RRCF      0x3,0x1,0x0                                                                                     
004950   3202     RRCF      0x2,0x1,0x0                                                                                     
004952   3201     RRCF      0x1,0x1,0x0                                                                                     
004954   3200     RRCF      0x0,0x1,0x0                                                                                     
004956   06e8     DECF      0xe8,0x1,0x0                                                                                    
004958   e1f9     BNZ       0x494c                                                                                          
00495a   0e03     MOVLW     0x3                                                                                             
00495c   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
00495e   ffe9                                                                                                               
004960   0e04     MOVLW     0x4                                                                                             
004962   cfdb     MOVFF     0xfdb,0xfea                                                                                     
004964   ffea                                                                                                               
004966   90d8     BCF       0xd8,0x0,0x0                                                                                    
004968   36e9     RLCF      0xe9,0x1,0x0                                                                                    
00496a   36ea     RLCF      0xea,0x1,0x0                                                                                    
00496c   0e80     MOVLW     0x80                                                                                            
00496e   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
004970   0e02     MOVLW     0x2                                                                                             
004972   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
004974   c000     MOVFF     0x0,0xfee                                                                                       
004976   ffee                                                                                                               
004978   c001     MOVFF     0x1,0xfed                                                                                       
00497a   ffed                                                                                                               
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                           		// reset the sample accumulator(s) to zero                                     C:\code\2008\Mnemosyne - 2008\adc.c
004988   0e03     MOVLW     0x3            		for(i=0; i < num_adc_channels; i++)                                            C:\code\2008\Mnemosyne - 2008\adc.c
00498a   6adb     CLRF      0xdb,0x0                                                                                        
00498c   0e04     MOVLW     0x4                                                                                             
00498e   6adb     CLRF      0xdb,0x0                                                                                        
004990   0e03     MOVLW     0x3                                                                                             
004992   cfdb     MOVFF     0xfdb,0x0                                                                                       
004994   f000                                                                                                               
004996   0e04     MOVLW     0x4                                                                                             
004998   cfdb     MOVFF     0xfdb,0x1                                                                                       
00499a   f001                                                                                                               
00499c   0102     MOVLB     0x2                                                                                             
00499e   5176     MOVF      0x76,0x0,0x1                                                                                    
0049a0   0100     MOVLB     0x0                                                                                             
0049a2   ae01     BTFSS     0x1,0x7,0x0                                                                                     
0049a4   d002     BRA       0x49aa                                                                                          
0049a6   90d8     BCF       0xd8,0x0,0x0                                                                                    
0049a8   d003     BRA       0x49b0                                                                                          
0049aa   5c00     SUBWF     0x0,0x0,0x0                                                                                     
0049ac   0e00     MOVLW     0x0                                                                                             
0049ae   5801     SUBWFB    0x1,0x0,0x0                                                                                     
0049b0   e21a     BC        0x49e6                                                                                          
0049da   0e03     MOVLW     0x3                                                                                             
0049dc   2adb     INCF      0xdb,0x1,0x0                                                                                    
0049de   0e04     MOVLW     0x4                                                                                             
0049e0   e301     BNC       0x49e4                                                                                          
0049e2   2adb     INCF      0xdb,0x1,0x0                                                                                    
0049e4   d7d5     BRA       0x4990                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\adc.c
0049b2   0e03     MOVLW     0x3            			accum[i] = 0L;                                                                C:\code\2008\Mnemosyne - 2008\adc.c
0049b4   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0049b6   ffe9                                                                                                               
0049b8   0e04     MOVLW     0x4                                                                                             
0049ba   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0049bc   ffea                                                                                                               
0049be   90d8     BCF       0xd8,0x0,0x0                                                                                    
0049c0   36e9     RLCF      0xe9,0x1,0x0                                                                                    
0049c2   36ea     RLCF      0xea,0x1,0x0                                                                                    
0049c4   90d8     BCF       0xd8,0x0,0x0                                                                                    
0049c6   36e9     RLCF      0xe9,0x1,0x0                                                                                    
0049c8   36ea     RLCF      0xea,0x1,0x0                                                                                    
0049ca   0e78     MOVLW     0x78                                                                                            
0049cc   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
0049ce   0e02     MOVLW     0x2                                                                                             
0049d0   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0049d2   6aee     CLRF      0xee,0x0                                                                                        
0049d4   6aee     CLRF      0xee,0x0                                                                                        
0049d6   6aee     CLRF      0xee,0x0                                                                                        
0049d8   6aee     CLRF      0xee,0x0                                                                                        
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\adc.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           		// signal that a fresh sample set is available                                 C:\code\2008\Mnemosyne - 2008\adc.c
0049e6   0102     MOVLB     0x2            		adc_update_count++;                                                            C:\code\2008\Mnemosyne - 2008\adc.c
0049e8   2bfb     INCF      0xfb,0x1,0x1                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\adc.c
                                           		// start a fresh sample set                                                    C:\code\2008\Mnemosyne - 2008\adc.c
0049ea   0102     MOVLB     0x2            		samples = 0;                                                                   C:\code\2008\Mnemosyne - 2008\adc.c
0049ec   6b84     CLRF      0x84,0x1                                                                                        
0049ee   6b85     CLRF      0x85,0x1                                                                                        
                                           	}	                                                                              C:\code\2008\Mnemosyne - 2008\adc.c
0049f0   cfd9     MOVFF     0xfd9,0xfe1    }                                                                                C:\code\2008\Mnemosyne - 2008\adc.c
0049f2   ffe1                                                                                                               
0049f4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0049f6   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0049f8   ffd9                                                                                                               
0049fa   0012     RETURN    0x0                                                                                             
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	TITLE:		camera.c                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	VERSION:	0.2 (Beta)                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	DATE:		16-Jan-2007                                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	AUTHOR:		R. Kevin Watson                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           *				kevinw@jpl.nasa.gov                                                         C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	COMMENTS:	This is the "streamlined" version of camera.c                        C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *				You are free to use this source code for any non-commercial                 C:\code\2008\Mnemosyne - 2008\camera.c
                                           *				use. Please do not make copies of this source code, modified                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *				or un-modified, publicly available on the internet or elsewhere             C:\code\2008\Mnemosyne - 2008\camera.c
                                           *				without permission. Thanks.                                                 C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *				Copyright ©2005-2007 R. Kevin Watson. All rights are reserved.              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           ******************************************************************************** C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	CHANGE LOG:                                                                    C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	DATE         REV  DESCRIPTION                                                  C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	-----------  ---  ----------------------------------------------------------   C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	01-Jan-2006  0.1  RKW - Original code.                                         C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	16-Jan-2007  0.2  RKW - Added Virtual_Window() function.                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\camera.c
                                           #include <stdio.h>                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           #include "serial_ports.h"                                                        C:\code\2008\Mnemosyne - 2008\camera.c
                                           #include "camera.h"                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           // This variable, when equal to one, indicates that the                          C:\code\2008\Mnemosyne - 2008\camera.c
                                           // camera has successfully initialized and should be                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           // sending data. You can also force a re-initialization                          C:\code\2008\Mnemosyne - 2008\camera.c
                                           // by setting this variable to zero by calling the                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           // function Reinitialize_Camera().                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           unsigned char camera_initialized = 0;                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           unsigned int camera_t_packets = 0;                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           unsigned int camera_acks = 0;                                                    C:\code\2008\Mnemosyne - 2008\camera.c
                                           unsigned int camera_ncks = 0;                                                    C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           // camera T packet structure                                                     C:\code\2008\Mnemosyne - 2008\camera.c
                                           T_Packet_Data_Type T_Packet_Data;                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	FUNCTION:		Camera_Handler()                                                    C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PURPOSE:		This function is responsable for camera initialization               C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					and camera serial data interpretation. Once the camera                     C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					is initialized and starts sending tracking data, this                      C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					function will continuously update the global T_Packet_Data                 C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					structure with the received tracking information.					                     C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	CALLED FROM:	user_routines.c/Process_Data_From_Master_uP()                     C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PARAMETERS:		none                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	RETURNS:		nothing                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\camera.c
003246   cfd9     MOVFF     0xfd9,0xfe6    void Camera_Handler(void)                                                        C:\code\2008\Mnemosyne - 2008\camera.c
003248   ffe6                                                                                                               
00324a   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00324c   ffd9                                                                                                               
00324e   0e04     MOVLW     0x4                                                                                             
003250   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           	unsigned char return_value;                                                     C:\code\2008\Mnemosyne - 2008\camera.c
                                           	unsigned char byte_count;                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           	unsigned char byte;                                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           	unsigned char i;                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           	// if needed, (re)initialize the camera and if the                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           	// initialization process throws an error, retry                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           	// until it's successfully initializes                                          C:\code\2008\Mnemosyne - 2008\camera.c
003252   0102     MOVLB     0x2            	if(camera_initialized == 0)                                                     C:\code\2008\Mnemosyne - 2008\camera.c
003254   51d9     MOVF      0xd9,0x0,0x1                                                                                    
003256   e10b     BNZ       0x326e                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
003258   d8f0     RCALL     0x343a         		return_value = Initialize_Camera();                                            C:\code\2008\Mnemosyne - 2008\camera.c
00325a   6edf     MOVWF     0xdf,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           		// is the camera done initializing and if so,                                  C:\code\2008\Mnemosyne - 2008\camera.c
                                           		// did it initialize without an error?                                         C:\code\2008\Mnemosyne - 2008\camera.c
00325c   04df     DECF      0xdf,0x0,0x0   		if(return_value == 1)                                                          C:\code\2008\Mnemosyne - 2008\camera.c
00325e   e104     BNZ       0x3268                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\camera.c
003260   0102     MOVLB     0x2            			camera_initialized = 1;                                                       C:\code\2008\Mnemosyne - 2008\camera.c
003262   0e01     MOVLW     0x1                                                                                             
003264   6fd9     MOVWF     0xd9,0x1                                                                                        
                                           			DEBUG(("\r\nCamera: Initialized normally\r\n"));                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           		// is the camera done initializing and if so,                                  C:\code\2008\Mnemosyne - 2008\camera.c
                                           		// did it return an error?                                                     C:\code\2008\Mnemosyne - 2008\camera.c
003266   d003     BRA       0x326e         		else if(return_value > 1)                                                      C:\code\2008\Mnemosyne - 2008\camera.c
003268   50df     MOVF      0xdf,0x0,0x0                                                                                    
00326a   0801     SUBLW     0x1                                                                                             
00326c   e200     BC        0x326e                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           			DEBUG(("\r\nCamera: Initialized abnormally with code %u\r\n", (unsigned int)return_value)); C:\code\2008\Mnemosyne - 2008\camera.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           	// find out how much data, if any, is present in                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           	// the camera serial port's received data queue?                                C:\code\2008\Mnemosyne - 2008\camera.c
00326e   db01     RCALL     0x3872         	byte_count = Camera_Serial_Port_Byte_Count();                                   C:\code\2008\Mnemosyne - 2008\camera.c
003270   6ee7     MOVWF     0xe7,0x0                                                                                        
003272   0e01     MOVLW     0x1                                                                                             
003274   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
003276   ffdb                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           	// have we received any data?                                                   C:\code\2008\Mnemosyne - 2008\camera.c
003278   50db     MOVF      0xdb,0x0,0x0   	if(byte_count > 0)                                                              C:\code\2008\Mnemosyne - 2008\camera.c
00327a   0800     SUBLW     0x0                                                                                             
00327c   e217     BC        0x32ac                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           		// we have fresh data, so read each received byte one                          C:\code\2008\Mnemosyne - 2008\camera.c
                                           		// at a time and immediatly send it to the camera state                        C:\code\2008\Mnemosyne - 2008\camera.c
                                           		// machine, which is responsable for parsing the camera                        C:\code\2008\Mnemosyne - 2008\camera.c
                                           		// data packets                                                                C:\code\2008\Mnemosyne - 2008\camera.c
00327e   0e03     MOVLW     0x3            		for(i=0; i<byte_count; i++)                                                    C:\code\2008\Mnemosyne - 2008\camera.c
003280   6adb     CLRF      0xdb,0x0                                                                                        
003282   0e01     MOVLW     0x1                                                                                             
003284   50db     MOVF      0xdb,0x0,0x0                                                                                    
003286   6ef3     MOVWF     0xf3,0x0                                                                                        
003288   0e03     MOVLW     0x3                                                                                             
00328a   cfdb     MOVFF     0xfdb,0xff4                                                                                     
00328c   fff4                                                                                                               
00328e   50f3     MOVF      0xf3,0x0,0x0                                                                                    
003290   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
003292   e20c     BC        0x32ac                                                                                          
0032a6   0e03     MOVLW     0x3                                                                                             
0032a8   2adb     INCF      0xdb,0x1,0x0                                                                                    
0032aa   d7eb     BRA       0x3282                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           			// get the next data byte                                                     C:\code\2008\Mnemosyne - 2008\camera.c
003294   daf2     RCALL     0x387a         			byte = Read_Camera_Serial_Port();                                             C:\code\2008\Mnemosyne - 2008\camera.c
003296   6ee7     MOVWF     0xe7,0x0                                                                                        
003298   0e02     MOVLW     0x2                                                                                             
00329a   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
00329c   ffdb                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           			// send the byte to the camera state machine                                  C:\code\2008\Mnemosyne - 2008\camera.c
00329e   cfdb     MOVFF     0xfdb,0xfe6    			Camera_State_Machine(byte);                                                   C:\code\2008\Mnemosyne - 2008\camera.c
0032a0   ffe6                                                                                                               
0032a2   d80a     RCALL     0x32b8                                                                                          
0032a4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
0032ac   cfd9     MOVFF     0xfd9,0xfe1    }                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
0032ae   ffe1                                                                                                               
0032b0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0032b2   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0032b4   ffd9                                                                                                               
0032b6   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	FUNCTION:		Camera_State_Machine()                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PURPOSE:		Parses the camera serial data stream looking for data                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					packets, ACKs and NCKS. When packets are complete the                      C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					individual packet counter variable is incremented, and                     C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					in the case of packets, the global data structure is                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					updated with the new data.					                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	CALLED FROM:	Camera_Handler(), above                                           C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PARAMETERS:		unsigned char of camera serial data                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	RETURNS:		nothing                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	COMMENTS:		Camera must be configured to output binary data,                    C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					not ASCII. See Raw_Mode() function.                                        C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\camera.c
0032b8   cfd9     MOVFF     0xfd9,0xfe6    void Camera_State_Machine(unsigned char byte)                                    C:\code\2008\Mnemosyne - 2008\camera.c
0032ba   ffe6                                                                                                               
0032bc   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0032be   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           	static unsigned char state = UNSYNCHRONIZED;                                    C:\code\2008\Mnemosyne - 2008\camera.c
                                           	static unsigned char packet_buffer[34];                                         C:\code\2008\Mnemosyne - 2008\camera.c
                                           	static unsigned char packet_buffer_index;                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           	static unsigned char packet_char_count;                                         C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
0032c0   0102     MOVLB     0x2            	switch(state)                                                                   C:\code\2008\Mnemosyne - 2008\camera.c
0032c2   51e0     MOVF      0xe0,0x0,0x1                                                                                    
0032c4   0a06     XORLW     0x6                                                                                             
0032c6   e101     BNZ       0x32ca                                                                                          
0032c8   d08f     BRA       0x33e8                                                                                          
0032ca   0a03     XORLW     0x3                                                                                             
0032cc   e068     BZ        0x339e                                                                                          
0032ce   0a06     XORLW     0x6                                                                                             
0032d0   e034     BZ        0x333a                                                                                          
0032d2   0a01     XORLW     0x1                                                                                             
0032d4   e025     BZ        0x3320                                                                                          
0032d6   0a03     XORLW     0x3                                                                                             
0032d8   e001     BZ        0x32dc                                                                                          
0032da   d0ab     BRA       0x3432                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           		case UNSYNCHRONIZED:                                                           C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
0032dc   0efe     MOVLW     0xfe           			if(byte == 255) // start of a new data packet?                                C:\code\2008\Mnemosyne - 2008\camera.c
0032de   50db     MOVF      0xdb,0x0,0x0                                                                                    
0032e0   6e00     MOVWF     0x0,0x0                                                                                         
0032e2   6a01     CLRF      0x1,0x0                                                                                         
0032e4   0eff     MOVLW     0xff                                                                                            
0032e6   1800     XORWF     0x0,0x0,0x0                                                                                     
0032e8   e101     BNZ       0x32ec                                                                                          
0032ea   5001     MOVF      0x1,0x0,0x0                                                                                     
0032ec   e103     BNZ       0x32f4                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
0032ee   0e02     MOVLW     0x2            				state = DETERMINING_PACKET_TYPE;                                             C:\code\2008\Mnemosyne - 2008\camera.c
0032f0   6fe0     MOVWF     0xe0,0x1                                                                                        
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
0032f2   d015     BRA       0x331e         			else if(byte == 'A') // start of an ACK?                                      C:\code\2008\Mnemosyne - 2008\camera.c
0032f4   0efe     MOVLW     0xfe                                                                                            
0032f6   50db     MOVF      0xdb,0x0,0x0                                                                                    
0032f8   0841     SUBLW     0x41                                                                                            
0032fa   e107     BNZ       0x330a                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
0032fc   0102     MOVLB     0x2            				packet_char_count = 2;                                                       C:\code\2008\Mnemosyne - 2008\camera.c
0032fe   0e02     MOVLW     0x2                                                                                             
003300   6f6c     MOVWF     0x6c,0x1                                                                                        
003302   0102     MOVLB     0x2            				state = RECEIVING_ACK;                                                       C:\code\2008\Mnemosyne - 2008\camera.c
003304   0e05     MOVLW     0x5                                                                                             
003306   6fe0     MOVWF     0xe0,0x1                                                                                        
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
003308   d00a     BRA       0x331e         			else if(byte == 'N') // start of a NCK?                                       C:\code\2008\Mnemosyne - 2008\camera.c
00330a   0efe     MOVLW     0xfe                                                                                            
00330c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00330e   084e     SUBLW     0x4e                                                                                            
003310   e106     BNZ       0x331e                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
003312   0102     MOVLB     0x2            				packet_char_count = 2;                                                       C:\code\2008\Mnemosyne - 2008\camera.c
003314   0e02     MOVLW     0x2                                                                                             
003316   6f6c     MOVWF     0x6c,0x1                                                                                        
003318   0102     MOVLB     0x2            				state = RECEIVING_NCK;                                                       C:\code\2008\Mnemosyne - 2008\camera.c
00331a   0e06     MOVLW     0x6                                                                                             
00331c   6fe0     MOVWF     0xe0,0x1                                                                                        
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
00331e   d089     BRA       0x3432         			break;                                                                        C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           		case DETERMINING_PACKET_TYPE:                                                  C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
003320   0efe     MOVLW     0xfe           			if(byte == 'T') // are we receiving a "t packet"?                             C:\code\2008\Mnemosyne - 2008\camera.c
003322   50db     MOVF      0xdb,0x0,0x0                                                                                    
003324   0854     SUBLW     0x54                                                                                            
003326   e106     BNZ       0x3334                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
003328   0102     MOVLB     0x2            				packet_buffer_index = 0;                                                     C:\code\2008\Mnemosyne - 2008\camera.c
00332a   6b6b     CLRF      0x6b,0x1                                                                                        
00332c   0102     MOVLB     0x2            				state = RECEIVING_T_PACKET;                                                  C:\code\2008\Mnemosyne - 2008\camera.c
00332e   0e03     MOVLW     0x3                                                                                             
003330   6fe0     MOVWF     0xe0,0x1                                                                                        
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
003332   d002     BRA       0x3338         			else // unknown packet type; go back to the unsynchronized state              C:\code\2008\Mnemosyne - 2008\camera.c
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
003334   0e01     MOVLW     0x1            				state = UNSYNCHRONIZED;                                                      C:\code\2008\Mnemosyne - 2008\camera.c
003336   6fe0     MOVWF     0xe0,0x1                                                                                        
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
003338   d07c     BRA       0x3432         			break;                                                                        C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           		case RECEIVING_T_PACKET:                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
00333a   0102     MOVLB     0x2            			if(packet_buffer_index < sizeof(T_Packet_Data_Type)) // still building the packet? C:\code\2008\Mnemosyne - 2008\camera.c
00333c   516b     MOVF      0x6b,0x0,0x1                                                                                    
00333e   6e00     MOVWF     0x0,0x0                                                                                         
003340   6a01     CLRF      0x1,0x0                                                                                         
003342   0e08     MOVLW     0x8                                                                                             
003344   5c00     SUBWF     0x0,0x0,0x0                                                                                     
003346   0e00     MOVLW     0x0                                                                                             
003348   5801     SUBWFB    0x1,0x0,0x0                                                                                     
00334a   e20a     BC        0x3360                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// move packet character to our buffer                                       C:\code\2008\Mnemosyne - 2008\camera.c
00334c   516b     MOVF      0x6b,0x0,0x1   				packet_buffer[packet_buffer_index] = byte;                                   C:\code\2008\Mnemosyne - 2008\camera.c
00334e   6aea     CLRF      0xea,0x0                                                                                        
003350   0f49     ADDLW     0x49                                                                                            
003352   6ee9     MOVWF     0xe9,0x0                                                                                        
003354   0e02     MOVLW     0x2                                                                                             
003356   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
003358   0efe     MOVLW     0xfe                                                                                            
00335a   cfdb     MOVFF     0xfdb,0xfef                                                                                     
00335c   ffef                                                                                                               
00335e   2b6b     INCF      0x6b,0x1,0x1   				packet_buffer_index++;                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           			                                                                              C:\code\2008\Mnemosyne - 2008\camera.c
003360   516b     MOVF      0x6b,0x0,0x1   			if(packet_buffer_index == sizeof(T_Packet_Data_Type)) // complete packet?     C:\code\2008\Mnemosyne - 2008\camera.c
003362   6e00     MOVWF     0x0,0x0                                                                                         
003364   6a01     CLRF      0x1,0x0                                                                                         
003366   0e08     MOVLW     0x8                                                                                             
003368   1800     XORWF     0x0,0x0,0x0                                                                                     
00336a   e101     BNZ       0x336e                                                                                          
00336c   5001     MOVF      0x1,0x0,0x0                                                                                     
00336e   e116     BNZ       0x339c                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
003370   c249     MOVFF     0x249,0x241    				T_Packet_Data.mx = packet_buffer[0];                                         C:\code\2008\Mnemosyne - 2008\camera.c
003372   f241                                                                                                               
003374   c24a     MOVFF     0x24a,0x242    				T_Packet_Data.my = packet_buffer[1];                                         C:\code\2008\Mnemosyne - 2008\camera.c
003376   f242                                                                                                               
003378   c24b     MOVFF     0x24b,0x243    				T_Packet_Data.x1 = packet_buffer[2];                                         C:\code\2008\Mnemosyne - 2008\camera.c
00337a   f243                                                                                                               
00337c   c24c     MOVFF     0x24c,0x244    				T_Packet_Data.y1 = packet_buffer[3];                                         C:\code\2008\Mnemosyne - 2008\camera.c
00337e   f244                                                                                                               
003380   c24d     MOVFF     0x24d,0x245    				T_Packet_Data.x2 = packet_buffer[4];                                         C:\code\2008\Mnemosyne - 2008\camera.c
003382   f245                                                                                                               
003384   c24e     MOVFF     0x24e,0x246    				T_Packet_Data.y2 = packet_buffer[5];                                         C:\code\2008\Mnemosyne - 2008\camera.c
003386   f246                                                                                                               
003388   c24f     MOVFF     0x24f,0x247    				T_Packet_Data.pixels = packet_buffer[6];                                     C:\code\2008\Mnemosyne - 2008\camera.c
00338a   f247                                                                                                               
00338c   c250     MOVFF     0x250,0x248    				T_Packet_Data.confidence = packet_buffer[7];                                 C:\code\2008\Mnemosyne - 2008\camera.c
00338e   f248                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
003390   0102     MOVLB     0x2            				camera_t_packets++;                                                          C:\code\2008\Mnemosyne - 2008\camera.c
003392   2bda     INCF      0xda,0x1,0x1                                                                                    
003394   0e00     MOVLW     0x0                                                                                             
003396   23db     ADDWFC    0xdb,0x1,0x1                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
003398   0e01     MOVLW     0x1            				state = UNSYNCHRONIZED; // we're done; go back to the unsynchronized state   C:\code\2008\Mnemosyne - 2008\camera.c
00339a   6fe0     MOVWF     0xe0,0x1                                                                                        
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
00339c   d04a     BRA       0x3432         			break;                                                                        C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           		case RECEIVING_ACK:                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
00339e   0e02     MOVLW     0x2            			if(packet_char_count == 2 && byte == 'C') // second character a C?            C:\code\2008\Mnemosyne - 2008\camera.c
0033a0   0102     MOVLB     0x2                                                                                             
0033a2   5d6c     SUBWF     0x6c,0x0,0x1                                                                                    
0033a4   e106     BNZ       0x33b2                                                                                          
0033a6   0efe     MOVLW     0xfe                                                                                            
0033a8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0033aa   0843     SUBLW     0x43                                                                                            
0033ac   e102     BNZ       0x33b2                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
0033ae   2b6c     INCF      0x6c,0x1,0x1   				packet_char_count++;                                                         C:\code\2008\Mnemosyne - 2008\camera.c
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
0033b0   d01a     BRA       0x33e6         			else if(packet_char_count == 3 && byte == 'K') // third character a K?        C:\code\2008\Mnemosyne - 2008\camera.c
0033b2   0e03     MOVLW     0x3                                                                                             
0033b4   5d6c     SUBWF     0x6c,0x0,0x1                                                                                    
0033b6   e106     BNZ       0x33c4                                                                                          
0033b8   0efe     MOVLW     0xfe                                                                                            
0033ba   50db     MOVF      0xdb,0x0,0x0                                                                                    
0033bc   084b     SUBLW     0x4b                                                                                            
0033be   e102     BNZ       0x33c4                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
0033c0   2b6c     INCF      0x6c,0x1,0x1   				packet_char_count++;                                                         C:\code\2008\Mnemosyne - 2008\camera.c
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
0033c2   d011     BRA       0x33e6         			else if(packet_char_count == 4 && byte == '\r') // fourth character a return? C:\code\2008\Mnemosyne - 2008\camera.c
0033c4   0e04     MOVLW     0x4                                                                                             
0033c6   5d6c     SUBWF     0x6c,0x0,0x1                                                                                    
0033c8   e10b     BNZ       0x33e0                                                                                          
0033ca   0efe     MOVLW     0xfe                                                                                            
0033cc   50db     MOVF      0xdb,0x0,0x0                                                                                    
0033ce   080d     SUBLW     0xd                                                                                             
0033d0   e107     BNZ       0x33e0                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
0033d2   0102     MOVLB     0x2            				camera_acks++;                                                               C:\code\2008\Mnemosyne - 2008\camera.c
0033d4   2bdc     INCF      0xdc,0x1,0x1                                                                                    
0033d6   0e00     MOVLW     0x0                                                                                             
0033d8   23dd     ADDWFC    0xdd,0x1,0x1                                                                                    
0033da   0e01     MOVLW     0x1            				state = UNSYNCHRONIZED;                                                      C:\code\2008\Mnemosyne - 2008\camera.c
0033dc   6fe0     MOVWF     0xe0,0x1                                                                                        
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
0033de   d003     BRA       0x33e6         			else                                                                          C:\code\2008\Mnemosyne - 2008\camera.c
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
0033e0   0102     MOVLB     0x2            				state = UNSYNCHRONIZED;                                                      C:\code\2008\Mnemosyne - 2008\camera.c
0033e2   0e01     MOVLW     0x1                                                                                             
0033e4   6fe0     MOVWF     0xe0,0x1                                                                                        
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
0033e6   d025     BRA       0x3432         			break;                                                                        C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           		case RECEIVING_NCK:                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
0033e8   0e02     MOVLW     0x2            			if(packet_char_count == 2 && byte == 'C') // second character a C?            C:\code\2008\Mnemosyne - 2008\camera.c
0033ea   0102     MOVLB     0x2                                                                                             
0033ec   5d6c     SUBWF     0x6c,0x0,0x1                                                                                    
0033ee   e106     BNZ       0x33fc                                                                                          
0033f0   0efe     MOVLW     0xfe                                                                                            
0033f2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0033f4   0843     SUBLW     0x43                                                                                            
0033f6   e102     BNZ       0x33fc                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
0033f8   2b6c     INCF      0x6c,0x1,0x1   				packet_char_count++;                                                         C:\code\2008\Mnemosyne - 2008\camera.c
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
0033fa   d01a     BRA       0x3430         			else if(packet_char_count == 3 && byte == 'K') // third character a K?        C:\code\2008\Mnemosyne - 2008\camera.c
0033fc   0e03     MOVLW     0x3                                                                                             
0033fe   5d6c     SUBWF     0x6c,0x0,0x1                                                                                    
003400   e106     BNZ       0x340e                                                                                          
003402   0efe     MOVLW     0xfe                                                                                            
003404   50db     MOVF      0xdb,0x0,0x0                                                                                    
003406   084b     SUBLW     0x4b                                                                                            
003408   e102     BNZ       0x340e                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
00340a   2b6c     INCF      0x6c,0x1,0x1   				packet_char_count++;                                                         C:\code\2008\Mnemosyne - 2008\camera.c
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
00340c   d011     BRA       0x3430         			else if(packet_char_count == 4 && byte == '\r') // fourth character a return? C:\code\2008\Mnemosyne - 2008\camera.c
00340e   0e04     MOVLW     0x4                                                                                             
003410   5d6c     SUBWF     0x6c,0x0,0x1                                                                                    
003412   e10b     BNZ       0x342a                                                                                          
003414   0efe     MOVLW     0xfe                                                                                            
003416   50db     MOVF      0xdb,0x0,0x0                                                                                    
003418   080d     SUBLW     0xd                                                                                             
00341a   e107     BNZ       0x342a                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
00341c   0102     MOVLB     0x2            				camera_ncks++;                                                               C:\code\2008\Mnemosyne - 2008\camera.c
00341e   2bde     INCF      0xde,0x1,0x1                                                                                    
003420   0e00     MOVLW     0x0                                                                                             
003422   23df     ADDWFC    0xdf,0x1,0x1                                                                                    
003424   0e01     MOVLW     0x1            				state = UNSYNCHRONIZED;                                                      C:\code\2008\Mnemosyne - 2008\camera.c
003426   6fe0     MOVWF     0xe0,0x1                                                                                        
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
003428   d003     BRA       0x3430         			else                                                                          C:\code\2008\Mnemosyne - 2008\camera.c
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
00342a   0102     MOVLB     0x2            				state = UNSYNCHRONIZED;                                                      C:\code\2008\Mnemosyne - 2008\camera.c
00342c   0e01     MOVLW     0x1                                                                                             
00342e   6fe0     MOVWF     0xe0,0x1                                                                                        
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\camera.c
003430   d000     BRA       0x3432         			break;	                                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
003432   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
003434   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003436   ffd9                                                                                                               
003438   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	FUNCTION:		Initialize_Camera()                                                 C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PURPOSE:		This function is responsable for initializing the                    C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					camera.                                                                    C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	CALLED FROM:	Camera_Handler(), below.                                          C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	RETURNS:		0: Initialization in progress.                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					1: Initialization has completed.                                           C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					2-127: Camera returned a NCK and the returned value                        C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					indicates the state that caused the NCK.                                   C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					128-255: Camera didn't return a ACK or NCK within                          C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					the time allowed. The returned value is the value                          C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					128 added to the state that failed. The amount of                          C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					time allowed is set by the MAX_ACK_LOOP_COUNT                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					parameter found in camera.h.					                                          C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	COMMENTS:		Camera_acks and camera_ncks are incremented by the                  C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					function Camera_State_Machine() which is called by                         C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					Process_Camera_Data() to process data sent by the                          C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					camera.                                                                    C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					                                                                           C:\code\2008\Mnemosyne - 2008\camera.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\camera.c
00343a   cfd9     MOVFF     0xfd9,0xfe6    unsigned char Initialize_Camera(void)                                            C:\code\2008\Mnemosyne - 2008\camera.c
00343c   ffe6                                                                                                               
00343e   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003440   ffd9                                                                                                               
003442   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           	static unsigned char boot_initialization_flag = 1;                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           	static unsigned char initialize_flag = 1;                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           	static unsigned char state;                                                     C:\code\2008\Mnemosyne - 2008\camera.c
                                           	static unsigned char wait_for_ack;                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           	static unsigned int loop_count;                                                 C:\code\2008\Mnemosyne - 2008\camera.c
                                           	static unsigned char return_value;                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           	unsigned char returned_value;                                                   C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           	// stuff to do after the camera goes through a power-on reset                   C:\code\2008\Mnemosyne - 2008\camera.c
003444   0102     MOVLB     0x2            	if(boot_initialization_flag == 1)                                               C:\code\2008\Mnemosyne - 2008\camera.c
003446   05e1     DECF      0xe1,0x0,0x1                                                                                    
003448   e107     BNZ       0x3458                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           		// get the camera's attention                                                  C:\code\2008\Mnemosyne - 2008\camera.c
00344a   d98a     RCALL     0x3760         		Camera_Idle();                                                                 C:\code\2008\Mnemosyne - 2008\camera.c
                                           		// set the command & packet transfer mode                                      C:\code\2008\Mnemosyne - 2008\camera.c
00344c   0e05     MOVLW     0x5            		Raw_Mode(5);                                                                   C:\code\2008\Mnemosyne - 2008\camera.c
00344e   6ee6     MOVWF     0xe6,0x0                                                                                        
003450   d993     RCALL     0x3778                                                                                          
003452   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		// don't execute this code again until the next power on reset                 C:\code\2008\Mnemosyne - 2008\camera.c
003454   0102     MOVLB     0x2            		boot_initialization_flag = 0;                                                  C:\code\2008\Mnemosyne - 2008\camera.c
003456   6be1     CLRF      0xe1,0x1                                                                                        
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           	// do we need to (re)initialize the state machine?                              C:\code\2008\Mnemosyne - 2008\camera.c
003458   05e2     DECF      0xe2,0x0,0x1   	if(initialize_flag == 1)                                                        C:\code\2008\Mnemosyne - 2008\camera.c
00345a   e10d     BNZ       0x3476                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
00345c   6be2     CLRF      0xe2,0x1       		initialize_flag = 0;                                                           C:\code\2008\Mnemosyne - 2008\camera.c
00345e   0102     MOVLB     0x2            		wait_for_ack = 0;                                                              C:\code\2008\Mnemosyne - 2008\camera.c
003460   6b6e     CLRF      0x6e,0x1                                                                                        
003462   0e01     MOVLW     0x1            		state = STATE_ONE;                                                             C:\code\2008\Mnemosyne - 2008\camera.c
003464   6f6d     MOVWF     0x6d,0x1                                                                                        
003466   6b6f     CLRF      0x6f,0x1       		loop_count = 0;                                                                C:\code\2008\Mnemosyne - 2008\camera.c
003468   6b70     CLRF      0x70,0x1                                                                                        
00346a   6b71     CLRF      0x71,0x1       		return_value = 0;                                                              C:\code\2008\Mnemosyne - 2008\camera.c
00346c   0102     MOVLB     0x2            		camera_acks = 0;                                                               C:\code\2008\Mnemosyne - 2008\camera.c
00346e   6bdc     CLRF      0xdc,0x1                                                                                        
003470   6bdd     CLRF      0xdd,0x1                                                                                        
003472   6bde     CLRF      0xde,0x1       		camera_ncks = 0;                                                               C:\code\2008\Mnemosyne - 2008\camera.c
003474   6bdf     CLRF      0xdf,0x1                                                                                        
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           	// do we need to wait for an ACK from the camera?                               C:\code\2008\Mnemosyne - 2008\camera.c
003476   0102     MOVLB     0x2            	if(wait_for_ack == 1)                                                           C:\code\2008\Mnemosyne - 2008\camera.c
003478   056e     DECF      0x6e,0x0,0x1                                                                                    
00347a   e129     BNZ       0x34ce                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
00347c   0102     MOVLB     0x2            		if(camera_acks >= 1) // got ACK?                                               C:\code\2008\Mnemosyne - 2008\camera.c
00347e   0e01     MOVLW     0x1                                                                                             
003480   5ddc     SUBWF     0xdc,0x0,0x1                                                                                    
003482   0e00     MOVLW     0x0                                                                                             
003484   59dd     SUBWFB    0xdd,0x0,0x1                                                                                    
003486   e305     BNC       0x3492                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           			// we're no longer waiting for an ACK                                         C:\code\2008\Mnemosyne - 2008\camera.c
003488   0102     MOVLB     0x2            			wait_for_ack = 0;                                                             C:\code\2008\Mnemosyne - 2008\camera.c
00348a   6b6e     CLRF      0x6e,0x1                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           			// reset the loop counter                                                     C:\code\2008\Mnemosyne - 2008\camera.c
00348c   6b6f     CLRF      0x6f,0x1       			loop_count = 0;                                                               C:\code\2008\Mnemosyne - 2008\camera.c
00348e   6b70     CLRF      0x70,0x1                                                                                        
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\camera.c
003490   d01d     BRA       0x34cc         		else if(camera_ncks >= 1) // got NCK?                                          C:\code\2008\Mnemosyne - 2008\camera.c
003492   0e01     MOVLW     0x1                                                                                             
003494   5dde     SUBWF     0xde,0x0,0x1                                                                                    
003496   0e00     MOVLW     0x0                                                                                             
003498   59df     SUBWFB    0xdf,0x0,0x1                                                                                    
00349a   e304     BNC       0x34a4                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           			// return with a value that signals an error happened                         C:\code\2008\Mnemosyne - 2008\camera.c
00349c   0102     MOVLB     0x2            			return_value = state - 1;                                                     C:\code\2008\Mnemosyne - 2008\camera.c
00349e   056d     DECF      0x6d,0x0,0x1                                                                                    
0034a0   6f71     MOVWF     0x71,0x1                                                                                        
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\camera.c
0034a2   d014     BRA       0x34cc         		else if(loop_count >= MAX_ACK_LOOP_COUNT) // have we waited too long?          C:\code\2008\Mnemosyne - 2008\camera.c
0034a4   0102     MOVLB     0x2                                                                                             
0034a6   0e0a     MOVLW     0xa                                                                                             
0034a8   5d6f     SUBWF     0x6f,0x0,0x1                                                                                    
0034aa   0e00     MOVLW     0x0                                                                                             
0034ac   5970     SUBWFB    0x70,0x0,0x1                                                                                    
0034ae   e30b     BNC       0x34c6                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           			// return with a value that signals an error happened                         C:\code\2008\Mnemosyne - 2008\camera.c
0034b0   0e80     MOVLW     0x80           			return_value = state + 128 - 1;                                               C:\code\2008\Mnemosyne - 2008\camera.c
0034b2   256d     ADDWF     0x6d,0x0,0x1                                                                                    
0034b4   6e00     MOVWF     0x0,0x0                                                                                         
0034b6   6a01     CLRF      0x1,0x0                                                                                         
0034b8   0e00     MOVLW     0x0                                                                                             
0034ba   2201     ADDWFC    0x1,0x1,0x0                                                                                     
0034bc   0600     DECF      0x0,0x1,0x0                                                                                     
0034be   5a01     SUBWFB    0x1,0x1,0x0                                                                                     
0034c0   c000     MOVFF     0x0,0x271                                                                                       
0034c2   f271                                                                                                               
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\camera.c
0034c4   d003     BRA       0x34cc         		else                                                                           C:\code\2008\Mnemosyne - 2008\camera.c
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           			// if we fall through to here it means that that we've sent a                 C:\code\2008\Mnemosyne - 2008\camera.c
                                           			// command to the camera, and we're still waiting to receive                  C:\code\2008\Mnemosyne - 2008\camera.c
                                           			// an ACK/NCK or time-out, so other than incrementing the loop                C:\code\2008\Mnemosyne - 2008\camera.c
                                           			// counter, we don't do anything and continue to wait...                      C:\code\2008\Mnemosyne - 2008\camera.c
0034c6   2b6f     INCF      0x6f,0x1,0x1   			loop_count++;                                                                 C:\code\2008\Mnemosyne - 2008\camera.c
0034c8   0e00     MOVLW     0x0                                                                                             
0034ca   2370     ADDWFC    0x70,0x1,0x1                                                                                    
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
0034cc   d109     BRA       0x36e0         	else                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           		// if debugging mode is on, send camera initialization information             C:\code\2008\Mnemosyne - 2008\camera.c
                                           		// to the terminal (the DEBUG() macro is defined in camera.h                   C:\code\2008\Mnemosyne - 2008\camera.c
                                           		DEBUG(("Camera: Initialization state = %u\r\n", (unsigned int)state));         C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           		// reset the ACK/NCK counters                                                  C:\code\2008\Mnemosyne - 2008\camera.c
0034ce   0102     MOVLB     0x2            		camera_acks = 0;                                                               C:\code\2008\Mnemosyne - 2008\camera.c
0034d0   6bdc     CLRF      0xdc,0x1                                                                                        
0034d2   6bdd     CLRF      0xdd,0x1                                                                                        
0034d4   6bde     CLRF      0xde,0x1       		camera_ncks = 0;                                                               C:\code\2008\Mnemosyne - 2008\camera.c
0034d6   6bdf     CLRF      0xdf,0x1                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
0034d8   0102     MOVLB     0x2            		switch(state)                                                                  C:\code\2008\Mnemosyne - 2008\camera.c
0034da   516d     MOVF      0x6d,0x0,0x1                                                                                    
0034dc   0a12     XORLW     0x12                                                                                            
0034de   e101     BNZ       0x34e2                                                                                          
0034e0   d0fc     BRA       0x36da                                                                                          
0034e2   0a03     XORLW     0x3                                                                                             
0034e4   e101     BNZ       0x34e8                                                                                          
0034e6   d0e2     BRA       0x36ac                                                                                          
0034e8   0a01     XORLW     0x1                                                                                             
0034ea   e101     BNZ       0x34ee                                                                                          
0034ec   d0d6     BRA       0x369a                                                                                          
0034ee   0a1f     XORLW     0x1f                                                                                            
0034f0   e101     BNZ       0x34f4                                                                                          
0034f2   d0c6     BRA       0x3680                                                                                          
0034f4   0a01     XORLW     0x1                                                                                             
0034f6   e101     BNZ       0x34fa                                                                                          
0034f8   d0b6     BRA       0x3666                                                                                          
0034fa   0a03     XORLW     0x3                                                                                             
0034fc   e101     BNZ       0x3500                                                                                          
0034fe   d0a6     BRA       0x364c                                                                                          
003500   0a01     XORLW     0x1                                                                                             
003502   e101     BNZ       0x3506                                                                                          
003504   d096     BRA       0x3632                                                                                          
003506   0a07     XORLW     0x7                                                                                             
003508   e101     BNZ       0x350c                                                                                          
00350a   d086     BRA       0x3618                                                                                          
00350c   0a01     XORLW     0x1                                                                                             
00350e   e101     BNZ       0x3512                                                                                          
003510   d078     BRA       0x3602                                                                                          
003512   0a03     XORLW     0x3                                                                                             
003514   e069     BZ        0x35e8                                                                                          
003516   0a01     XORLW     0x1                                                                                             
003518   e05a     BZ        0x35ce                                                                                          
00351a   0a0f     XORLW     0xf                                                                                             
00351c   e04b     BZ        0x35b4                                                                                          
00351e   0a01     XORLW     0x1                                                                                             
003520   e03c     BZ        0x359a                                                                                          
003522   0a03     XORLW     0x3                                                                                             
003524   e02d     BZ        0x3580                                                                                          
003526   0a01     XORLW     0x1                                                                                             
003528   e01e     BZ        0x3566                                                                                          
00352a   0a07     XORLW     0x7                                                                                             
00352c   e00f     BZ        0x354c                                                                                          
00352e   0a01     XORLW     0x1                                                                                             
003530   e009     BZ        0x3544                                                                                          
003532   0a03     XORLW     0x3                                                                                             
003534   e001     BZ        0x3538                                                                                          
003536   d0d4     BRA       0x36e0                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           			case STATE_ONE:                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// get the camera's attention                                                C:\code\2008\Mnemosyne - 2008\camera.c
003538   d913     RCALL     0x3760         				Camera_Idle();                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// next state                                                                C:\code\2008\Mnemosyne - 2008\camera.c
00353a   0102     MOVLB     0x2            				state = STATE_TWO;                                                           C:\code\2008\Mnemosyne - 2008\camera.c
00353c   0e02     MOVLW     0x2                                                                                             
00353e   6f6d     MOVWF     0x6d,0x1                                                                                        
                                           				// don't wait for an ACK before transitioning to the next state              C:\code\2008\Mnemosyne - 2008\camera.c
003540   6b6e     CLRF      0x6e,0x1       				wait_for_ack = 0;                                                            C:\code\2008\Mnemosyne - 2008\camera.c
003542   d0ce     BRA       0x36e0         				break;                                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           			case STATE_TWO:                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// next state                                                                C:\code\2008\Mnemosyne - 2008\camera.c
003544   0e03     MOVLW     0x3            				state = STATE_THREE;                                                         C:\code\2008\Mnemosyne - 2008\camera.c
003546   6f6d     MOVWF     0x6d,0x1                                                                                        
                                           				// don't wait for an ACK before transitioning to the next state              C:\code\2008\Mnemosyne - 2008\camera.c
003548   6b6e     CLRF      0x6e,0x1       				wait_for_ack = 0;                                                            C:\code\2008\Mnemosyne - 2008\camera.c
00354a   d0ca     BRA       0x36e0         				break;                                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           			case STATE_THREE:                                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// initialize the Common Control I register                                  C:\code\2008\Mnemosyne - 2008\camera.c
00354c   0e80     MOVLW     0x80           				Write_Camera_Module_Register(COMI_ADDRESS, COMI_DEFAULT);                    C:\code\2008\Mnemosyne - 2008\camera.c
00354e   6ee6     MOVWF     0xe6,0x0                                                                                        
003550   0e29     MOVLW     0x29                                                                                            
003552   6ee6     MOVWF     0xe6,0x0                                                                                        
003554   d970     RCALL     0x3836                                                                                          
003556   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003558   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           				// next state                                                                C:\code\2008\Mnemosyne - 2008\camera.c
00355a   0102     MOVLB     0x2            				state = STATE_FOUR;                                                          C:\code\2008\Mnemosyne - 2008\camera.c
00355c   0e04     MOVLW     0x4                                                                                             
00355e   6f6d     MOVWF     0x6d,0x1                                                                                        
                                           				// wait for an ACK before transitioning to the next state                    C:\code\2008\Mnemosyne - 2008\camera.c
003560   0e01     MOVLW     0x1            				wait_for_ack = 1;                                                            C:\code\2008\Mnemosyne - 2008\camera.c
003562   6f6e     MOVWF     0x6e,0x1                                                                                        
003564   d0bd     BRA       0x36e0         				break;                                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           			case STATE_FOUR:                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// initialize the Common Control B register                                  C:\code\2008\Mnemosyne - 2008\camera.c
003566   0e20     MOVLW     0x20           				Write_Camera_Module_Register(COMB_ADDRESS, COMB_DEFAULT);                    C:\code\2008\Mnemosyne - 2008\camera.c
003568   6ee6     MOVWF     0xe6,0x0                                                                                        
00356a   0e13     MOVLW     0x13                                                                                            
00356c   6ee6     MOVWF     0xe6,0x0                                                                                        
00356e   d963     RCALL     0x3836                                                                                          
003570   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003572   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           				// next state                                                                C:\code\2008\Mnemosyne - 2008\camera.c
003574   0102     MOVLB     0x2            				state = STATE_FIVE;                                                          C:\code\2008\Mnemosyne - 2008\camera.c
003576   0e05     MOVLW     0x5                                                                                             
003578   6f6d     MOVWF     0x6d,0x1                                                                                        
                                           				// wait for an ACK before transitioning to the next state                    C:\code\2008\Mnemosyne - 2008\camera.c
00357a   0e01     MOVLW     0x1            				wait_for_ack = 1;                                                            C:\code\2008\Mnemosyne - 2008\camera.c
00357c   6f6e     MOVWF     0x6e,0x1                                                                                        
00357e   d0b0     BRA       0x36e0         				break;                                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           			case STATE_FIVE:                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// initialize the Common Control J register to power-on state                C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// to disable the banding filter, which must be done before                  C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// setting the Frame Rate Adjust register 2 (EHSL)                           C:\code\2008\Mnemosyne - 2008\camera.c
003580   0e84     MOVLW     0x84           				Write_Camera_Module_Register(COMJ_ADDRESS, COMJ_DEFAULT);                    C:\code\2008\Mnemosyne - 2008\camera.c
003582   6ee6     MOVWF     0xe6,0x0                                                                                        
003584   0e2d     MOVLW     0x2d                                                                                            
003586   6ee6     MOVWF     0xe6,0x0                                                                                        
003588   d956     RCALL     0x3836                                                                                          
00358a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00358c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           				// next state                                                                C:\code\2008\Mnemosyne - 2008\camera.c
00358e   0102     MOVLB     0x2            				state = STATE_SIX;                                                           C:\code\2008\Mnemosyne - 2008\camera.c
003590   0e06     MOVLW     0x6                                                                                             
003592   6f6d     MOVWF     0x6d,0x1                                                                                        
                                           				// wait for an ACK before transitioning to the next state                    C:\code\2008\Mnemosyne - 2008\camera.c
003594   0e01     MOVLW     0x1            				wait_for_ack = 1;                                                            C:\code\2008\Mnemosyne - 2008\camera.c
003596   6f6e     MOVWF     0x6e,0x1                                                                                        
003598   d0a3     BRA       0x36e0         				break;                                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           			case STATE_SIX:                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// initialize the Frame Rate Adjust register 1                               C:\code\2008\Mnemosyne - 2008\camera.c
00359a   0e80     MOVLW     0x80           				Write_Camera_Module_Register(EHSH_ADDRESS, EHSH_DEFAULT);                    C:\code\2008\Mnemosyne - 2008\camera.c
00359c   6ee6     MOVWF     0xe6,0x0                                                                                        
00359e   0e2a     MOVLW     0x2a                                                                                            
0035a0   6ee6     MOVWF     0xe6,0x0                                                                                        
0035a2   d949     RCALL     0x3836                                                                                          
0035a4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0035a6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           				// next state                                                                C:\code\2008\Mnemosyne - 2008\camera.c
0035a8   0102     MOVLB     0x2            				state = STATE_SEVEN;                                                         C:\code\2008\Mnemosyne - 2008\camera.c
0035aa   0e07     MOVLW     0x7                                                                                             
0035ac   6f6d     MOVWF     0x6d,0x1                                                                                        
                                           				// wait for an ACK before transitioning to the next state                    C:\code\2008\Mnemosyne - 2008\camera.c
0035ae   0e01     MOVLW     0x1            				wait_for_ack = 1;                                                            C:\code\2008\Mnemosyne - 2008\camera.c
0035b0   6f6e     MOVWF     0x6e,0x1                                                                                        
0035b2   d096     BRA       0x36e0         				break;                                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           			case STATE_SEVEN:                                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// initialize the Frame Rate Adjust register 2                               C:\code\2008\Mnemosyne - 2008\camera.c
0035b4   0e20     MOVLW     0x20           				Write_Camera_Module_Register(EHSL_ADDRESS, EHSL_DEFAULT);                    C:\code\2008\Mnemosyne - 2008\camera.c
0035b6   6ee6     MOVWF     0xe6,0x0                                                                                        
0035b8   0e2b     MOVLW     0x2b                                                                                            
0035ba   6ee6     MOVWF     0xe6,0x0                                                                                        
0035bc   d93c     RCALL     0x3836                                                                                          
0035be   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0035c0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           				// next state                                                                C:\code\2008\Mnemosyne - 2008\camera.c
0035c2   0102     MOVLB     0x2            				state = STATE_EIGHT;                                                         C:\code\2008\Mnemosyne - 2008\camera.c
0035c4   0e08     MOVLW     0x8                                                                                             
0035c6   6f6d     MOVWF     0x6d,0x1                                                                                        
                                           				// wait for an ACK before transitioning to the next state                    C:\code\2008\Mnemosyne - 2008\camera.c
0035c8   0e01     MOVLW     0x1            				wait_for_ack = 1;                                                            C:\code\2008\Mnemosyne - 2008\camera.c
0035ca   6f6e     MOVWF     0x6e,0x1                                                                                        
0035cc   d089     BRA       0x36e0         				break;                                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           			case STATE_EIGHT:                                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// initialize the Common Control J register                                  C:\code\2008\Mnemosyne - 2008\camera.c
0035ce   0e84     MOVLW     0x84           				Write_Camera_Module_Register(COMJ_ADDRESS, COMJ_DEFAULT);                    C:\code\2008\Mnemosyne - 2008\camera.c
0035d0   6ee6     MOVWF     0xe6,0x0                                                                                        
0035d2   0e2d     MOVLW     0x2d                                                                                            
0035d4   6ee6     MOVWF     0xe6,0x0                                                                                        
0035d6   d92f     RCALL     0x3836                                                                                          
0035d8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0035da   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           				// next state                                                                C:\code\2008\Mnemosyne - 2008\camera.c
0035dc   0102     MOVLB     0x2            				state = STATE_NINE;                                                          C:\code\2008\Mnemosyne - 2008\camera.c
0035de   0e09     MOVLW     0x9                                                                                             
0035e0   6f6d     MOVWF     0x6d,0x1                                                                                        
                                           				// wait for an ACK before transitioning to the next state                    C:\code\2008\Mnemosyne - 2008\camera.c
0035e2   0e01     MOVLW     0x1            				wait_for_ack = 1;                                                            C:\code\2008\Mnemosyne - 2008\camera.c
0035e4   6f6e     MOVWF     0x6e,0x1                                                                                        
0035e6   d07c     BRA       0x36e0         				break;                                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           			case STATE_NINE:                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// initialize the Common Control A register                                  C:\code\2008\Mnemosyne - 2008\camera.c
0035e8   0e20     MOVLW     0x20           				Write_Camera_Module_Register(COMA_ADDRESS, COMA_DEFAULT);                    C:\code\2008\Mnemosyne - 2008\camera.c
0035ea   6ee6     MOVWF     0xe6,0x0                                                                                        
0035ec   0e12     MOVLW     0x12                                                                                            
0035ee   6ee6     MOVWF     0xe6,0x0                                                                                        
0035f0   d922     RCALL     0x3836                                                                                          
0035f2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0035f4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           				// next state                                                                C:\code\2008\Mnemosyne - 2008\camera.c
0035f6   0102     MOVLB     0x2            				state = STATE_TEN;                                                           C:\code\2008\Mnemosyne - 2008\camera.c
0035f8   0e0a     MOVLW     0xa                                                                                             
0035fa   6f6d     MOVWF     0x6d,0x1                                                                                        
                                           				// wait for an ACK before transitioning to the next state                    C:\code\2008\Mnemosyne - 2008\camera.c
0035fc   0e01     MOVLW     0x1            				wait_for_ack = 1;                                                            C:\code\2008\Mnemosyne - 2008\camera.c
0035fe   6f6e     MOVWF     0x6e,0x1                                                                                        
003600   d06f     BRA       0x36e0         				break;                                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           			case STATE_TEN:                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// initialize the Automatic Gain Control register                            C:\code\2008\Mnemosyne - 2008\camera.c
003602   6ae6     CLRF      0xe6,0x0       				Write_Camera_Module_Register(AGC_ADDRESS, AGC_DEFAULT);                      C:\code\2008\Mnemosyne - 2008\camera.c
003604   6ae6     CLRF      0xe6,0x0                                                                                        
003606   d917     RCALL     0x3836                                                                                          
003608   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00360a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           				// next state                                                                C:\code\2008\Mnemosyne - 2008\camera.c
00360c   0102     MOVLB     0x2            				state = STATE_ELEVEN;                                                        C:\code\2008\Mnemosyne - 2008\camera.c
00360e   0e0b     MOVLW     0xb                                                                                             
003610   6f6d     MOVWF     0x6d,0x1                                                                                        
                                           				// wait for an ACK before transitioning to the next state                    C:\code\2008\Mnemosyne - 2008\camera.c
003612   0e01     MOVLW     0x1            				wait_for_ack = 1;                                                            C:\code\2008\Mnemosyne - 2008\camera.c
003614   6f6e     MOVWF     0x6e,0x1                                                                                        
003616   d064     BRA       0x36e0         				break;                                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           			case STATE_ELEVEN:                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// initialize the Blue Gain Control register                                 C:\code\2008\Mnemosyne - 2008\camera.c
003618   0e80     MOVLW     0x80           				Write_Camera_Module_Register(BLU_ADDRESS, BLU_DEFAULT);                      C:\code\2008\Mnemosyne - 2008\camera.c
00361a   6ee6     MOVWF     0xe6,0x0                                                                                        
00361c   0e01     MOVLW     0x1                                                                                             
00361e   6ee6     MOVWF     0xe6,0x0                                                                                        
003620   d90a     RCALL     0x3836                                                                                          
003622   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003624   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           				// next state                                                                C:\code\2008\Mnemosyne - 2008\camera.c
003626   0102     MOVLB     0x2            				state = STATE_TWELVE;                                                        C:\code\2008\Mnemosyne - 2008\camera.c
003628   0e0c     MOVLW     0xc                                                                                             
00362a   6f6d     MOVWF     0x6d,0x1                                                                                        
                                           				// wait for an ACK before transitioning to the next state                    C:\code\2008\Mnemosyne - 2008\camera.c
00362c   0e01     MOVLW     0x1            				wait_for_ack = 1;                                                            C:\code\2008\Mnemosyne - 2008\camera.c
00362e   6f6e     MOVWF     0x6e,0x1                                                                                        
003630   d057     BRA       0x36e0         				break;                                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           			case STATE_TWELVE:                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// initialize the Red Gain Control register                                  C:\code\2008\Mnemosyne - 2008\camera.c
003632   0e80     MOVLW     0x80           				Write_Camera_Module_Register(RED_ADDRESS, RED_DEFAULT);                      C:\code\2008\Mnemosyne - 2008\camera.c
003634   6ee6     MOVWF     0xe6,0x0                                                                                        
003636   0e02     MOVLW     0x2                                                                                             
003638   6ee6     MOVWF     0xe6,0x0                                                                                        
00363a   d8fd     RCALL     0x3836                                                                                          
00363c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00363e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           				// next state                                                                C:\code\2008\Mnemosyne - 2008\camera.c
003640   0102     MOVLB     0x2            				state = STATE_THIRTEEN;                                                      C:\code\2008\Mnemosyne - 2008\camera.c
003642   0e0d     MOVLW     0xd                                                                                             
003644   6f6d     MOVWF     0x6d,0x1                                                                                        
                                           				// wait for an ACK before transitioning to the next state                    C:\code\2008\Mnemosyne - 2008\camera.c
003646   0e01     MOVLW     0x1            				wait_for_ack = 1;                                                            C:\code\2008\Mnemosyne - 2008\camera.c
003648   6f6e     MOVWF     0x6e,0x1                                                                                        
00364a   d04a     BRA       0x36e0         				break;                                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           			case STATE_THIRTEEN:                                                          C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// initialize the Saturation Control register                                C:\code\2008\Mnemosyne - 2008\camera.c
00364c   0e80     MOVLW     0x80           				Write_Camera_Module_Register(SAT_ADDRESS, SAT_DEFAULT);                      C:\code\2008\Mnemosyne - 2008\camera.c
00364e   6ee6     MOVWF     0xe6,0x0                                                                                        
003650   0e03     MOVLW     0x3                                                                                             
003652   6ee6     MOVWF     0xe6,0x0                                                                                        
003654   d8f0     RCALL     0x3836                                                                                          
003656   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003658   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           				// next state                                                                C:\code\2008\Mnemosyne - 2008\camera.c
00365a   0102     MOVLB     0x2            				state = STATE_FOURTEEN;                                                      C:\code\2008\Mnemosyne - 2008\camera.c
00365c   0e0e     MOVLW     0xe                                                                                             
00365e   6f6d     MOVWF     0x6d,0x1                                                                                        
                                           				// wait for an ACK before transitioning to the next state                    C:\code\2008\Mnemosyne - 2008\camera.c
003660   0e01     MOVLW     0x1            				wait_for_ack = 1;                                                            C:\code\2008\Mnemosyne - 2008\camera.c
003662   6f6e     MOVWF     0x6e,0x1                                                                                        
003664   d03d     BRA       0x36e0         				break;                                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           			case STATE_FOURTEEN:                                                          C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// initialize the Brightness Control register                                C:\code\2008\Mnemosyne - 2008\camera.c
003666   0e01     MOVLW     0x1            				Write_Camera_Module_Register(BRT_ADDRESS, BRT_DEFAULT);                      C:\code\2008\Mnemosyne - 2008\camera.c
003668   6ee6     MOVWF     0xe6,0x0                                                                                        
00366a   0e06     MOVLW     0x6                                                                                             
00366c   6ee6     MOVWF     0xe6,0x0                                                                                        
00366e   d8e3     RCALL     0x3836                                                                                          
003670   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003672   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           				// next state                                                                C:\code\2008\Mnemosyne - 2008\camera.c
003674   0102     MOVLB     0x2            				state = STATE_FIFTEEN;                                                       C:\code\2008\Mnemosyne - 2008\camera.c
003676   0e0f     MOVLW     0xf                                                                                             
003678   6f6d     MOVWF     0x6d,0x1                                                                                        
                                           				// wait for an ACK before transitioning to the next state                    C:\code\2008\Mnemosyne - 2008\camera.c
00367a   0e01     MOVLW     0x1            				wait_for_ack = 1;                                                            C:\code\2008\Mnemosyne - 2008\camera.c
00367c   6f6e     MOVWF     0x6e,0x1                                                                                        
00367e   d030     BRA       0x36e0         				break;                                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           			case STATE_FIFTEEN:                                                           C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// initialize the Automatic Exposure Control register                        C:\code\2008\Mnemosyne - 2008\camera.c
003680   0e01     MOVLW     0x1            				Write_Camera_Module_Register(AEC_ADDRESS, AEC_DEFAULT);                      C:\code\2008\Mnemosyne - 2008\camera.c
003682   6ee6     MOVWF     0xe6,0x0                                                                                        
003684   0e10     MOVLW     0x10                                                                                            
003686   6ee6     MOVWF     0xe6,0x0                                                                                        
003688   d8d6     RCALL     0x3836                                                                                          
00368a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00368c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           				// next state                                                                C:\code\2008\Mnemosyne - 2008\camera.c
00368e   0102     MOVLB     0x2            				state = STATE_SIXTEEN;                                                       C:\code\2008\Mnemosyne - 2008\camera.c
003690   0e10     MOVLW     0x10                                                                                            
003692   6f6d     MOVWF     0x6d,0x1                                                                                        
                                           				// wait for an ACK before transitioning to the next state                    C:\code\2008\Mnemosyne - 2008\camera.c
003694   0e01     MOVLW     0x1            				wait_for_ack = 1;                                                            C:\code\2008\Mnemosyne - 2008\camera.c
003696   6f6e     MOVWF     0x6e,0x1                                                                                        
003698   d023     BRA       0x36e0         				break;                                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                           			case STATE_SIXTEEN:                                                           C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// initialize the Noise Filter value                                         C:\code\2008\Mnemosyne - 2008\camera.c
00369a   6ae6     CLRF      0xe6,0x0       				Noise_Filter(NF_DEFAULT);                                                    C:\code\2008\Mnemosyne - 2008\camera.c
00369c   d88b     RCALL     0x37b4                                                                                          
00369e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           				// next state                                                                C:\code\2008\Mnemosyne - 2008\camera.c
0036a0   0102     MOVLB     0x2            				state = STATE_SEVENTEEN;                                                     C:\code\2008\Mnemosyne - 2008\camera.c
0036a2   0e11     MOVLW     0x11                                                                                            
0036a4   6f6d     MOVWF     0x6d,0x1                                                                                        
                                           				// wait for an ACK before transitioning to the next state                    C:\code\2008\Mnemosyne - 2008\camera.c
0036a6   0e01     MOVLW     0x1            				wait_for_ack = 1;                                                            C:\code\2008\Mnemosyne - 2008\camera.c
0036a8   6f6e     MOVWF     0x6e,0x1                                                                                        
0036aa   d01a     BRA       0x36e0         				break;                                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           			case STATE_SEVENTEEN:                                                         C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// send the TC or Track Color command                                        C:\code\2008\Mnemosyne - 2008\camera.c
0036bc   0e73     MOVLW     0x73           				Track_Color(R_MIN_DEFAULT, R_MAX_DEFAULT,                                    C:\code\2008\Mnemosyne - 2008\camera.c
0036be   6ee6     MOVWF     0xe6,0x0                                                                                        
0036c0   0e55     MOVLW     0x55                                                                                            
0036c2   6ee6     MOVWF     0xe6,0x0                                                                                        
0036b4   0e11     MOVLW     0x11           							G_MIN_DEFAULT, G_MAX_DEFAULT,                                             C:\code\2008\Mnemosyne - 2008\camera.c
0036b6   6ee6     MOVWF     0xe6,0x0                                                                                        
0036b8   0e0f     MOVLW     0xf                                                                                             
0036ba   6ee6     MOVWF     0xe6,0x0                                                                                        
0036ac   0e91     MOVLW     0x91           							B_MIN_DEFAULT, B_MAX_DEFAULT);                                            C:\code\2008\Mnemosyne - 2008\camera.c
0036ae   6ee6     MOVWF     0xe6,0x0                                                                                        
0036b0   0e64     MOVLW     0x64                                                                                            
0036b2   6ee6     MOVWF     0xe6,0x0                                                                                        
0036c4   d81b     RCALL     0x36fc                                                                                          
0036c6   6ef5     MOVWF     0xf5,0x0                                                                                        
0036c8   0e06     MOVLW     0x6                                                                                             
0036ca   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0036cc   50f5     MOVF      0xf5,0x0,0x0                                                                                    
                                           				// next state                                                                C:\code\2008\Mnemosyne - 2008\camera.c
0036ce   0102     MOVLB     0x2            				state = STATE_EIGHTEEN;                                                      C:\code\2008\Mnemosyne - 2008\camera.c
0036d0   0e12     MOVLW     0x12                                                                                            
0036d2   6f6d     MOVWF     0x6d,0x1                                                                                        
                                           				// wait for an ACK before transitioning to the next state                    C:\code\2008\Mnemosyne - 2008\camera.c
0036d4   0e01     MOVLW     0x1            				wait_for_ack = 1;                                                            C:\code\2008\Mnemosyne - 2008\camera.c
0036d6   6f6e     MOVWF     0x6e,0x1                                                                                        
0036d8   d003     BRA       0x36e0         				break;                                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           			case STATE_EIGHTEEN:                                                          C:\code\2008\Mnemosyne - 2008\camera.c
                                           				// signal that we're done                                                    C:\code\2008\Mnemosyne - 2008\camera.c
0036da   0e01     MOVLW     0x1            				return_value = 1;                                                            C:\code\2008\Mnemosyne - 2008\camera.c
0036dc   6f71     MOVWF     0x71,0x1                                                                                        
0036de   d000     BRA       0x36e0         				break;                                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           	// If we're returning from this function with a value greater                   C:\code\2008\Mnemosyne - 2008\camera.c
                                           	// than zero, it means that configuration is complete or we've                  C:\code\2008\Mnemosyne - 2008\camera.c
                                           	// generated an error. In either case we'll want to re-initialize               C:\code\2008\Mnemosyne - 2008\camera.c
                                           	// the state machine if this function is called again.                          C:\code\2008\Mnemosyne - 2008\camera.c
0036e0   5171     MOVF      0x71,0x0,0x1   	if(return_value > 0)                                                            C:\code\2008\Mnemosyne - 2008\camera.c
0036e2   0800     SUBLW     0x0                                                                                             
0036e4   e203     BC        0x36ec                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
0036e6   0102     MOVLB     0x2            		initialize_flag = 1;                                                           C:\code\2008\Mnemosyne - 2008\camera.c
0036e8   0e01     MOVLW     0x1                                                                                             
0036ea   6fe2     MOVWF     0xe2,0x1                                                                                        
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
0036ec   0102     MOVLB     0x2            	return(return_value);	                                                          C:\code\2008\Mnemosyne - 2008\camera.c
0036ee   5171     MOVF      0x71,0x0,0x1                                                                                    
0036f0   d000     BRA       0x36f2                                                                                          
0036f2   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
0036f4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0036f6   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0036f8   ffd9                                                                                                               
0036fa   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	FUNCTION:		Track_Color()                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PURPOSE:		Properly formats and sends a TC (Track Color) command                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					to the camera.		                                                           C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	CALLED FROM:	Initialize_Camera(), above.                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PARAMETERS:		Minimum and maximum intensity values for the red, green           C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					and blue (or YCrCb) channels.                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	COMMENTS:		Camera must be configured to accept binary commands,                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					not ASCII. See Raw_Mode() function.                                        C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					See CMUCam2_commands.pdf for details.                                      C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\camera.c
0036fc   cfd9     MOVFF     0xfd9,0xfe6    void Track_Color(unsigned char Rmin, unsigned char Rmax,                         C:\code\2008\Mnemosyne - 2008\camera.c
0036fe   ffe6                                                                                                               
003700   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003702   ffd9                                                                                                               
                                           				 unsigned char Gmin, unsigned char Gmax,                                     C:\code\2008\Mnemosyne - 2008\camera.c
                                           				 unsigned char Bmin, unsigned char Bmax)                                     C:\code\2008\Mnemosyne - 2008\camera.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
003704   0e54     MOVLW     0x54           	Write_Camera_Serial_Port('T');                                                  C:\code\2008\Mnemosyne - 2008\camera.c
003706   6ee6     MOVWF     0xe6,0x0                                                                                        
003708   d8bc     RCALL     0x3882                                                                                          
00370a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00370c   0e43     MOVLW     0x43           	Write_Camera_Serial_Port('C');                                                  C:\code\2008\Mnemosyne - 2008\camera.c
00370e   6ee6     MOVWF     0xe6,0x0                                                                                        
003710   d8b8     RCALL     0x3882                                                                                          
003712   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003714   0e06     MOVLW     0x6            	Write_Camera_Serial_Port(6);                                                    C:\code\2008\Mnemosyne - 2008\camera.c
003716   6ee6     MOVWF     0xe6,0x0                                                                                        
003718   d8b4     RCALL     0x3882                                                                                          
00371a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00371c   0efe     MOVLW     0xfe           	Write_Camera_Serial_Port(Rmin);                                                 C:\code\2008\Mnemosyne - 2008\camera.c
00371e   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003720   ffe6                                                                                                               
003722   d8af     RCALL     0x3882                                                                                          
003724   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003726   0efd     MOVLW     0xfd           	Write_Camera_Serial_Port(Rmax);                                                 C:\code\2008\Mnemosyne - 2008\camera.c
003728   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00372a   ffe6                                                                                                               
00372c   d8aa     RCALL     0x3882                                                                                          
00372e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003730   0efc     MOVLW     0xfc           	Write_Camera_Serial_Port(Gmin);                                                 C:\code\2008\Mnemosyne - 2008\camera.c
003732   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003734   ffe6                                                                                                               
003736   d8a5     RCALL     0x3882                                                                                          
003738   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00373a   0efb     MOVLW     0xfb           	Write_Camera_Serial_Port(Gmax);                                                 C:\code\2008\Mnemosyne - 2008\camera.c
00373c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00373e   ffe6                                                                                                               
003740   d8a0     RCALL     0x3882                                                                                          
003742   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003744   0efa     MOVLW     0xfa           	Write_Camera_Serial_Port(Bmin);                                                 C:\code\2008\Mnemosyne - 2008\camera.c
003746   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003748   ffe6                                                                                                               
00374a   d89b     RCALL     0x3882                                                                                          
00374c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00374e   0ef9     MOVLW     0xf9           	Write_Camera_Serial_Port(Bmax);                                                 C:\code\2008\Mnemosyne - 2008\camera.c
003750   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003752   ffe6                                                                                                               
003754   d896     RCALL     0x3882                                                                                          
003756   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003758   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
00375a   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00375c   ffd9                                                                                                               
00375e   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	FUNCTION:		Camera_Idle()                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PURPOSE:		If the camera is currently streaming data, this command              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					will stop the streaming and prepare it to receive commands.                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	CALLED FROM:	Initialize_Camera(), above.                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\camera.c
                                           void Camera_Idle(void)                                                           C:\code\2008\Mnemosyne - 2008\camera.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
003760   0e0d     MOVLW     0xd            	Write_Camera_Serial_Port('\r');                                                 C:\code\2008\Mnemosyne - 2008\camera.c
003762   6ee6     MOVWF     0xe6,0x0                                                                                        
003764   d88e     RCALL     0x3882                                                                                          
003766   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003768   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	FUNCTION:		Restart_Camera()                                                    C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PURPOSE:		This command will force a camera reinitialization		                  C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PARAMETERS:		none                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	RETURNS:		nothing                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\camera.c
                                           void Restart_Camera(void)                                                        C:\code\2008\Mnemosyne - 2008\camera.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
00376a   0102     MOVLB     0x2            	camera_initialized = 0;                                                         C:\code\2008\Mnemosyne - 2008\camera.c
00376c   6bd9     CLRF      0xd9,0x1                                                                                        
00376e   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	FUNCTION:		Get_Camera_State()                                                  C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PURPOSE:		                                                                     C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PARAMETERS:		none                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	RETURNS:		0: camera is initializing.                                           C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					1: camera is initialized and sending T (Tracking) packets.                 C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\camera.c
                                           unsigned char Get_Camera_State(void)                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
003770   0102     MOVLB     0x2            	return(camera_initialized);                                                     C:\code\2008\Mnemosyne - 2008\camera.c
003772   51d9     MOVF      0xd9,0x0,0x1                                                                                    
003774   d000     BRA       0x3776                                                                                          
003776   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	FUNCTION:		Raw_Mode()                                                          C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PURPOSE:		Properly formats and sends a camera RM (Raw Mode) command            C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					to the camera. 		                                                          C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	CALLED FROM:	Initialize_Camera(), above.                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PARAMETERS:		unsigned char                                                     C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	RETURNS:		nothing                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	COMMENTS:		This body of software assumes that raw serial communication         C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					mode five is invoked, meaning that camera input and output                 C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					is done in the raw binary format and that ACKs and NCKs                    C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					are not suppressed.                                                        C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					See CMUCam2_commands.pdf for details.                                      C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\camera.c
003778   cfd9     MOVFF     0xfd9,0xfe6    void Raw_Mode(unsigned char mode)                                                C:\code\2008\Mnemosyne - 2008\camera.c
00377a   ffe6                                                                                                               
00377c   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00377e   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
003780   0e52     MOVLW     0x52           	Write_Camera_Serial_Port('R');                                                  C:\code\2008\Mnemosyne - 2008\camera.c
003782   6ee6     MOVWF     0xe6,0x0                                                                                        
003784   d87e     RCALL     0x3882                                                                                          
003786   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003788   0e4d     MOVLW     0x4d           	Write_Camera_Serial_Port('M');                                                  C:\code\2008\Mnemosyne - 2008\camera.c
00378a   6ee6     MOVWF     0xe6,0x0                                                                                        
00378c   d87a     RCALL     0x3882                                                                                          
00378e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003790   0e20     MOVLW     0x20           	Write_Camera_Serial_Port(' ');                                                  C:\code\2008\Mnemosyne - 2008\camera.c
003792   6ee6     MOVWF     0xe6,0x0                                                                                        
003794   d876     RCALL     0x3882                                                                                          
003796   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003798   0efe     MOVLW     0xfe           	Write_Camera_Serial_Port(48 + mode);                                            C:\code\2008\Mnemosyne - 2008\camera.c
00379a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00379c   0f30     ADDLW     0x30                                                                                            
00379e   6ee6     MOVWF     0xe6,0x0                                                                                        
0037a0   d870     RCALL     0x3882                                                                                          
0037a2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0037a4   0e0d     MOVLW     0xd            	Write_Camera_Serial_Port('\r');                                                 C:\code\2008\Mnemosyne - 2008\camera.c
0037a6   6ee6     MOVWF     0xe6,0x0                                                                                        
0037a8   d86c     RCALL     0x3882                                                                                          
0037aa   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0037ac   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
0037ae   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0037b0   ffd9                                                                                                               
0037b2   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	FUNCTION:		Noise_Filter()                                                      C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PURPOSE:		Properly formats and sends a camera NF (Noise Filter)                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					command to the camera.                                                     C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	CALLED FROM:	Initialize_Camera(), above.                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PARAMETERS:		Noise filter threshold value.                                     C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	COMMENTS:		Camera must be configured to accept binary commands,                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					not ASCII. See Raw_Mode() function.                                        C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					See CMUCam2_commands.pdf for details.                                      C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\camera.c
0037b4   cfd9     MOVFF     0xfd9,0xfe6    void Noise_Filter(unsigned char threshold)                                       C:\code\2008\Mnemosyne - 2008\camera.c
0037b6   ffe6                                                                                                               
0037b8   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0037ba   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
0037bc   0e4e     MOVLW     0x4e           	Write_Camera_Serial_Port('N');                                                  C:\code\2008\Mnemosyne - 2008\camera.c
0037be   6ee6     MOVWF     0xe6,0x0                                                                                        
0037c0   d860     RCALL     0x3882                                                                                          
0037c2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0037c4   0e46     MOVLW     0x46           	Write_Camera_Serial_Port('F');                                                  C:\code\2008\Mnemosyne - 2008\camera.c
0037c6   6ee6     MOVWF     0xe6,0x0                                                                                        
0037c8   d85c     RCALL     0x3882                                                                                          
0037ca   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0037cc   0e01     MOVLW     0x1            	Write_Camera_Serial_Port(1);                                                    C:\code\2008\Mnemosyne - 2008\camera.c
0037ce   6ee6     MOVWF     0xe6,0x0                                                                                        
0037d0   d858     RCALL     0x3882                                                                                          
0037d2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0037d4   0efe     MOVLW     0xfe           	Write_Camera_Serial_Port(threshold);                                            C:\code\2008\Mnemosyne - 2008\camera.c
0037d6   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0037d8   ffe6                                                                                                               
0037da   d853     RCALL     0x3882                                                                                          
0037dc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0037de   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
0037e0   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0037e2   ffd9                                                                                                               
0037e4   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	FUNCTION:		Virtual_Window()                                                    C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PURPOSE:		Properly formats and sends a VW (Virtual Window) command             C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					to the camera.                                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PARAMETERS:		Four unsigned chars specifying two corners of the                 C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					virtual window.                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	COMMENTS:		Camera must be configured to accept binary commands,                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					not ASCII. See Raw_Mode() function.                                        C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					See CMUCam2_commands.pdf for details.                                      C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\camera.c
0037e6   cfd9     MOVFF     0xfd9,0xfe6    void Virtual_Window(unsigned char x, unsigned char y, unsigned char x2, unsigned char y2) C:\code\2008\Mnemosyne - 2008\camera.c
0037e8   ffe6                                                                                                               
0037ea   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0037ec   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
0037ee   0e56     MOVLW     0x56           	Write_Camera_Serial_Port('V');                                                  C:\code\2008\Mnemosyne - 2008\camera.c
0037f0   6ee6     MOVWF     0xe6,0x0                                                                                        
0037f2   d847     RCALL     0x3882                                                                                          
0037f4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0037f6   0e57     MOVLW     0x57           	Write_Camera_Serial_Port('W');                                                  C:\code\2008\Mnemosyne - 2008\camera.c
0037f8   6ee6     MOVWF     0xe6,0x0                                                                                        
0037fa   d843     RCALL     0x3882                                                                                          
0037fc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0037fe   0e04     MOVLW     0x4            	Write_Camera_Serial_Port(4);                                                    C:\code\2008\Mnemosyne - 2008\camera.c
003800   6ee6     MOVWF     0xe6,0x0                                                                                        
003802   d83f     RCALL     0x3882                                                                                          
003804   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003806   0efe     MOVLW     0xfe           	Write_Camera_Serial_Port(x);                                                    C:\code\2008\Mnemosyne - 2008\camera.c
003808   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00380a   ffe6                                                                                                               
00380c   d83a     RCALL     0x3882                                                                                          
00380e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003810   0efd     MOVLW     0xfd           	Write_Camera_Serial_Port(y);                                                    C:\code\2008\Mnemosyne - 2008\camera.c
003812   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003814   ffe6                                                                                                               
003816   d835     RCALL     0x3882                                                                                          
003818   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00381a   0efc     MOVLW     0xfc           	Write_Camera_Serial_Port(x2);                                                   C:\code\2008\Mnemosyne - 2008\camera.c
00381c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00381e   ffe6                                                                                                               
003820   d830     RCALL     0x3882                                                                                          
003822   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003824   0efb     MOVLW     0xfb           	Write_Camera_Serial_Port(y2);                                                   C:\code\2008\Mnemosyne - 2008\camera.c
003826   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003828   ffe6                                                                                                               
00382a   d82b     RCALL     0x3882                                                                                          
00382c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00382e   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
003830   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003832   ffd9                                                                                                               
003834   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	FUNCTION:		Write_Camera_Module_Register()                                      C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PURPOSE:		Properly formats and sends a CR (Camera Register) command            C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					to the camera.                                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	CALLED FROM:	Initialize_Camera(), above.                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PARAMETERS:		Camera register number and new register value.                    C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	COMMENTS:		Camera must be configured to accept binary commands,                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					not ASCII. See Raw_Mode() function.                                        C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					See CMUCam2_commands.pdf for details.                                      C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\camera.c
003836   cfd9     MOVFF     0xfd9,0xfe6    void Write_Camera_Module_Register(unsigned char reg, unsigned char value)        C:\code\2008\Mnemosyne - 2008\camera.c
003838   ffe6                                                                                                               
00383a   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00383c   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
00383e   0e43     MOVLW     0x43           	Write_Camera_Serial_Port('C');                                                  C:\code\2008\Mnemosyne - 2008\camera.c
003840   6ee6     MOVWF     0xe6,0x0                                                                                        
003842   d81f     RCALL     0x3882                                                                                          
003844   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003846   0e52     MOVLW     0x52           	Write_Camera_Serial_Port('R');                                                  C:\code\2008\Mnemosyne - 2008\camera.c
003848   6ee6     MOVWF     0xe6,0x0                                                                                        
00384a   d81b     RCALL     0x3882                                                                                          
00384c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00384e   0e02     MOVLW     0x2            	Write_Camera_Serial_Port(2);                                                    C:\code\2008\Mnemosyne - 2008\camera.c
003850   6ee6     MOVWF     0xe6,0x0                                                                                        
003852   d817     RCALL     0x3882                                                                                          
003854   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003856   0efe     MOVLW     0xfe           	Write_Camera_Serial_Port(reg);                                                  C:\code\2008\Mnemosyne - 2008\camera.c
003858   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00385a   ffe6                                                                                                               
00385c   d812     RCALL     0x3882                                                                                          
00385e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003860   0efd     MOVLW     0xfd           	Write_Camera_Serial_Port(value);                                                C:\code\2008\Mnemosyne - 2008\camera.c
003862   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003864   ffe6                                                                                                               
003866   d80d     RCALL     0x3882                                                                                          
003868   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00386a   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
00386c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00386e   ffd9                                                                                                               
003870   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	FUNCTION:		Camera_Serial_Port_Byte_Count()                                     C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PURPOSE:		Returns the number of bytes in the camera serial port's              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					received data queue.		                                                     C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	RETURNS:		Number of bytes in the queue.                                        C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	COMMENTS:		This code assumes that the camera serial port has been              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					properly set in camera.h.		                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\camera.c
                                           unsigned char Camera_Serial_Port_Byte_Count(void)                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           #ifdef CAMERA_SERIAL_PORT_1                                                      C:\code\2008\Mnemosyne - 2008\camera.c
                                           	return(Serial_Port_One_Byte_Count());                                           C:\code\2008\Mnemosyne - 2008\camera.c
                                           #else                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
003872   ec7f     CALL      0x50fe,0x0     	return(Serial_Port_Two_Byte_Count());                                           C:\code\2008\Mnemosyne - 2008\camera.c
003874   f028                                                                                                               
003876   d000     BRA       0x3878                                                                                          
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\camera.c
003878   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	FUNCTION:		Read_Camera_Serial_Port()                                           C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PURPOSE:		Reads a byte of data from the camera serial port.		                  C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	RETURNS:		If data is present in the camera serial port's received              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					data queue, the next byte in the queue is returned. If                     C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					data is not present in the camera serial port's received                   C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					data queue, zero is returned.                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	COMMENTS:		Camera_Serial_Port_Byte_Count() should be called before             C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					calling this function to make sure data is present.                        C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					This code assumes that the camera serial port has been                     C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					properly set in camera.h.                                                  C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\camera.c
                                           unsigned char Read_Camera_Serial_Port(void)                                      C:\code\2008\Mnemosyne - 2008\camera.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           #ifdef CAMERA_SERIAL_PORT_1                                                      C:\code\2008\Mnemosyne - 2008\camera.c
                                           	return(Read_Serial_Port_One());                                                 C:\code\2008\Mnemosyne - 2008\camera.c
                                           #else                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
00387a   ecb5     CALL      0x516a,0x0     	return(Read_Serial_Port_Two());                                                 C:\code\2008\Mnemosyne - 2008\camera.c
00387c   f028                                                                                                               
00387e   d000     BRA       0x3880                                                                                          
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\camera.c
003880   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	FUNCTION:		Write_Camera_Serial_Port()                                          C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PURPOSE:		Sends a byte of data to the camera serial port.                      C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PARAMETERS:		Byte of data to send to the camera serial port.                   C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	RETURNS:		nothing                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	COMMENTS:		This code assumes that the camera serial port has been              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					properly set in camera.h.                                                  C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\camera.c
003882   cfd9     MOVFF     0xfd9,0xfe6    void Write_Camera_Serial_Port(unsigned char value)                               C:\code\2008\Mnemosyne - 2008\camera.c
003884   ffe6                                                                                                               
003886   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003888   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           #ifdef CAMERA_SERIAL_PORT_1                                                      C:\code\2008\Mnemosyne - 2008\camera.c
                                           	Write_Serial_Port_One(value);                                                   C:\code\2008\Mnemosyne - 2008\camera.c
                                           #else                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
00388a   0efe     MOVLW     0xfe           	Write_Serial_Port_Two(value);                                                   C:\code\2008\Mnemosyne - 2008\camera.c
00388c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00388e   ffe6                                                                                                               
003890   ecfc     CALL      0x51f8,0x0                                                                                      
003892   f028                                                                                                               
003894   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\camera.c
003896   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
003898   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00389a   ffd9                                                                                                               
00389c   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	FUNCTION:		Terminal_Serial_Port_Byte_Count()                                   C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PURPOSE:		Returns the number of bytes in the terminal serial port's            C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					received data queue.                                                       C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	RETURNS:		Number of bytes in the queue.                                        C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	COMMENTS:		This code assumes that the camera serial port has been              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					properly set in camera.h.                                                  C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\camera.c
                                           unsigned char Terminal_Serial_Port_Byte_Count(void)                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           #ifdef TERMINAL_SERIAL_PORT_1                                                    C:\code\2008\Mnemosyne - 2008\camera.c
00389e   ec6f     CALL      0x50de,0x0     	return(Serial_Port_One_Byte_Count());                                           C:\code\2008\Mnemosyne - 2008\camera.c
0038a0   f028                                                                                                               
0038a2   d000     BRA       0x38a4                                                                                          
                                           #else                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           	return(Serial_Port_Two_Byte_Count());                                           C:\code\2008\Mnemosyne - 2008\camera.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\camera.c
0038a4   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	FUNCTION:		Read_Terminal_Serial_Port()                                         C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PURPOSE:		Reads a byte of data from the terminal serial port.                  C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PARAMETERS:		none                                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	RETURNS:		If data is present in the terminal serial port's received            C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					data queue, the next byte in the queue is returned. If                     C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					data is not present in the terminal serial port's received                 C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					data queue, zero is returned.                                              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	COMMENTS:		Terminal_Serial_Port_Byte_Count() should be called before           C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					calling this function to make sure data is present.                        C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					This code assumes that the camera serial port has been                     C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					properly set in camera.h.                                                  C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\camera.c
                                           unsigned char Read_Terminal_Serial_Port(void)                                    C:\code\2008\Mnemosyne - 2008\camera.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           #ifdef TERMINAL_SERIAL_PORT_1                                                    C:\code\2008\Mnemosyne - 2008\camera.c
0038a6   ec8f     CALL      0x511e,0x0     	return(Read_Serial_Port_One());                                                 C:\code\2008\Mnemosyne - 2008\camera.c
0038a8   f028                                                                                                               
0038aa   d000     BRA       0x38ac                                                                                          
                                           #else                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           	return(Read_Serial_Port_Two());                                                 C:\code\2008\Mnemosyne - 2008\camera.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\camera.c
0038ac   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	FUNCTION:		Write_Terminal_Serial_Port()                                        C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PURPOSE:		Sends a byte of data to the terminal serial port.		                  C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	PARAMETERS:		Byte of data to send to the terminal serial port.                 C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *	COMMENTS:		This code assumes that the camera serial port has been              C:\code\2008\Mnemosyne - 2008\camera.c
                                           *					properly set in camera.h.                                                  C:\code\2008\Mnemosyne - 2008\camera.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\camera.c
0038ae   cfd9     MOVFF     0xfd9,0xfe6    void Write_Terminal_Serial_Port(unsigned char value)                             C:\code\2008\Mnemosyne - 2008\camera.c
0038b0   ffe6                                                                                                               
0038b2   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0038b4   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
                                           #ifdef TERMINAL_SERIAL_PORT_1                                                    C:\code\2008\Mnemosyne - 2008\camera.c
0038b6   0efe     MOVLW     0xfe           	Write_Serial_Port_One(value);                                                   C:\code\2008\Mnemosyne - 2008\camera.c
0038b8   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0038ba   ffe6                                                                                                               
0038bc   ecdb     CALL      0x51b6,0x0                                                                                      
0038be   f028                                                                                                               
0038c0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           #else                                                                            C:\code\2008\Mnemosyne - 2008\camera.c
                                           	Write_Serial_Port_Two(value);                                                   C:\code\2008\Mnemosyne - 2008\camera.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\camera.c
0038c2   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\camera.c
0038c4   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0038c6   ffd9                                                                                                               
0038c8   0012     RETURN    0x0                                                                                             
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	TITLE:		encoder.c                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	VERSION:	0.5 (Beta)                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	DATE:		17-Dec-2005                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	AUTHOR:		R. Kevin Watson                                                       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *				kevinw@jpl.nasa.gov                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:	You are free to use this source code for any non-commercial          C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *				use. Please do not make copies of this source code, modified                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *				or un-modified, publicly available on the internet or                       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *				elsewhere without permission. Thanks.                                       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *				Copyright ©2003-2006 R. Kevin Watson. All rights are reserved.              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           ******************************************************************************** C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CHANGE LOG:                                                                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	DATE         REV  DESCRIPTION                                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	-----------  ---  ----------------------------------------------------------   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	20-Dec-2003  0.1  RKW - Original code.                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	18-Feb-2004  0.2  RKW - Reassigned the encoder digital inputs to run           C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	                  on the FRC robot controller too.                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	01-Jan-2005  0.3  RKW - Get_Left_Encoder_Count(), Get_Right_Encoder_Count(),   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	                  Set_Left_Encoder_Count() and Set_Right_Encoder_Count()       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	                  functions added.                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	01-Jan-2005  0.3  RKW - Renamed Int_1_Handler() and Int_2_Handler() to         C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	                  Left_Encoder_Int_Handler() and Right_Encoder_Int_Handler     C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	                  respectively.                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	01-Jan-2005  0.3  RKW - Altered the interrupt service routines to easily       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	                  flip the direction the encoders count by altering the        C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	                  RIGHT_ENCODER_TICK_DELTA and LEFT_ENCODER_TICK_DELTA         C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	                  #defines found in encoder.h                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	06-Jan-2005  0.4  RKW - Rebuilt with C18 version 2.40.                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	17-Dec-2005  0.5  RKW - Added code to accommodate four more encoders on        C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	                  interrupts 3 through 6. These additional encoder inputs      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	                  are optimized for position control.                          C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #include <stdio.h>                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #include "ifi_default.h"                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #include "ifi_aliases.h"                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #include "encoder.h"                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           // These variables are used to keep track of the encoder position over time.     C:\code\2008\Mnemosyne - 2008\encoder.c
                                           // Though these are global variables, they shouldn't be modified directly.       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           // Functions to modify these variables are included below.                       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #ifdef ENABLE_ENCODER_1                                                          C:\code\2008\Mnemosyne - 2008\encoder.c
                                           volatile long Encoder_1_Count = 0;                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #ifdef ENABLE_ENCODER_2                                                          C:\code\2008\Mnemosyne - 2008\encoder.c
                                           volatile long Encoder_2_Count = 0;                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #ifdef ENABLE_ENCODER_3                                                          C:\code\2008\Mnemosyne - 2008\encoder.c
                                           unsigned char Encoder_3_State;                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           volatile long Encoder_3_Count = 0;                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #ifdef ENABLE_ENCODER_4                                                          C:\code\2008\Mnemosyne - 2008\encoder.c
                                           unsigned char Encoder_4_State;                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           volatile long Encoder_4_Count = 0;                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #ifdef ENABLE_ENCODER_5                                                          C:\code\2008\Mnemosyne - 2008\encoder.c
                                           unsigned char Encoder_5_State;                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           volatile long Encoder_5_Count = 0;                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #ifdef ENABLE_ENCODER_6                                                          C:\code\2008\Mnemosyne - 2008\encoder.c
                                           unsigned char Encoder_6_State;                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           volatile long Encoder_6_Count = 0;                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           // So that we'll know which interrupt pin changed state the next time through,   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           // the state of port b is saved in this variable each time the interrupt         C:\code\2008\Mnemosyne - 2008\encoder.c
                                           // handler for interrupts 3 through 6 is called. This variable should be         C:\code\2008\Mnemosyne - 2008\encoder.c
                                           // initialized to the current state of port b just before enabling interrupts    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           // 3 through 6.                                                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           unsigned char Old_Port_B = 0xFF;                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	FUNCTION:		Initialize_Encoders()                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PURPOSE:		Initializes the encoder software.                                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CALLED FROM:	user_routines.c/User_Initialization()                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
                                           void Initialize_Encoders(void)                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// if enabled in encoder.h, configure encoder 1's interrupt input               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	#ifdef ENABLE_ENCODER_1                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// make sure interrupt 1 is configured as an input                              C:\code\2008\Mnemosyne - 2008\encoder.c
005b6e   8493     BSF       0x93,0x2,0x0   	TRISBbits.TRISB2 = 1;                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// interrupt 1 is low priority                                                  C:\code\2008\Mnemosyne - 2008\encoder.c
005b70   9ef0     BCF       0xf0,0x7,0x0   	INTCON3bits.INT2IP = 0;                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// trigger on rising edge                                                       C:\code\2008\Mnemosyne - 2008\encoder.c
005b72   88f1     BSF       0xf1,0x4,0x0   	INTCON2bits.INTEDG2 = 1;                                                        C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// make sure the interrupt flag is reset before enabling                        C:\code\2008\Mnemosyne - 2008\encoder.c
005b74   92f0     BCF       0xf0,0x1,0x0   	INTCON3bits.INT2IF = 0;                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// enable interrupt 1                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
005b76   88f0     BSF       0xf0,0x4,0x0   	INTCON3bits.INT2IE = 1;                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	#endif                                                                          C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// if enabled in encoder.h, configure encoder 2's interrupt input               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	#ifdef ENABLE_ENCODER_2                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// make sure interrupt 2 is configured as an input                              C:\code\2008\Mnemosyne - 2008\encoder.c
005b78   8693     BSF       0x93,0x3,0x0   	TRISBbits.TRISB3 = 1;                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// interrupt 2 is low priority                                                  C:\code\2008\Mnemosyne - 2008\encoder.c
005b7a   92f1     BCF       0xf1,0x1,0x0   	INTCON2bits.INT3IP = 0;                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// trigger on rising edge                                                       C:\code\2008\Mnemosyne - 2008\encoder.c
005b7c   86f1     BSF       0xf1,0x3,0x0   	INTCON2bits.INTEDG3 = 1;                                                        C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// make sure the interrupt flag is reset before enabling                        C:\code\2008\Mnemosyne - 2008\encoder.c
005b7e   94f0     BCF       0xf0,0x2,0x0   	INTCON3bits.INT3IF = 0;                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// enable interrupt 2                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
005b80   8af0     BSF       0xf0,0x5,0x0   	INTCON3bits.INT3IE = 1;                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	#endif                                                                          C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// if enabled in encoder.h, configure the interrupt input for encoders 3-6      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	#ifdef ENABLE_ENCODER_3_6                                                       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// make sure interrupts 3 through 6 are configured as inputs                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	TRISBbits.TRISB4 = 1;                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	TRISBbits.TRISB5 = 1;                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	TRISBbits.TRISB6 = 1;                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	TRISBbits.TRISB7 = 1;                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// interrupts 3 through 6 are low priority                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                             	INTCON2bits.RBIP = 0;                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// before enabling interrupts 3 through 6, take a snapshot of port b            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	Old_Port_B = PORTB;                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// make sure the interrupt flag is reset before enabling                        C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	INTCONbits.RBIF = 0;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// enable interrupts 3 through 6                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	INTCONbits.RBIE = 1;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	#endif                                                                          C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
005b82   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #ifdef ENABLE_ENCODER_1                                                          C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	FUNCTION:		Get_Encoder_1_Count()                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PURPOSE:		Gets the current number of encoder 1 counts.		                       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	RETURNS:		Number of encoder 1 counts since the last reset.                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
005b84   cfd9     MOVFF     0xfd9,0xfe6    long Get_Encoder_1_Count(void)                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
005b86   ffe6                                                                                                               
005b88   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
005b8a   ffd9                                                                                                               
005b8c   0e04     MOVLW     0x4                                                                                             
005b8e   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	long count;                                                                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Since we're about to access the Encoder_1_Count variable,                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that the Encoder_1_Count variable doesn't get altered while                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we're using it.                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
005b90   98f0     BCF       0xf0,0x4,0x0   	INTCON3bits.INT2IE = 0;                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Now we can get a local copy of the encoder count without fear                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that we'll get corrupted data.                                               C:\code\2008\Mnemosyne - 2008\encoder.c
005b92   c1f7     MOVFF     0x1f7,0xfdf    	count = Encoder_1_Count;                                                        C:\code\2008\Mnemosyne - 2008\encoder.c
005b94   ffdf                                                                                                               
005b96   0e01     MOVLW     0x1                                                                                             
005b98   c1f8     MOVFF     0x1f8,0xfdb                                                                                     
005b9a   ffdb                                                                                                               
005b9c   0e02     MOVLW     0x2                                                                                             
005b9e   c1f9     MOVFF     0x1f9,0xfdb                                                                                     
005ba0   ffdb                                                                                                               
005ba2   0e03     MOVLW     0x3                                                                                             
005ba4   c1fa     MOVFF     0x1fa,0xfdb                                                                                     
005ba6   ffdb                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Okay, we have a local copy of the encoder count, so turn the                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// encoder's interrupt back on.                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
005ba8   88f0     BSF       0xf0,0x4,0x0   	INTCON3bits.INT2IE = 1;                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Return the encoder count to the caller.                                      C:\code\2008\Mnemosyne - 2008\encoder.c
005baa   cfde     MOVFF     0xfde,0x3f     	return(count);                                                                  C:\code\2008\Mnemosyne - 2008\encoder.c
005bac   f03f                                                                                                               
005bae   cfde     MOVFF     0xfde,0x40                                                                                      
005bb0   f040                                                                                                               
005bb2   cfde     MOVFF     0xfde,0x41                                                                                      
005bb4   f041                                                                                                               
005bb6   cfdd     MOVFF     0xfdd,0x42                                                                                      
005bb8   f042                                                                                                               
005bba   52dd     MOVF      0xdd,0x1,0x0                                                                                    
005bbc   52dd     MOVF      0xdd,0x1,0x0                                                                                    
005bbe   d000     BRA       0x5bc0                                                                                          
005bc0   cfd9     MOVFF     0xfd9,0xfe1    }                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
005bc2   ffe1                                                                                                               
005bc4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
005bc6   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
005bc8   ffd9                                                                                                               
005bca   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	FUNCTION:		Reset_Encoder_1_Count()                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PURPOSE:		Resets the encoder 1 count to zero	                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
                                           void Reset_Encoder_1_Count(void)                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Since we're about to access the Encoder_1_Count variable,                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that the Encoder_1_Count variable doesn't get altered while                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we're using it.                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
005bcc   98f0     BCF       0xf0,0x4,0x0   	INTCON3bits.INT2IE = 0;                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Now we can set the value of the encoder count without fear                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that we'll write corrupted data.                                             C:\code\2008\Mnemosyne - 2008\encoder.c
005bce   0101     MOVLB     0x1            	Encoder_1_Count = 0;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
005bd0   6bf7     CLRF      0xf7,0x1                                                                                        
005bd2   6bf8     CLRF      0xf8,0x1                                                                                        
005bd4   6bf9     CLRF      0xf9,0x1                                                                                        
005bd6   6bfa     CLRF      0xfa,0x1                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Okay, we're done updating the encoder count, so turn the                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// left encoder's interrupt back on.                                            C:\code\2008\Mnemosyne - 2008\encoder.c
005bd8   88f0     BSF       0xf0,0x4,0x0   	INTCON3bits.INT2IE = 1;                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
005bda   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	FUNCTION:		Encoder_1_Int_Handler()                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PURPOSE:		If enabled, the encoder 1 interrupt handler is called when           C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *					the interrupt 1 pin changes from a logic 0 to a logic 1.                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CALLED FROM:	user_routines_fast.c/InterruptHandlerLow()                        C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
                                           void Encoder_1_Int_Handler(void)                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Encoder 1's phase a signal just transitioned from zero to one, causing       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// this interrupt service routine to be called. We know that the encoder        C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// just rotated one count or "tick" so now check the logical state of the       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// phase b signal to determine which way the the encoder shaft rotated.         C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
005bdc   b288     BTFSC     0x88,0x1,0x0   	if(ENCODER_1_PHASE_B_PIN == 0)                                                  C:\code\2008\Mnemosyne - 2008\encoder.c
005bde   d007     BRA       0x5bee                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
005be0   0eff     MOVLW     0xff           		Encoder_1_Count -= ENCODER_1_TICK_DELTA;                                       C:\code\2008\Mnemosyne - 2008\encoder.c
005be2   0101     MOVLB     0x1                                                                                             
005be4   5ff7     SUBWF     0xf7,0x1,0x1                                                                                    
005be6   5bf8     SUBWFB    0xf8,0x1,0x1                                                                                    
005be8   5bf9     SUBWFB    0xf9,0x1,0x1                                                                                    
005bea   5bfa     SUBWFB    0xfa,0x1,0x1                                                                                    
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
005bec   d006     BRA       0x5bfa         	else                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
005bee   0eff     MOVLW     0xff           		Encoder_1_Count += ENCODER_1_TICK_DELTA;                                       C:\code\2008\Mnemosyne - 2008\encoder.c
005bf0   0101     MOVLB     0x1                                                                                             
005bf2   27f7     ADDWF     0xf7,0x1,0x1                                                                                    
005bf4   23f8     ADDWFC    0xf8,0x1,0x1                                                                                    
005bf6   23f9     ADDWFC    0xf9,0x1,0x1                                                                                    
005bf8   23fa     ADDWFC    0xfa,0x1,0x1                                                                                    
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
005bfa   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #ifdef ENABLE_ENCODER_2                                                          C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	FUNCTION:		Get_Encoder_2_Count()                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PURPOSE:		Gets the current number of encoder 2 counts.		                       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	RETURNS:		Number of encoder 2 counts since the last reset.                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
005bfc   cfd9     MOVFF     0xfd9,0xfe6    long Get_Encoder_2_Count(void)                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
005bfe   ffe6                                                                                                               
005c00   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
005c02   ffd9                                                                                                               
005c04   0e04     MOVLW     0x4                                                                                             
005c06   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	long count;                                                                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Since we're about to access the Encoder_2_Count variable,                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that the Encoder_2_Count variable doesn't get altered while                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we're using it.                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
005c08   9af0     BCF       0xf0,0x5,0x0   	INTCON3bits.INT3IE = 0;                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Now we can get a local copy of the encoder count without fear                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that we'll get corrupted data.                                               C:\code\2008\Mnemosyne - 2008\encoder.c
005c0a   c1fb     MOVFF     0x1fb,0xfdf    	count = Encoder_2_Count;                                                        C:\code\2008\Mnemosyne - 2008\encoder.c
005c0c   ffdf                                                                                                               
005c0e   0e01     MOVLW     0x1                                                                                             
005c10   c1fc     MOVFF     0x1fc,0xfdb                                                                                     
005c12   ffdb                                                                                                               
005c14   0e02     MOVLW     0x2                                                                                             
005c16   c1fd     MOVFF     0x1fd,0xfdb                                                                                     
005c18   ffdb                                                                                                               
005c1a   0e03     MOVLW     0x3                                                                                             
005c1c   c1fe     MOVFF     0x1fe,0xfdb                                                                                     
005c1e   ffdb                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Okay, we have a local copy of the encoder count, so turn the                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// encoder's interrupt back on.                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
005c20   8af0     BSF       0xf0,0x5,0x0   	INTCON3bits.INT3IE = 1;                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Return the encoder count to the caller.                                      C:\code\2008\Mnemosyne - 2008\encoder.c
005c22   cfde     MOVFF     0xfde,0x3f     	return(count);                                                                  C:\code\2008\Mnemosyne - 2008\encoder.c
005c24   f03f                                                                                                               
005c26   cfde     MOVFF     0xfde,0x40                                                                                      
005c28   f040                                                                                                               
005c2a   cfde     MOVFF     0xfde,0x41                                                                                      
005c2c   f041                                                                                                               
005c2e   cfdd     MOVFF     0xfdd,0x42                                                                                      
005c30   f042                                                                                                               
005c32   52dd     MOVF      0xdd,0x1,0x0                                                                                    
005c34   52dd     MOVF      0xdd,0x1,0x0                                                                                    
005c36   d000     BRA       0x5c38                                                                                          
005c38   cfd9     MOVFF     0xfd9,0xfe1    }                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
005c3a   ffe1                                                                                                               
005c3c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
005c3e   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
005c40   ffd9                                                                                                               
005c42   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	FUNCTION:		Reset_Encoder_2_Count()                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PURPOSE:		Resets the encoder 2 count to zero	                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
                                           void Reset_Encoder_2_Count(void)                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Since we're about to access the Encoder_2_Count variable,                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that the Encoder_2_Count variable doesn't get altered while                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we're using it.                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
005c44   9af0     BCF       0xf0,0x5,0x0   	INTCON3bits.INT3IE = 0;                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Now we can set the value of the encoder count without fear                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that we'll write corrupted data.                                             C:\code\2008\Mnemosyne - 2008\encoder.c
005c46   0101     MOVLB     0x1            	Encoder_2_Count = 0;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
005c48   6bfb     CLRF      0xfb,0x1                                                                                        
005c4a   6bfc     CLRF      0xfc,0x1                                                                                        
005c4c   6bfd     CLRF      0xfd,0x1                                                                                        
005c4e   6bfe     CLRF      0xfe,0x1                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Okay, we're done updating the encoder count, so turn the                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// left encoder's interrupt back on.                                            C:\code\2008\Mnemosyne - 2008\encoder.c
005c50   8af0     BSF       0xf0,0x5,0x0   	INTCON3bits.INT3IE = 1;                                                         C:\code\2008\Mnemosyne - 2008\encoder.c
005c52   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	FUNCTION:		Encoder_2_Int_Handler()                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PURPOSE:		If enabled, the encoder 2 interrupt handler is called when           C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *					the interrupt 2 pin changes from a logic 0 to a logic 1.                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CALLED FROM:	user_routines_fast.c/InterruptHandlerLow()                        C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
                                           void Encoder_2_Int_Handler(void)                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Encoder 2's phase a signal just transitioned from zero to one, causing       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// this interrupt service routine to be called. We know that the encoder        C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// just rotated one count or "tick" so now check the logical state of the       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// phase b signal to determine which way the the encoder shaft rotated.         C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
005c54   b488     BTFSC     0x88,0x2,0x0   	if(ENCODER_2_PHASE_B_PIN == 0)                                                  C:\code\2008\Mnemosyne - 2008\encoder.c
005c56   d007     BRA       0x5c66                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
005c58   0101     MOVLB     0x1            		Encoder_2_Count -= ENCODER_2_TICK_DELTA;                                       C:\code\2008\Mnemosyne - 2008\encoder.c
005c5a   07fb     DECF      0xfb,0x1,0x1                                                                                    
005c5c   0e00     MOVLW     0x0                                                                                             
005c5e   5bfc     SUBWFB    0xfc,0x1,0x1                                                                                    
005c60   5bfd     SUBWFB    0xfd,0x1,0x1                                                                                    
005c62   5bfe     SUBWFB    0xfe,0x1,0x1                                                                                    
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
005c64   d006     BRA       0x5c72         	else                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
005c66   0101     MOVLB     0x1            		Encoder_2_Count += ENCODER_2_TICK_DELTA;                                       C:\code\2008\Mnemosyne - 2008\encoder.c
005c68   2bfb     INCF      0xfb,0x1,0x1                                                                                    
005c6a   0e00     MOVLW     0x0                                                                                             
005c6c   23fc     ADDWFC    0xfc,0x1,0x1                                                                                    
005c6e   23fd     ADDWFC    0xfd,0x1,0x1                                                                                    
005c70   23fe     ADDWFC    0xfe,0x1,0x1                                                                                    
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
005c72   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #ifdef ENABLE_ENCODER_3                                                          C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	FUNCTION:		Get_Encoder_3_Count()                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PURPOSE:		Gets the current number of encoder 3 counts.		                       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	RETURNS:		Number of encoder 3 counts since the last reset.                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
                                           long Get_Encoder_3_Count(void)                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	long count;                                                                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Since we're about to access the Encoder_3_Count variable,                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that the Encoder_3_Count variable doesn't get altered while                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we're using it.                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	INTCONbits.RBIE = 0;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Now we can get a local copy of the encoder count without fear                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that we'll get corrupted data.                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	count = Encoder_3_Count;                                                        C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Okay, we have a local copy of the encoder count, so turn the                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// encoder's interrupt back on.                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	INTCONbits.RBIE = 1;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Return the encoder count to the caller.                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	return(count);                                                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           }                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	FUNCTION:		Reset_Encoder_3_Count()                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PURPOSE:		Resets the encoder 3 count to zero	                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
                                           void Reset_Encoder_3_Count(void)                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Since we're about to access the Encoder_3_Count variable,                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that the Encoder_3_Count variable doesn't get altered while                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we're using it.                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	INTCONbits.RBIE = 0;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Now we can set the value of the encoder count without fear                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that we'll write corrupted data.                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	Encoder_3_Count = 0;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Okay, we're done updating the encoder count, so turn the                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// left encoder's interrupt back on.                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	INTCONbits.RBIE = 1;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           }                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	FUNCTION:		Encoder_3_Int_Handler()                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PURPOSE:		If enabled, the encoder 3 interrupt handler is called when           C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *					the interrupt 3 pin changes logic state                                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CALLED FROM:	user_routines_fast.c/InterruptHandlerLow()                        C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
                                           void Encoder_3_Int_Handler(unsigned char state)                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Encoder 3's phase a signal just changed logic level, causing this            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// interrupt service routine to be called.                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	if(state == 1)                                                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		// rising-edge interrupt                                                       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		if(ENCODER_3_PHASE_B_PIN == 0)                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			// backward                                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			if(Encoder_3_State == 1)                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           				Encoder_3_Count -= ENCODER_3_TICK_DELTA;                                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		else                                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			// forward                                                                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			if(Encoder_3_State == 0)                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           				Encoder_3_Count += ENCODER_3_TICK_DELTA;                                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	else                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		// falling-edge interrupt                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		//   phase b is zero if moving forward                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		//   phase b is one if moving backward                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		Encoder_3_State = ENCODER_3_PHASE_B_PIN;                                       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           }                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #ifdef ENABLE_ENCODER_4                                                          C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	FUNCTION:		Get_Encoder_4_Count()                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PURPOSE:		Gets the current number of encoder 4 counts.		                       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	RETURNS:		Number of encoder 4 counts since the last reset.                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
                                           long Get_Encoder_4_Count(void)                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	long count;                                                                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Since we're about to access the Encoder_4_Count variable,                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that the Encoder_4_Count variable doesn't get altered while                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we're using it.                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	INTCONbits.RBIE = 0;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Now we can get a local copy of the encoder count without fear                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that we'll get corrupted data.                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	count = Encoder_4_Count;                                                        C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Okay, we have a local copy of the encoder count, so turn the                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// encoder's interrupt back on.                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	INTCONbits.RBIE = 1;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Return the encoder count to the caller.                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	return(count);                                                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           }                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	FUNCTION:		Reset_Encoder_4_Count()                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PURPOSE:		Resets the encoder 4 count to zero	                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
                                           void Reset_Encoder_4_Count(void)                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Since we're about to access the Encoder_4_Count variable,                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that the Encoder_4_Count variable doesn't get altered while                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we're using it.                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	INTCONbits.RBIE = 0;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Now we can set the value of the encoder count without fear                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that we'll write corrupted data.                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	Encoder_4_Count = 0;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Okay, we're done updating the encoder count, so turn the                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// left encoder's interrupt back on.                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	INTCONbits.RBIE = 1;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           }                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	FUNCTION:		Encoder_4_Int_Handler()                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PURPOSE:		If enabled, the encoder 4 interrupt handler is called when           C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *					the interrupt 4 pin changes logic state                                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CALLED FROM:	user_routines_fast.c/InterruptHandlerLow()                        C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
                                           void Encoder_4_Int_Handler(unsigned char state)                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Encoder 4's phase a signal just changed logic level, causing this            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// interrupt service routine to be called.                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	if(state == 1)                                                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		// rising-edge interrupt                                                       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		if(ENCODER_4_PHASE_B_PIN == 0)                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			// backward                                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			if(Encoder_4_State == 1)                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           				Encoder_4_Count -= ENCODER_4_TICK_DELTA;                                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		else                                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			// forward                                                                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			if(Encoder_4_State == 0)                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           				Encoder_4_Count += ENCODER_4_TICK_DELTA;                                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	else                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		// falling-edge interrupt                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		//   phase b is zero if moving forward                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		//   phase b is one if moving backward                                         C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		Encoder_4_State = ENCODER_4_PHASE_B_PIN;                                       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           }                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #ifdef ENABLE_ENCODER_5                                                          C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	FUNCTION:		Get_Encoder_5_Count()                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PURPOSE:		Gets the current number of encoder 5 counts.		                       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	RETURNS:		Number of encoder 5 counts since the last reset.                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
                                           long Get_Encoder_5_Count(void)                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	long count;                                                                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Since we're about to access the Encoder_5_Count variable,                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that the Encoder_5_Count variable doesn't get altered while                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we're using it.                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	INTCONbits.RBIE = 0;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Now we can get a local copy of the encoder count without fear                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that we'll get corrupted data.                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	count = Encoder_5_Count;                                                        C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Okay, we have a local copy of the encoder count, so turn the                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// encoder's interrupt back on.                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	INTCONbits.RBIE = 1;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Return the encoder count to the caller.                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	return(count);                                                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           }                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	FUNCTION:		Reset_Encoder_5_Count()                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PURPOSE:		Resets the encoder 5 count to zero	                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
                                           void Reset_Encoder_5_Count(void)                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Since we're about to access the Encoder_5_Count variable,                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that the Encoder_5_Count variable doesn't get altered while                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we're using it.                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	INTCONbits.RBIE = 0;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Now we can set the value of the encoder count without fear                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that we'll write corrupted data.                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	Encoder_5_Count = 0;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Okay, we're done updating the encoder count, so turn the                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// left encoder's interrupt back on.                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	INTCONbits.RBIE = 1;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           }                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	FUNCTION:		Encoder_5_Int_Handler()                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PURPOSE:		If enabled, the encoder 5 interrupt handler is called when           C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *					the interrupt 5 pin changes logic state                                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CALLED FROM:	user_routines_fast.c/InterruptHandlerLow()                        C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
                                           void Encoder_5_Int_Handler(unsigned char state)                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Encoder 5's phase a signal just changed logic level, causing this            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// interrupt service routine to be called.                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	if(state == 1)                                                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		// rising-edge interrupt                                                       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		if(ENCODER_5_PHASE_B_PIN == 0)                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			Encoder_5_Count -= ENCODER_5_TICK_DELTA;                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		else                                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			Encoder_5_Count += ENCODER_5_TICK_DELTA;                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	else                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		// falling-edge interrupt                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		if(ENCODER_5_PHASE_B_PIN == 0)                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			Encoder_5_Count += ENCODER_5_TICK_DELTA;                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		else                                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			Encoder_5_Count -= ENCODER_5_TICK_DELTA;                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           }                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #ifdef ENABLE_ENCODER_6                                                          C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	FUNCTION:		Get_Encoder_6_Count()                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PURPOSE:		Gets the current number of encoder 6 counts.		                       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	RETURNS:		Number of encoder 6 counts since the last reset.                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
                                           long Get_Encoder_6_Count(void)                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	long count;                                                                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Since we're about to access the Encoder_6_Count variable,                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that the Encoder_6_Count variable doesn't get altered while                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we're using it.                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	INTCONbits.RBIE = 0;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Now we can get a local copy of the encoder count without fear                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that we'll get corrupted data.                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	count = Encoder_6_Count;                                                        C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Okay, we have a local copy of the encoder count, so turn the                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// encoder's interrupt back on.                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	INTCONbits.RBIE = 1;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Return the encoder count to the caller.                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	return(count);                                                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           }                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	FUNCTION:		Reset_Encoder_6_Count()                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PURPOSE:		Resets the encoder 6 count to zero	                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
                                           void Reset_Encoder_6_Count(void)                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Since we're about to access the Encoder_6_Count variable,                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that the Encoder_6_Count variable doesn't get altered while                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// we're using it.                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	INTCONbits.RBIE = 0;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Now we can set the value of the encoder count without fear                   C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// that we'll write corrupted data.                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	Encoder_6_Count = 0;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Okay, we're done updating the encoder count, so turn the                     C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// left encoder's interrupt back on.                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	INTCONbits.RBIE = 1;                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           }                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	FUNCTION:		Encoder_6_Int_Handler()                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PURPOSE:		If enabled, the encoder 6 interrupt handler is called when           C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *					the interrupt 6 pin changes logic state                                    C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	CALLED FROM:	user_routines_fast.c/InterruptHandlerLow()                        C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\encoder.c
                                           void Encoder_6_Int_Handler(unsigned char state)                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// Encoder 6's phase a signal just changed logic level, causing this            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	// interrupt service routine to be called.                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	if(state == 1)                                                                  C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		// rising-edge interrupt                                                       C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		if(ENCODER_6_PHASE_B_PIN == 0)                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			Encoder_6_Count -= ENCODER_6_TICK_DELTA;                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		else                                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			Encoder_6_Count += ENCODER_6_TICK_DELTA;                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	else                                                                            C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		// falling-edge interrupt                                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		if(ENCODER_6_PHASE_B_PIN == 0)                                                 C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			Encoder_6_Count += ENCODER_6_TICK_DELTA;                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		else                                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           			Encoder_6_Count -= ENCODER_6_TICK_DELTA;                                      C:\code\2008\Mnemosyne - 2008\encoder.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\encoder.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\encoder.c
                                           }                                                                                C:\code\2008\Mnemosyne - 2008\encoder.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\encoder.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	TITLE		gyro.c                                                                  C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	VERSION:	0.5 (Beta)                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	DATE:		10-Jan-2006                                                             C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	AUTHOR:		R. Kevin Watson                                                       C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *				kevinw@jpl.nasa.gov                                                         C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	COMMENTS:	You are free to use this source code for any non-commercial          C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *				use. Please do not make copies of this source code, modified                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *				or un-modified, publicly available on the internet or                       C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *				elsewhere without permission. Thanks.                                       C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *				Copyright ©2005-2006 R. Kevin Watson. All rights are reserved.              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           ******************************************************************************** C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	CHANGE LOG:                                                                    C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	DATE         REV  DESCRIPTION                                                  C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	-----------  ---  ----------------------------------------------------------   C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	21-Nov-2004  0.1  RKW - Original code.                                         C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	12-Jan-2005  0.2  RKW - Altered Get_Gyro_Rate() and Get_Gyro_Angle() to use    C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	                  long integers for internal calculations, allowing larger     C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	                  numerators and denominators in the GYRO_RATE_SCALE_FACTOR    C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	                  and GYRO_ANGLE_SCALE_FACTOR #defines.                        C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	12-Jan-2005  0.2  RKW - GYRO_RATE_SCALE_FACTOR and GYRO_ANGLE_SCALE_FACTOR     C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	                  #defines added for Analog Devices' ADXRS401, ADXRS150 and    C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	                  ADXRS300 gyros.                                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	16-Jan-2005  0.3  RKW - Using preprocessor directives, added the ability       C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	                  to select the gyro type, angular units, sample rate and      C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	                  number of averaged samples per update.                       C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	21-Jan-2005  0.3  RKW - Added scaling factors for the BEI GyroChip.            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	30-Jan-2005  0.4  RKW - Revised the way bias calculations are done.            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	                  Instead of using only one data set as a bias, multiple       C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	                  sample sets can now be averaged over a much longer period    C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	                  of time to derive the gyro bias. Updated documentation.      C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	04-Sep-2005  0.5  RKW - Significant overhaul of gyro code to strip-out ADC-    C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	                  specific code and use new adc.c/.h interface. Added          C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	                  deadband option.                                             C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	21-Nov-2005  0.5  RKW - Added support for Murata's ENV-05D gyro.               C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	10-Jan-2006  0.5  RKW - Verified code works on PIC18F8722.                     C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\gyro.c
                                           #include "adc.h"                                                                 C:\code\2008\Mnemosyne - 2008\gyro.c
                                           #include "gyro.h"                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           #include "ifi_aliases.h"                                                         C:\code\2008\Mnemosyne - 2008\gyro.c
                                           #include "ifi_default.h"                                                         C:\code\2008\Mnemosyne - 2008\gyro.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           int gyro_bias;                                                                   C:\code\2008\Mnemosyne - 2008\gyro.c
                                           int gyro_rate;                                                                   C:\code\2008\Mnemosyne - 2008\gyro.c
                                           long gyro_angle;                                                                 C:\code\2008\Mnemosyne - 2008\gyro.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           unsigned long avg_accum;                                                         C:\code\2008\Mnemosyne - 2008\gyro.c
                                           unsigned int avg_samples;                                                        C:\code\2008\Mnemosyne - 2008\gyro.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           unsigned char calc_gyro_bias;                                                    C:\code\2008\Mnemosyne - 2008\gyro.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	FUNCTION:		Initialize_Gyro()                                                   C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	PURPOSE:		Initializes the gyro code.                                           C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	CALLED FROM:	user_routines.c/User_Initialization()                             C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	COMMENTS:		Place "#include "gyro.h" in the includes section                    C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *					of user_routines.c then call Initialize_Gyro() in                          C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *					user_routines.c/User_Initialization().                                     C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *					After calling Initialize_Gyro(), gyro rate and angle                       C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *					data will be meaningless until a gyro bias calculation                     C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *					has taken place by calling Start_Gyro_Bias_Calc() and                      C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *					Stop_Gyro_Bias_Calc().                                                     C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\gyro.c
                                           void Initialize_Gyro(void)                                                       C:\code\2008\Mnemosyne - 2008\gyro.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           	// reset the heading angle to zero                                              C:\code\2008\Mnemosyne - 2008\gyro.c
004d92   0102     MOVLB     0x2            	gyro_angle = 0;                                                                 C:\code\2008\Mnemosyne - 2008\gyro.c
004d94   6ba0     CLRF      0xa0,0x1                                                                                        
004d96   6ba1     CLRF      0xa1,0x1                                                                                        
004d98   6ba2     CLRF      0xa2,0x1                                                                                        
004d9a   6ba3     CLRF      0xa3,0x1                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           	// reset the bias calculation flag                                              C:\code\2008\Mnemosyne - 2008\gyro.c
004d9c   6baa     CLRF      0xaa,0x1       	calc_gyro_bias = 0;                                                             C:\code\2008\Mnemosyne - 2008\gyro.c
004d9e   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	FUNCTION:		Get_Gyro_Rate()                                                     C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	PURPOSE:		Returns the current heading angular rate of change.                  C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	RETURNS:		Signed integer with the current heading rate of change.              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\gyro.c
                                           int Get_Gyro_Rate(void)                                                          C:\code\2008\Mnemosyne - 2008\gyro.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           	// Return the calculated gyro rate to the caller.                               C:\code\2008\Mnemosyne - 2008\gyro.c
004da0   c29e     MOVFF     0x29e,0x3f     	return((int)((((long)gyro_rate * GYRO_SENSITIVITY * 5L) / ADC_RANGE)) * GYRO_CAL_FACTOR); C:\code\2008\Mnemosyne - 2008\gyro.c
004da2   f03f                                                                                                               
004da4   c29f     MOVFF     0x29f,0x40                                                                                      
004da6   f040                                                                                                               
004da8   6a41     CLRF      0x41,0x0                                                                                        
004daa   6a42     CLRF      0x42,0x0                                                                                        
004dac   ae40     BTFSS     0x40,0x7,0x0                                                                                    
004dae   d002     BRA       0x4db4                                                                                          
004db0   6841     SETF      0x41,0x0                                                                                        
004db2   6842     SETF      0x42,0x0                                                                                        
004db4   0e20     MOVLW     0x20                                                                                            
004db6   6e44     MOVWF     0x44,0x0                                                                                        
004db8   0e03     MOVLW     0x3                                                                                             
004dba   6e45     MOVWF     0x45,0x0                                                                                        
004dbc   6a46     CLRF      0x46,0x0                                                                                        
004dbe   6a47     CLRF      0x47,0x0                                                                                        
004dc0   ec15     CALL      0x5e2a,0x0                                                                                      
004dc2   f02f                                                                                                               
004dc4   c03b     MOVFF     0x3b,0x3f                                                                                       
004dc6   f03f                                                                                                               
004dc8   c03c     MOVFF     0x3c,0x40                                                                                       
004dca   f040                                                                                                               
004dcc   c03d     MOVFF     0x3d,0x41                                                                                       
004dce   f041                                                                                                               
004dd0   c03e     MOVFF     0x3e,0x42                                                                                       
004dd2   f042                                                                                                               
004dd4   0e05     MOVLW     0x5                                                                                             
004dd6   6e44     MOVWF     0x44,0x0                                                                                        
004dd8   6a45     CLRF      0x45,0x0                                                                                        
004dda   6a46     CLRF      0x46,0x0                                                                                        
004ddc   6a47     CLRF      0x47,0x0                                                                                        
004dde   ec15     CALL      0x5e2a,0x0                                                                                      
004de0   f02f                                                                                                               
004de2   c03b     MOVFF     0x3b,0x3f                                                                                       
004de4   f03f                                                                                                               
004de6   c03c     MOVFF     0x3c,0x40                                                                                       
004de8   f040                                                                                                               
004dea   c03d     MOVFF     0x3d,0x41                                                                                       
004dec   f041                                                                                                               
004dee   c03e     MOVFF     0x3e,0x42                                                                                       
004df0   f042                                                                                                               
004df2   6a44     CLRF      0x44,0x0                                                                                        
004df4   0e08     MOVLW     0x8                                                                                             
004df6   6e45     MOVWF     0x45,0x0                                                                                        
004df8   6a46     CLRF      0x46,0x0                                                                                        
004dfa   6a47     CLRF      0x47,0x0                                                                                        
004dfc   ecf2     CALL      0x43e4,0x0                                                                                      
004dfe   f021                                                                                                               
004e00   c03f     MOVFF     0x3f,0x0                                                                                        
004e02   f000                                                                                                               
004e04   c040     MOVFF     0x40,0x1                                                                                        
004e06   f001                                                                                                               
004e08   0ee8     MOVLW     0xe8                                                                                            
004e0a   0201     MULWF     0x1,0x0                                                                                         
004e0c   cff3     MOVFF     0xff3,0x1                                                                                       
004e0e   f001                                                                                                               
004e10   0e03     MOVLW     0x3                                                                                             
004e12   0200     MULWF     0x0,0x0                                                                                         
004e14   50f3     MOVF      0xf3,0x0,0x0                                                                                    
004e16   2601     ADDWF     0x1,0x1,0x0                                                                                     
004e18   0ee8     MOVLW     0xe8                                                                                            
004e1a   0200     MULWF     0x0,0x0                                                                                         
004e1c   cff3     MOVFF     0xff3,0x0                                                                                       
004e1e   f000                                                                                                               
004e20   50f4     MOVF      0xf4,0x0,0x0                                                                                    
004e22   2601     ADDWF     0x1,0x1,0x0                                                                                     
004e24   0ee8     MOVLW     0xe8                                                                                            
004e26   6e46     MOVWF     0x46,0x0                                                                                        
004e28   0e03     MOVLW     0x3                                                                                             
004e2a   6e47     MOVWF     0x47,0x0                                                                                        
004e2c   c000     MOVFF     0x0,0x41                                                                                        
004e2e   f041                                                                                                               
004e30   c001     MOVFF     0x1,0x42                                                                                        
004e32   f042                                                                                                               
004e34   eccc     CALL      0x4398,0x0                                                                                      
004e36   f021                                                                                                               
004e38   c041     MOVFF     0x41,0x0                                                                                        
004e3a   f000                                                                                                               
004e3c   c042     MOVFF     0x42,0x1                                                                                        
004e3e   f001                                                                                                               
004e40   c000     MOVFF     0x0,0xff3                                                                                       
004e42   fff3                                                                                                               
004e44   c001     MOVFF     0x1,0xff4                                                                                       
004e46   fff4                                                                                                               
004e48   d000     BRA       0x4e4a                                                                                          
004e4a   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	FUNCTION:		Get_Gyro_Angle()                                                    C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	PURPOSE:		Returns the current heading angle.                                   C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	RETURNS:		Signed long with the current heading angle.                          C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\gyro.c
004e4c   cfd9     MOVFF     0xfd9,0xfe6    long Get_Gyro_Angle(void)                                                        C:\code\2008\Mnemosyne - 2008\gyro.c
004e4e   ffe6                                                                                                               
004e50   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
004e52   ffd9                                                                                                               
004e54   0e04     MOVLW     0x4                                                                                             
004e56   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
004e58   c2a0     MOVFF     0x2a0,0x3f     	long angle = ((gyro_angle * GYRO_SENSITIVITY * 5L) / (ADC_RANGE * ADC_UPDATE_RATE)); C:\code\2008\Mnemosyne - 2008\gyro.c
004e5a   f03f                                                                                                               
004e5c   c2a1     MOVFF     0x2a1,0x40                                                                                      
004e5e   f040                                                                                                               
004e60   c2a2     MOVFF     0x2a2,0x41                                                                                      
004e62   f041                                                                                                               
004e64   c2a3     MOVFF     0x2a3,0x42                                                                                      
004e66   f042                                                                                                               
004e68   0e20     MOVLW     0x20                                                                                            
004e6a   6e44     MOVWF     0x44,0x0                                                                                        
004e6c   0e03     MOVLW     0x3                                                                                             
004e6e   6e45     MOVWF     0x45,0x0                                                                                        
004e70   6a46     CLRF      0x46,0x0                                                                                        
004e72   6a47     CLRF      0x47,0x0                                                                                        
004e74   ec15     CALL      0x5e2a,0x0                                                                                      
004e76   f02f                                                                                                               
004e78   c03b     MOVFF     0x3b,0x3f                                                                                       
004e7a   f03f                                                                                                               
004e7c   c03c     MOVFF     0x3c,0x40                                                                                       
004e7e   f040                                                                                                               
004e80   c03d     MOVFF     0x3d,0x41                                                                                       
004e82   f041                                                                                                               
004e84   c03e     MOVFF     0x3e,0x42                                                                                       
004e86   f042                                                                                                               
004e88   0e05     MOVLW     0x5                                                                                             
004e8a   6e44     MOVWF     0x44,0x0                                                                                        
004e8c   6a45     CLRF      0x45,0x0                                                                                        
004e8e   6a46     CLRF      0x46,0x0                                                                                        
004e90   6a47     CLRF      0x47,0x0                                                                                        
004e92   ec15     CALL      0x5e2a,0x0                                                                                      
004e94   f02f                                                                                                               
004e96   c03b     MOVFF     0x3b,0x3f                                                                                       
004e98   f03f                                                                                                               
004e9a   c03c     MOVFF     0x3c,0x40                                                                                       
004e9c   f040                                                                                                               
004e9e   c03d     MOVFF     0x3d,0x41                                                                                       
004ea0   f041                                                                                                               
004ea2   c03e     MOVFF     0x3e,0x42                                                                                       
004ea4   f042                                                                                                               
004ea6   6a44     CLRF      0x44,0x0                                                                                        
004ea8   0ec8     MOVLW     0xc8                                                                                            
004eaa   6e45     MOVWF     0x45,0x0                                                                                        
004eac   6a46     CLRF      0x46,0x0                                                                                        
004eae   6a47     CLRF      0x47,0x0                                                                                        
004eb0   ecf2     CALL      0x43e4,0x0                                                                                      
004eb2   f021                                                                                                               
004eb4   c03f     MOVFF     0x3f,0xfde                                                                                      
004eb6   ffde                                                                                                               
004eb8   c040     MOVFF     0x40,0xfde                                                                                      
004eba   ffde                                                                                                               
004ebc   c041     MOVFF     0x41,0xfde                                                                                      
004ebe   ffde                                                                                                               
004ec0   c042     MOVFF     0x42,0xfdd                                                                                      
004ec2   ffdd                                                                                                               
004ec4   52dd     MOVF      0xdd,0x1,0x0                                                                                    
004ec6   52dd     MOVF      0xdd,0x1,0x0                                                                                    
                                           	// Return the calculated gyro angle to the caller.                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
004ec8   cfd9     MOVFF     0xfd9,0xfe9    	return ((angle * 1000)/1000);                                                   C:\code\2008\Mnemosyne - 2008\gyro.c
004eca   ffe9                                                                                                               
004ecc   cfda     MOVFF     0xfda,0xfea                                                                                     
004ece   ffea                                                                                                               
004ed0   cfee     MOVFF     0xfee,0x3f                                                                                      
004ed2   f03f                                                                                                               
004ed4   cfee     MOVFF     0xfee,0x40                                                                                      
004ed6   f040                                                                                                               
004ed8   cfee     MOVFF     0xfee,0x41                                                                                      
004eda   f041                                                                                                               
004edc   cfef     MOVFF     0xfef,0x42                                                                                      
004ede   f042                                                                                                               
004ee0   0ee8     MOVLW     0xe8                                                                                            
004ee2   6e44     MOVWF     0x44,0x0                                                                                        
004ee4   0e03     MOVLW     0x3                                                                                             
004ee6   6e45     MOVWF     0x45,0x0                                                                                        
004ee8   6a46     CLRF      0x46,0x0                                                                                        
004eea   6a47     CLRF      0x47,0x0                                                                                        
004eec   ec15     CALL      0x5e2a,0x0                                                                                      
004eee   f02f                                                                                                               
004ef0   c03b     MOVFF     0x3b,0x3f                                                                                       
004ef2   f03f                                                                                                               
004ef4   c03c     MOVFF     0x3c,0x40                                                                                       
004ef6   f040                                                                                                               
004ef8   c03d     MOVFF     0x3d,0x41                                                                                       
004efa   f041                                                                                                               
004efc   c03e     MOVFF     0x3e,0x42                                                                                       
004efe   f042                                                                                                               
004f00   0ee8     MOVLW     0xe8                                                                                            
004f02   6e44     MOVWF     0x44,0x0                                                                                        
004f04   0e03     MOVLW     0x3                                                                                             
004f06   6e45     MOVWF     0x45,0x0                                                                                        
004f08   6a46     CLRF      0x46,0x0                                                                                        
004f0a   6a47     CLRF      0x47,0x0                                                                                        
004f0c   ecf2     CALL      0x43e4,0x0                                                                                      
004f0e   f021                                                                                                               
004f10   d000     BRA       0x4f12                                                                                          
                                                                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
004f12   cfd9     MOVFF     0xfd9,0xfe1    }                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
004f14   ffe1                                                                                                               
004f16   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004f18   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
004f1a   ffd9                                                                                                               
004f1c   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	FUNCTION:		Start_Gyro_Bias_Calc()                                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	PURPOSE:		Starts an ongoing gyro bias calculation.                             C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	COMMENTS:		IMPORTANT NOTE: Only call this function when your                   C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *					robot will be absolutely still and free of vibration                       C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *					(e.g., the air compressor is off) until the call to                        C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *					Stop_Gyro_Bias_Calc() is made.                                             C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\gyro.c
                                           void Start_Gyro_Bias_Calc(void)                                                  C:\code\2008\Mnemosyne - 2008\gyro.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
004f1e   0102     MOVLB     0x2            	if(calc_gyro_bias == 0)                                                         C:\code\2008\Mnemosyne - 2008\gyro.c
004f20   51aa     MOVF      0xaa,0x0,0x1                                                                                    
004f22   e108     BNZ       0x4f34                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\gyro.c
                                           		// reset the averaging accumulator                                             C:\code\2008\Mnemosyne - 2008\gyro.c
004f24   6ba4     CLRF      0xa4,0x1       		avg_accum = 0;                                                                 C:\code\2008\Mnemosyne - 2008\gyro.c
004f26   6ba5     CLRF      0xa5,0x1                                                                                        
004f28   6ba6     CLRF      0xa6,0x1                                                                                        
004f2a   6ba7     CLRF      0xa7,0x1                                                                                        
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           		// reset the number of number of average samples counters                      C:\code\2008\Mnemosyne - 2008\gyro.c
004f2c   6ba8     CLRF      0xa8,0x1       		avg_samples = 0;                                                               C:\code\2008\Mnemosyne - 2008\gyro.c
004f2e   6ba9     CLRF      0xa9,0x1                                                                                        
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           		// set flag informing the Process_Gyro_Data()                                  C:\code\2008\Mnemosyne - 2008\gyro.c
                                           		// function to start a gyro bias calculation                                   C:\code\2008\Mnemosyne - 2008\gyro.c
004f30   0e01     MOVLW     0x1            		calc_gyro_bias = 1;                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
004f32   6faa     MOVWF     0xaa,0x1                                                                                        
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\gyro.c
004f34   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	FUNCTION:		Stop_Gyro_Bias_Calc()                                               C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	PURPOSE:		Ends the current ongoing gyro bias calculation                       C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *					and updates the internal gyro_bias variable.                               C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\gyro.c
                                           void Stop_Gyro_Bias_Calc(void)                                                   C:\code\2008\Mnemosyne - 2008\gyro.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
004f36   0102     MOVLB     0x2            	if(calc_gyro_bias == 1)                                                         C:\code\2008\Mnemosyne - 2008\gyro.c
004f38   05aa     DECF      0xaa,0x0,0x1                                                                                    
004f3a   e11e     BNZ       0x4f78                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\gyro.c
                                           		// Update the gyro bias                                                        C:\code\2008\Mnemosyne - 2008\gyro.c
004f3c   c2a8     MOVFF     0x2a8,0x0      		gyro_bias = (int)(avg_accum / avg_samples);                                    C:\code\2008\Mnemosyne - 2008\gyro.c
004f3e   f000                                                                                                               
004f40   c2a9     MOVFF     0x2a9,0x1                                                                                       
004f42   f001                                                                                                               
004f44   6a02     CLRF      0x2,0x0                                                                                         
004f46   6a03     CLRF      0x3,0x0                                                                                         
004f48   c2a4     MOVFF     0x2a4,0x3f                                                                                      
004f4a   f03f                                                                                                               
004f4c   c2a5     MOVFF     0x2a5,0x40                                                                                      
004f4e   f040                                                                                                               
004f50   c2a6     MOVFF     0x2a6,0x41                                                                                      
004f52   f041                                                                                                               
004f54   c2a7     MOVFF     0x2a7,0x42                                                                                      
004f56   f042                                                                                                               
004f58   c000     MOVFF     0x0,0x44                                                                                        
004f5a   f044                                                                                                               
004f5c   c001     MOVFF     0x1,0x45                                                                                        
004f5e   f045                                                                                                               
004f60   c002     MOVFF     0x2,0x46                                                                                        
004f62   f046                                                                                                               
004f64   c003     MOVFF     0x3,0x47                                                                                        
004f66   f047                                                                                                               
004f68   ec19     CALL      0x6032,0x0                                                                                      
004f6a   f030                                                                                                               
004f6c   c03f     MOVFF     0x3f,0x29c                                                                                      
004f6e   f29c                                                                                                               
004f70   c040     MOVFF     0x40,0x29d                                                                                      
004f72   f29d                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           		// inform Process_Gyro_Data() function that                                    C:\code\2008\Mnemosyne - 2008\gyro.c
                                           		// the ongoing bias calculation needs to stop                                  C:\code\2008\Mnemosyne - 2008\gyro.c
004f74   0102     MOVLB     0x2            		calc_gyro_bias = 0;                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
004f76   6baa     CLRF      0xaa,0x1                                                                                        
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\gyro.c
004f78   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	FUNCTION:		Get_Gyro_Bias()                                                     C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	PURPOSE:		Returns the current gyro bias.		                                     C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	RETURNS:		Signed integer with the current gyro bias.                           C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\gyro.c
                                           int Get_Gyro_Bias(void)                                                          C:\code\2008\Mnemosyne - 2008\gyro.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           	// return the gyro bias to the caller                                           C:\code\2008\Mnemosyne - 2008\gyro.c
004f7a   c29c     MOVFF     0x29c,0xff3    	return(gyro_bias);                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
004f7c   fff3                                                                                                               
004f7e   c29d     MOVFF     0x29d,0xff4                                                                                     
004f80   fff4                                                                                                               
004f82   d000     BRA       0x4f84                                                                                          
004f84   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	FUNCTION:		Set_Gyro_Bias()                                                     C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	PURPOSE:		Manually sets the gyro bias.                                         C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\gyro.c
004f86   cfd9     MOVFF     0xfd9,0xfe6    void Set_Gyro_Bias(int new_gyro_bias)                                            C:\code\2008\Mnemosyne - 2008\gyro.c
004f88   ffe6                                                                                                               
004f8a   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
004f8c   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           	// update gyro_bias                                                             C:\code\2008\Mnemosyne - 2008\gyro.c
004f8e   0efd     MOVLW     0xfd           	gyro_bias = new_gyro_bias;                                                      C:\code\2008\Mnemosyne - 2008\gyro.c
004f90   cfdb     MOVFF     0xfdb,0x29c                                                                                     
004f92   f29c                                                                                                               
004f94   0efe     MOVLW     0xfe                                                                                            
004f96   cfdb     MOVFF     0xfdb,0x29d                                                                                     
004f98   f29d                                                                                                               
004f9a   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
004f9c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
004f9e   ffd9                                                                                                               
004fa0   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	FUNCTION:		Reset_Gyro_Angle()                                                  C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	PURPOSE:		Resets the heading angle to zero.                                    C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\gyro.c
                                           void Reset_Gyro_Angle(void)                                                      C:\code\2008\Mnemosyne - 2008\gyro.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           	// zero out gyro_angle                                                          C:\code\2008\Mnemosyne - 2008\gyro.c
004fa2   0102     MOVLB     0x2            	gyro_angle = 0L;                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
004fa4   6ba0     CLRF      0xa0,0x1                                                                                        
004fa6   6ba1     CLRF      0xa1,0x1                                                                                        
004fa8   6ba2     CLRF      0xa2,0x1                                                                                        
004faa   6ba3     CLRF      0xa3,0x1                                                                                        
004fac   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	FUNCTION:		Process_Gyro_Data()                                                 C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	PURPOSE:		Timer 2 interrupt service routine                                    C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	CALLED FROM:	user_routines_fast.c/InterruptHandlerLow()                        C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\gyro.c
004fae   cfd9     MOVFF     0xfd9,0xfe6    void Process_Gyro_Data(void)                                                     C:\code\2008\Mnemosyne - 2008\gyro.c
004fb0   ffe6                                                                                                               
004fb2   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
004fb4   ffd9                                                                                                               
004fb6   0e02     MOVLW     0x2                                                                                             
004fb8   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
                                           	int temp_gyro_rate;                                                             C:\code\2008\Mnemosyne - 2008\gyro.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           	// should the completed sample set be used to calculate the gyro bias?          C:\code\2008\Mnemosyne - 2008\gyro.c
004fba   0102     MOVLB     0x2            	if(calc_gyro_bias == 1)                                                         C:\code\2008\Mnemosyne - 2008\gyro.c
004fbc   05aa     DECF      0xaa,0x0,0x1                                                                                    
004fbe   e117     BNZ       0x4fee                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\gyro.c
                                           		// convert the accumulator to an integer and update gyro_bias                  C:\code\2008\Mnemosyne - 2008\gyro.c
004fc0   0e01     MOVLW     0x1            		avg_accum += Get_ADC_Result(GYRO_CHANNEL);                                     C:\code\2008\Mnemosyne - 2008\gyro.c
004fc2   6ee6     MOVWF     0xe6,0x0                                                                                        
004fc4   eca3     CALL      0x4746,0x0                                                                                      
004fc6   f023                                                                                                               
004fc8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004fca   cff3     MOVFF     0xff3,0x0                                                                                       
004fcc   f000                                                                                                               
004fce   cff4     MOVFF     0xff4,0x1                                                                                       
004fd0   f001                                                                                                               
004fd2   0100     MOVLB     0x0                                                                                             
004fd4   5000     MOVF      0x0,0x0,0x0                                                                                     
004fd6   0102     MOVLB     0x2                                                                                             
004fd8   27a4     ADDWF     0xa4,0x1,0x1                                                                                    
004fda   0100     MOVLB     0x0                                                                                             
004fdc   5001     MOVF      0x1,0x0,0x0                                                                                     
004fde   0102     MOVLB     0x2                                                                                             
004fe0   23a5     ADDWFC    0xa5,0x1,0x1                                                                                    
004fe2   0e00     MOVLW     0x0                                                                                             
004fe4   23a6     ADDWFC    0xa6,0x1,0x1                                                                                    
004fe6   23a7     ADDWFC    0xa7,0x1,0x1                                                                                    
004fe8   2ba8     INCF      0xa8,0x1,0x1   		avg_samples++;                                                                 C:\code\2008\Mnemosyne - 2008\gyro.c
004fea   23a9     ADDWFC    0xa9,0x1,0x1                                                                                    
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\gyro.c
004fec   d040     BRA       0x506e         	else                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\gyro.c
                                           		// get the latest measured gyro rate                                           C:\code\2008\Mnemosyne - 2008\gyro.c
004fee   0e01     MOVLW     0x1            		temp_gyro_rate = (int)Get_ADC_Result(GYRO_CHANNEL) - gyro_bias;                C:\code\2008\Mnemosyne - 2008\gyro.c
004ff0   6ee6     MOVWF     0xe6,0x0                                                                                        
004ff2   eca3     CALL      0x4746,0x0                                                                                      
004ff4   f023                                                                                                               
004ff6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004ff8   0102     MOVLB     0x2                                                                                             
004ffa   519c     MOVF      0x9c,0x0,0x1                                                                                    
004ffc   5cf3     SUBWF     0xf3,0x0,0x0                                                                                    
004ffe   6e00     MOVWF     0x0,0x0                                                                                         
005000   519d     MOVF      0x9d,0x0,0x1                                                                                    
005002   58f4     SUBWFB    0xf4,0x0,0x0                                                                                    
005004   6e01     MOVWF     0x1,0x0                                                                                         
005006   c000     MOVFF     0x0,0xfde                                                                                       
005008   ffde                                                                                                               
00500a   c001     MOVFF     0x1,0xfdd                                                                                       
00500c   ffdd                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           		// update reported gyro rate and angle only if                                 C:\code\2008\Mnemosyne - 2008\gyro.c
                                           		// measured gyro rate lies outside the deadband                                C:\code\2008\Mnemosyne - 2008\gyro.c
00500e   cfde     MOVFF     0xfde,0x0      		if(temp_gyro_rate < -GYRO_DEADBAND || temp_gyro_rate > GYRO_DEADBAND)          C:\code\2008\Mnemosyne - 2008\gyro.c
005010   f000                                                                                                               
005012   cfdd     MOVFF     0xfdd,0x1                                                                                       
005014   f001                                                                                                               
005016   80d8     BSF       0xd8,0x0,0x0                                                                                    
005018   5001     MOVF      0x1,0x0,0x0                                                                                     
00501a   e704     BNN       0x5024                                                                                          
00501c   0ef8     MOVLW     0xf8                                                                                            
00501e   5c00     SUBWF     0x0,0x0,0x0                                                                                     
005020   0eff     MOVLW     0xff                                                                                            
005022   5801     SUBWFB    0x1,0x0,0x0                                                                                     
005024   e30b     BNC       0x503c                                                                                          
005026   cfde     MOVFF     0xfde,0x2                                                                                       
005028   f002                                                                                                               
00502a   cfdd     MOVFF     0xfdd,0x3                                                                                       
00502c   f003                                                                                                               
00502e   3403     RLCF      0x3,0x0,0x0                                                                                     
005030   e204     BC        0x503a                                                                                          
005032   5002     MOVF      0x2,0x0,0x0                                                                                     
005034   0808     SUBLW     0x8                                                                                             
005036   0e00     MOVLW     0x0                                                                                             
005038   5403     SUBFWB    0x3,0x0,0x0                                                                                     
00503a   e217     BC        0x506a                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           			// update the gyro rate                                                       C:\code\2008\Mnemosyne - 2008\gyro.c
00503c   cfde     MOVFF     0xfde,0x29e    			gyro_rate = temp_gyro_rate;                                                   C:\code\2008\Mnemosyne - 2008\gyro.c
00503e   f29e                                                                                                               
005040   cfdd     MOVFF     0xfdd,0x29f                                                                                     
005042   f29f                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\gyro.c
                                           			// integrate the gyro rate to derive the heading                              C:\code\2008\Mnemosyne - 2008\gyro.c
005044   cfde     MOVFF     0xfde,0x0      			gyro_angle += (long)temp_gyro_rate;                                           C:\code\2008\Mnemosyne - 2008\gyro.c
005046   f000                                                                                                               
005048   cfdd     MOVFF     0xfdd,0x1                                                                                       
00504a   f001                                                                                                               
00504c   6a02     CLRF      0x2,0x0                                                                                         
00504e   6a03     CLRF      0x3,0x0                                                                                         
005050   ae01     BTFSS     0x1,0x7,0x0                                                                                     
005052   d002     BRA       0x5058                                                                                          
005054   6802     SETF      0x2,0x0                                                                                         
005056   6803     SETF      0x3,0x0                                                                                         
005058   5000     MOVF      0x0,0x0,0x0                                                                                     
00505a   27a0     ADDWF     0xa0,0x1,0x1                                                                                    
00505c   5001     MOVF      0x1,0x0,0x0                                                                                     
00505e   23a1     ADDWFC    0xa1,0x1,0x1                                                                                    
005060   5002     MOVF      0x2,0x0,0x0                                                                                     
005062   23a2     ADDWFC    0xa2,0x1,0x1                                                                                    
005064   5003     MOVF      0x3,0x0,0x0                                                                                     
005066   23a3     ADDWFC    0xa3,0x1,0x1                                                                                    
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
005068   d002     BRA       0x506e         		else                                                                           C:\code\2008\Mnemosyne - 2008\gyro.c
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
00506a   6b9e     CLRF      0x9e,0x1       			gyro_rate = 0;                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
00506c   6b9f     CLRF      0x9f,0x1                                                                                        
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
                                           	}	                                                                              C:\code\2008\Mnemosyne - 2008\gyro.c
00506e   cfd9     MOVFF     0xfd9,0xfe1    }                                                                                C:\code\2008\Mnemosyne - 2008\gyro.c
005070   ffe1                                                                                                               
005072   52e5     MOVF      0xe5,0x1,0x0                                                                                    
005074   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
005076   ffd9                                                                                                               
005078   0012     RETURN    0x0                                                                                             
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           * FILE NAME: ifi_startup.c                                                       C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           * DESCRIPTION:                                                                   C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           *  This file contains important startup code.                                    C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           * USAGE:                                                                         C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           *  This file should not be modified at all by the user.                          C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           *  DO NOT MODIFY THIS FILE!                                                      C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           #include "ifi_default.h"                                                         C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           extern void Clear_Memory (void);                                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           extern void main (void);                                                         C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           void _entry (void);     /* prototype for the startup function */                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           void _startup (void);                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           void _do_cinit (void);  /* prototype for the initialized data setup */           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           extern volatile near unsigned long short TBLPTR;                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           extern near unsigned FSR0;                                                       C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           extern near char FPFLAGS;                                                        C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           #define RND 6                                                                    C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           #pragma code _entry_scn=RESET_VECTOR                                             C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           void _entry (void)                                                               C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\ifi_startup.c
000800   ef98     GOTO      0x6130         _asm goto _startup _endasm                                                       C:\code\2008\Mnemosyne - 2008\ifi_startup.c
000802   f030                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
000804   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           #pragma code _startup_scn                                                        C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           void _startup (void)                                                             C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             _asm                                                                           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                               /* Initialize the stack pointer */                                           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
006130   ee1e     LFSR      0x1,0xe00          lfsr 1, _stack lfsr 2, _stack clrf TBLPTRU, 0 /* 1st silicon doesn't do this on POR */ C:\code\2008\Mnemosyne - 2008\ifi_startup.c
006132   f000                                                                                                               
006134   ee2e     LFSR      0x2,0xe00                                                                                       
006136   f000                                                                                                               
006138   6af8     CLRF      0xf8,0x0                                                                                        
00613a   9c4a     BCF       0x4a,0x6,0x0       bcf  FPFLAGS,RND,0 /* Initialize rounding flag for floating point libs */    C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                               /* initialize the flash memory access configuration. this is harmless */     C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                               /* for non-flash devices, so we do it on all parts. */                       C:\code\2008\Mnemosyne - 2008\ifi_startup.c
00613c   8ea6     BSF       0xa6,0x7,0x0       bsf 0xa6, 7, 0                                                               C:\code\2008\Mnemosyne - 2008\ifi_startup.c
00613e   9ca6     BCF       0xa6,0x6,0x0       bcf 0xa6, 6, 0                                                               C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             _endasm                                                                        C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           loop:                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
006140   ecfe     CALL      0x49fc,0x0      	Clear_Memory();                                                                C:\code\2008\Mnemosyne - 2008\ifi_startup.c
006142   f024                                                                                                               
006144   ec3a     CALL      0x5c74,0x0       _do_cinit ();                                                                  C:\code\2008\Mnemosyne - 2008\ifi_startup.c
006146   f02e                                                                                                               
                                             /* Call the user's main routine */                                             C:\code\2008\Mnemosyne - 2008\ifi_startup.c
006148   ec72     CALL      0x60e4,0x0       main ();                                                                       C:\code\2008\Mnemosyne - 2008\ifi_startup.c
00614a   f030                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
00614c   d7f9     BRA       0x6140           goto loop;                                                                     C:\code\2008\Mnemosyne - 2008\ifi_startup.c
00614e   0012     RETURN    0x0            }                               /* end _startup() */                             C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           /* MPLAB-C18 initialized data memory support */                                  C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           /* The linker will populate the _cinit table */                                  C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           extern far rom struct                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             unsigned short num_init;                                                       C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             struct _init_entry                                                             C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             {                                                                              C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                               unsigned long from;                                                          C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                               unsigned long to;                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                               unsigned long size;                                                          C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             }                                                                              C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             entries[];                                                                     C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           }                                                                                C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           _cinit;                                                                          C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           #pragma code _cinit_scn                                                          C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           void                                                                             C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           _do_cinit (void)                                                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             /* we'll make the assumption in the following code that these statics          C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                              * will be allocated into the same bank.                                       C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                              */                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             static short long prom;                                                        C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             static unsigned short curr_byte;                                               C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             static unsigned short curr_entry;                                              C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             static short long data_ptr;                                                    C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             /* Initialized data... */                                                      C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005c74   0e1e     MOVLW     0x1e             TBLPTR = (short long)&_cinit;                                                  C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005c76   6ef6     MOVWF     0xf6,0x0                                                                                        
005c78   0e08     MOVLW     0x8                                                                                             
005c7a   6ef7     MOVWF     0xf7,0x0                                                                                        
005c7c   0e00     MOVLW     0x0                                                                                             
005c7e   6ef8     MOVWF     0xf8,0x0                                                                                        
                                             _asm                                                                           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005c80   0102     MOVLB     0x2                movlb data_ptr                                                               C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005c82   0009     TBLRDPOSTINC                 tblrdpostinc                                                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005c84   50f5     MOVF      0xf5,0x0,0x0       movf  TABLAT, 0, 0                                                           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005c86   6fd4     MOVWF     0xd4,0x1           movwf curr_entry, 1                                                          C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005c88   0009     TBLRDPOSTINC                 tblrdpostinc                                                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005c8a   50f5     MOVF      0xf5,0x0,0x0       movf  TABLAT, 0, 0                                                           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005c8c   6fd5     MOVWF     0xd5,0x1           movwf curr_entry+1, 1                                                        C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             _endasm                                                                        C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                               test:                                                                        C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             _asm                                                                           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005c8e   e103     BNZ       0x5c96              bnz 3                                                                       C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005c90   67d4     TSTFSZ    0xd4,0x1           tstfsz curr_entry, 1                                                         C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005c92   d001     BRA       0x5c96             bra 1                                                                        C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             _endasm                                                                        C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005c94   d03d     BRA       0x5d10           goto done;                                                                     C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                               /* Count down so we only have to look up the data in _cinit                  C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                * once.                                                                     C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                *                                                                           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                * At this point we know that TBLPTR points to the top of the current        C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                * entry in _cinit, so we can just start reading the from, to, and           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                * size values.                                                              C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                */                                                                          C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             _asm                                                                           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             /* read the source address */                                                  C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005c96   0009     TBLRDPOSTINC                 tblrdpostinc                                                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005c98   50f5     MOVF      0xf5,0x0,0x0       movf  TABLAT, 0, 0                                                           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005c9a   6fcf     MOVWF     0xcf,0x1           movwf prom, 1                                                                C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005c9c   0009     TBLRDPOSTINC                 tblrdpostinc                                                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005c9e   50f5     MOVF      0xf5,0x0,0x0       movf  TABLAT, 0, 0                                                           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005ca0   6fd0     MOVWF     0xd0,0x1           movwf prom+1, 1                                                              C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005ca2   0009     TBLRDPOSTINC                 tblrdpostinc                                                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005ca4   50f5     MOVF      0xf5,0x0,0x0       movf  TABLAT, 0, 0                                                           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005ca6   6fd1     MOVWF     0xd1,0x1           movwf prom+2, 1                                                              C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                               /* skip a byte since it's stored as a 32bit int */                           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005ca8   0009     TBLRDPOSTINC                 tblrdpostinc                                                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                               /* read the destination address directly into FSR0 */                        C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005caa   0009     TBLRDPOSTINC                 tblrdpostinc                                                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cac   50f5     MOVF      0xf5,0x0,0x0       movf  TABLAT, 0, 0                                                           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cae   6ee9     MOVWF     0xe9,0x0           movwf FSR0L, 0                                                               C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cb0   0009     TBLRDPOSTINC                 tblrdpostinc                                                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cb2   50f5     MOVF      0xf5,0x0,0x0       movf  TABLAT, 0, 0                                                           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cb4   6eea     MOVWF     0xea,0x0           movwf FSR0H, 0                                                               C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                               /* skip two bytes since it's stored as a 32bit int */                        C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cb6   0009     TBLRDPOSTINC                 tblrdpostinc                                                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cb8   0009     TBLRDPOSTINC                 tblrdpostinc                                                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                               /* read the destination address directly into FSR0 */                        C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cba   0009     TBLRDPOSTINC                 tblrdpostinc                                                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cbc   50f5     MOVF      0xf5,0x0,0x0       movf  TABLAT, 0, 0                                                           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cbe   6fd2     MOVWF     0xd2,0x1           movwf curr_byte, 1                                                           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cc0   0009     TBLRDPOSTINC                 tblrdpostinc                                                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cc2   50f5     MOVF      0xf5,0x0,0x0       movf  TABLAT, 0, 0                                                           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cc4   6fd3     MOVWF     0xd3,0x1           movwf curr_byte+1, 1                                                         C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                               /* skip two bytes since it's stored as a 32bit int */                        C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cc6   0009     TBLRDPOSTINC                 tblrdpostinc                                                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cc8   0009     TBLRDPOSTINC                 tblrdpostinc                                                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             _endasm                                                                        C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             /* the table pointer now points to the next entry. Save it                     C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                              * off since we'll be using the table pointer to do the copying                C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                              * for the entry.                                                              C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                              */                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cca   cff6     MOVFF     0xff6,0x2d6      data_ptr = TBLPTR;                                                             C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005ccc   f2d6                                                                                                               
005cce   cff7     MOVFF     0xff7,0x2d7                                                                                     
005cd0   f2d7                                                                                                               
005cd2   cff8     MOVFF     0xff8,0x2d8                                                                                     
005cd4   f2d8                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             /* now assign the source address to the table pointer */                       C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cd6   c2cf     MOVFF     0x2cf,0xff6      TBLPTR = prom;                                                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cd8   fff6                                                                                                               
005cda   c2d0     MOVFF     0x2d0,0xff7                                                                                     
005cdc   fff7                                                                                                               
005cde   c2d1     MOVFF     0x2d1,0xff8                                                                                     
005ce0   fff8                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             /* do the copy loop */                                                         C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             _asm                                                                           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                     /* determine if we have any more bytes to copy */                      C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005ce2   0102     MOVLB     0x2                movlb curr_byte                                                              C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005ce4   53d2     MOVF      0xd2,0x1,0x1       movf  curr_byte, 1, 1                                                        C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           copy_loop:                                                                       C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005ce6   e102     BNZ       0x5cec             bnz 2 /* copy_one_byte */                                                    C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005ce8   53d3     MOVF      0xd3,0x1,0x1       movf  curr_byte + 1, 1, 1                                                    C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cea   e007     BZ        0x5cfa             bz 7  /* done_copying */                                                     C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           copy_one_byte:                                                                   C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cec   0009     TBLRDPOSTINC                 tblrdpostinc                                                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cee   50f5     MOVF      0xf5,0x0,0x0       movf  TABLAT, 0, 0                                                           C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cf0   6eee     MOVWF     0xee,0x0           movwf POSTINC0, 0                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                               /* decrement byte counter */                                                 C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cf2   07d2     DECF      0xd2,0x1,0x1       decf  curr_byte, 1, 1                                                        C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cf4   e2f8     BC        0x5ce6             bc -8   /* copy_loop */                                                      C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cf6   07d3     DECF      0xd3,0x1,0x1       decf  curr_byte + 1, 1, 1                                                    C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cf8   d7f9     BRA       0x5cec             bra -7  /* copy_one_byte */                                                  C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           done_copying:                                                                    C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                             _endasm                                                                        C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                                 /* restore the table pointer for the next entry */                         C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cfa   c2d6     MOVFF     0x2d6,0xff6      TBLPTR = data_ptr;                                                             C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005cfc   fff6                                                                                                               
005cfe   c2d7     MOVFF     0x2d7,0xff7                                                                                     
005d00   fff7                                                                                                               
005d02   c2d8     MOVFF     0x2d8,0xff8                                                                                     
005d04   fff8                                                                                                               
                                             /* next entry... */                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005d06   0102     MOVLB     0x2              curr_entry--;                                                                  C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005d08   07d4     DECF      0xd4,0x1,0x1                                                                                    
005d0a   0e00     MOVLW     0x0                                                                                             
005d0c   5bd5     SUBWFB    0xd5,0x1,0x1                                                                                    
005d0e   d7bf     BRA       0x5c8e           goto test;                                                                     C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           done:                                                                            C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           ;                                                                                C:\code\2008\Mnemosyne - 2008\ifi_startup.c
005d10   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\ifi_startup.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * FILE NAME: ifi_utilities.c                                                     C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * DESCRIPTION:                                                                   C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *  This file contains some useful functions that you can call in your program.   C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * USAGE:                                                                         C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *  The user should NOT modify this file, so that if a new version is released    C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *  by Innovation First then it can be easily replaced.                           C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *  The user should add their own functions to either user_routines.c or another  C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *  custom file.                                                                  C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           #include <usart.h>                                                               C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           #include <spi.h>                                                                 C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           #include <adc.h>                                                                 C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           #include <capture.h>                                                             C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           #include <timers.h>                                                              C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           #include <string.h>                                                              C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           #include <pwm.h>                                                                 C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           #include "delays.h"       /*defined locally*/                                    C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           #include "ifi_aliases.h"                                                         C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           #include "ifi_default.h"                                                         C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           #include "ifi_utilities.h"                                                       C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           #include "user_routines.h"                                                       C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           int             ifi_packet_num1 = 0;                                             C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           int             ifi_last_packet1 = 0;                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           unsigned char   *ptr;                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           unsigned char   ifi_count;                                                       C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           unsigned char   ifi_analog_channels;                                             C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * FUNCTION NAME: Wait4TXEmpty                                                    C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * PURPOSE:       Wait for serial transmit buffer to be empty.                    C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * CALLED FROM:   anywhere                                                        C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * ARGUMENTS:     none                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * RETURNS:       void                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           /* Used when transmitting data serially.  It waits for each byte to finish.   */ C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           void Wait4TXEmpty(void)                                                          C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           #ifndef _SIMULATOR                                                               C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0057e4   b89e     BTFSC     0x9e,0x4,0x0     while (!TXINTF)                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0057e6   d002     BRA       0x57ec                                                                                          
0057ea   d7fc     BRA       0x57e4                                                                                          
                                             {                                                                              C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0057e8   d7fd     BRA       0x57e4             continue;                                                                    C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                             }                                                                              C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0057ec   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * FUNCTION NAME: PrintByte                                                       C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * PURPOSE:       A simple way to print a byte of data to the serial port.        C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * CALLED FROM:   anywhere                                                        C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * ARGUMENTS:     none                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *     Argument       Type             IO   Description                           C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *     --------       -------------    --   -----------                           C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *     odata          unsigned char    I    byte of data to be transmitted        C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * RETURNS:       void                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0057ee   cfd9     MOVFF     0xfd9,0xfe6    void PrintByte(unsigned char odata)                                              C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0057f0   ffe6                                                                                                               
0057f2   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0057f4   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0057f6   0efe     MOVLW     0xfe             Hex_output((unsigned char) odata);                                             C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0057f8   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0057fa   ffe6                                                                                                               
0057fc   ec10     CALL      0x4a20,0x0                                                                                      
0057fe   f025                                                                                                               
005800   52e5     MOVF      0xe5,0x1,0x0                                                                                    
005802   0e0d     MOVLW     0xd              TXREG = 13;  /* a carriage return */                                           C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005804   6ead     MOVWF     0xad,0x0                                                                                        
005806   dfee     RCALL     0x57e4           Wait4TXEmpty();                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005808   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
00580a   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00580c   ffd9                                                                                                               
00580e   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * FUNCTION NAME: PrintWord                                                       C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * PURPOSE:       A simple way to print a word of data to the serial port.        C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * CALLED FROM:   anywhere                                                        C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * ARGUMENTS:     none                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *     Argument       Type             IO   Description                           C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *     --------       -------------    --   -----------                           C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *     odata          unsigned int     I    word of data to be transmitted        C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * RETURNS:       void                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005810   cfd9     MOVFF     0xfd9,0xfe6    void PrintWord(unsigned int odata)                                               C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005812   ffe6                                                                                                               
005814   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
005816   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005818   0102     MOVLB     0x2              ptr = (unsigned char *) &odata;                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
00581a   50d9     MOVF      0xd9,0x0,0x0                                                                                    
00581c   0ffd     ADDLW     0xfd                                                                                            
00581e   6fe9     MOVWF     0xe9,0x1                                                                                        
005820   0eff     MOVLW     0xff                                                                                            
005822   20da     ADDWFC    0xda,0x0,0x0                                                                                    
005824   6fea     MOVWF     0xea,0x1                                                                                        
005826   0e01     MOVLW     0x1              Hex_output(ptr[1]);                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005828   6aea     CLRF      0xea,0x0                                                                                        
00582a   25e9     ADDWF     0xe9,0x0,0x1                                                                                    
00582c   6ee9     MOVWF     0xe9,0x0                                                                                        
00582e   51ea     MOVF      0xea,0x0,0x1                                                                                    
005830   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
005832   50ef     MOVF      0xef,0x0,0x0                                                                                    
005834   6ee6     MOVWF     0xe6,0x0                                                                                        
005836   ec10     CALL      0x4a20,0x0                                                                                      
005838   f025                                                                                                               
00583a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00583c   c2e9     MOVFF     0x2e9,0xfe9      Hex_output(ptr[0]);                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
00583e   ffe9                                                                                                               
005840   c2ea     MOVFF     0x2ea,0xfea                                                                                     
005842   ffea                                                                                                               
005844   50ef     MOVF      0xef,0x0,0x0                                                                                    
005846   6ee6     MOVWF     0xe6,0x0                                                                                        
005848   ec10     CALL      0x4a20,0x0                                                                                      
00584a   f025                                                                                                               
00584c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00584e   0e0d     MOVLW     0xd              TXREG = 13;  /* add a carriage return */                                       C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005850   6ead     MOVWF     0xad,0x0                                                                                        
005852   dfc8     RCALL     0x57e4           Wait4TXEmpty();                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005854   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005856   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
005858   ffd9                                                                                                               
00585a   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * FUNCTION NAME: DisplayBufr                                                     C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * PURPOSE:       Print the entire transmit or receive buffer over the serial     C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *                port for viewing in a terminal program on your PC.              C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * CALLED FROM:   anywhere                                                        C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * ARGUMENTS:                                                                     C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *     Argument       Type        IO   Description                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *     --------       --------    --   -----------                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *     *bufr          pointer     I    points to beginning of buffer to transmit  C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * RETURNS:       void                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
00585c   cfd9     MOVFF     0xfd9,0xfe6    void DisplayBufr(unsigned char *bufr)                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
00585e   ffe6                                                                                                               
005860   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
005862   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005864   0102     MOVLB     0x2              for (ifi_count=0;ifi_count<26;ifi_count++)                                     C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005866   6beb     CLRF      0xeb,0x1                                                                                        
005868   0e1a     MOVLW     0x1a                                                                                            
00586a   5deb     SUBWF     0xeb,0x0,0x1                                                                                    
00586c   e211     BC        0x5890                                                                                          
00588a   0102     MOVLB     0x2                                                                                             
00588c   2beb     INCF      0xeb,0x1,0x1                                                                                    
00588e   d7ec     BRA       0x5868                                                                                          
                                             {                                                                              C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
00586e   0efd     MOVLW     0xfd               Hex_output((unsigned char) *bufr++);                                         C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005870   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
005872   ffe9                                                                                                               
005874   2adb     INCF      0xdb,0x1,0x0                                                                                    
005876   0efe     MOVLW     0xfe                                                                                            
005878   cfdb     MOVFF     0xfdb,0xfea                                                                                     
00587a   ffea                                                                                                               
00587c   e301     BNC       0x5880                                                                                          
00587e   2adb     INCF      0xdb,0x1,0x0                                                                                    
005880   50ef     MOVF      0xef,0x0,0x0                                                                                    
005882   6ee6     MOVWF     0xe6,0x0                                                                                        
005884   ec10     CALL      0x4a20,0x0                                                                                      
005886   f025                                                                                                               
005888   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                             }                                                                              C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005890   0e0d     MOVLW     0xd              TXREG = 13;  /* add a carriage return */                                       C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005892   6ead     MOVWF     0xad,0x0                                                                                        
005894   dfa7     RCALL     0x57e4           Wait4TXEmpty();                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005896   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005898   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00589a   ffd9                                                                                                               
00589c   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * FUNCTION NAME: PacketNum_Check                                                 C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * PURPOSE:       Print the packet number over the serial port if a packet gets   C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *                dropped.  Handy for seeing if you are dropping data.            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * CALLED FROM:   anywhere                                                        C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * ARGUMENTS:     none                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * RETURNS:       void                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           void PacketNum_Check(void)                                                       C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                             /*    to print only the 10th (packet num) byte*/                               C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
00589e   0102     MOVLB     0x2              ptr = (unsigned char *) &rxdata.packet_num;                                    C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0058a0   0e20     MOVLW     0x20                                                                                            
0058a2   6fe9     MOVWF     0xe9,0x1                                                                                        
0058a4   0e02     MOVLW     0x2                                                                                             
0058a6   6fea     MOVWF     0xea,0x1                                                                                        
0058a8   0102     MOVLB     0x2              ifi_packet_num1 = (int) rxdata.packet_num;                                     C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0058aa   5120     MOVF      0x20,0x0,0x1                                                                                    
0058ac   0102     MOVLB     0x2                                                                                             
0058ae   6ff1     MOVWF     0xf1,0x1                                                                                        
0058b0   6bf2     CLRF      0xf2,0x1                                                                                        
0058b2   51f3     MOVF      0xf3,0x0,0x1     if (ifi_packet_num1 != ifi_last_packet1)                                       C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0058b4   19f1     XORWF     0xf1,0x0,0x1                                                                                    
0058b6   e102     BNZ       0x58bc                                                                                          
0058b8   51f4     MOVF      0xf4,0x0,0x1                                                                                    
0058ba   19f2     XORWF     0xf2,0x0,0x1                                                                                    
0058bc   e018     BZ        0x58ee                                                                                          
                                             {                                                                              C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0058be   0102     MOVLB     0x2                if (statusflag.FIRST_TIME == 1)                                              C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0058c0   a540     BTFSS     0x40,0x2,0x1                                                                                    
0058c2   d002     BRA       0x58c8                                                                                          
                                               {                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0058c4   9540     BCF       0x40,0x2,0x1         statusflag.FIRST_TIME = 0;                                                 C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                               }                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0058c6   d00f     BRA       0x58e6             else                                                                         C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                               {                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0058c8   c2f3     MOVFF     0x2f3,0xfe6          Hex_output((unsigned char) ifi_last_packet1);                              C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0058ca   ffe6                                                                                                               
0058cc   ec10     CALL      0x4a20,0x0                                                                                      
0058ce   f025                                                                                                               
0058d0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0058d2   c2f1     MOVFF     0x2f1,0xfe6          Hex_output((unsigned char) ifi_packet_num1);                               C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0058d4   ffe6                                                                                                               
0058d6   ec10     CALL      0x4a20,0x0                                                                                      
0058d8   f025                                                                                                               
0058da   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0058dc   0e0d     MOVLW     0xd                  TXREG = 13;                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0058de   6ead     MOVWF     0xad,0x0                                                                                        
0058e0   df81     RCALL     0x57e4               Wait4TXEmpty();                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0058e2   0102     MOVLB     0x2                  statusflag.FIRST_TIME = 0;                                                 C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0058e4   9540     BCF       0x40,0x2,0x1                                                                                    
                                               }                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0058e6   c2f1     MOVFF     0x2f1,0x2f3        ifi_last_packet1 = ifi_packet_num1;                                          C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0058e8   f2f3                                                                                                               
0058ea   c2f2     MOVFF     0x2f2,0x2f4                                                                                     
0058ec   f2f4                                                                                                               
                                             }/*   if (ifi_packet_num1 != ifi_last_packet1)*/                               C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0058ee   0102     MOVLB     0x2              ifi_last_packet1++;                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0058f0   2bf3     INCF      0xf3,0x1,0x1                                                                                    
0058f2   0e00     MOVLW     0x0                                                                                             
0058f4   23f4     ADDWFC    0xf4,0x1,0x1                                                                                    
0058f6   35f4     RLCF      0xf4,0x0,0x1     if (ifi_last_packet1 > 255)                                                    C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0058f8   e204     BC        0x5902                                                                                          
0058fa   51f3     MOVF      0xf3,0x0,0x1                                                                                    
0058fc   08ff     SUBLW     0xff                                                                                            
0058fe   0e00     MOVLW     0x0                                                                                             
005900   55f4     SUBFWB    0xf4,0x0,0x1                                                                                    
005902   e202     BC        0x5908                                                                                          
                                             {                                                                              C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005904   6bf3     CLRF      0xf3,0x1           ifi_last_packet1 = 0;                                                        C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005906   6bf4     CLRF      0xf4,0x1                                                                                        
                                             }                                                                              C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005908   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * FUNCTION NAME: Initialize_Serial_Comms                                         C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * PURPOSE:       Opens the serial port 1 for communicating with your PC at       C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *                115k baud, 8 bits, no parity, one stop bit, and no flow control. C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * CALLED FROM:   user_routines.c                                                 C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * ARGUMENTS:     none                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * RETURNS:       void                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           void Initialize_Serial_Comms (void)                                              C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                             OpenUSART(USART_TX_INT_OFF &                                                   C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                               USART_RX_INT_OFF &                                                           C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                               USART_ASYNCH_MODE &                                                          C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                               USART_EIGHT_BIT &                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                               USART_CONT_RX &                                                              C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
00590e   0e3c     MOVLW     0x3c               USART_BRGH_HIGH,                                                             C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005910   6ee6     MOVWF     0xe6,0x0                                                                                        
00590a   0e15     MOVLW     0x15               baud_115);                                                                   C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
00590c   6ee6     MOVWF     0xe6,0x0                                                                                        
005912   ece7     CALL      0x5fce,0x0                                                                                      
005914   f02f                                                                                                               
005916   52e5     MOVF      0xe5,0x1,0x0                                                                                    
005918   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
00591a   0e32     MOVLW     0x32             Delay1KTCYx( 50 ); /* Settling time */                                         C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
00591c   6ee6     MOVWF     0xe6,0x0                                                                                        
00591e   eca8     CALL      0x6150,0x0                                                                                      
005920   f030                                                                                                               
005922   52e5     MOVF      0xe5,0x1,0x0                                                                                    
005924   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * FUNCTION NAME: Set_Number_of_Analog_Channels                                   C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * PURPOSE:       Sets the variable used in Get_Analog_Value routine (below)      C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *                to the number of analog channels desired by the user.           C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * CALLED FROM:   user_routines.c initialization, typically                       C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * ARGUMENTS:                                                                     C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *      Argument            Type    IO   Description                              C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *     -----------          -----   --   -----------                              C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *     number_of_channels   alias   I    choose alias from ifi_aliases.h          C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * RETURNS:       void                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005926   cfd9     MOVFF     0xfd9,0xfe6    void Set_Number_of_Analog_Channels (unsigned char number_of_channels)            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005928   ffe6                                                                                                               
00592a   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00592c   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
00592e   0efe     MOVLW     0xfe             ifi_analog_channels = number_of_channels;                                      C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005930   cfdb     MOVFF     0xfdb,0x2ec                                                                                     
005932   f2ec                                                                                                               
005934   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005936   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
005938   ffd9                                                                                                               
00593a   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * FUNCTION NAME: Get_Analog_Value                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * PURPOSE:       Reads the analog voltage on an A/D port and returns the         C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *                10-bit value read stored in an unsigned int.                    C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * CALLED FROM:   user_routines.c, typically                                      C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * ARGUMENTS:                                                                     C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *      Argument         Type        IO   Description                             C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *     -----------   -------------   --   -----------                             C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *     ADC_channel       alias       I    alias found in ifi_aliases.h            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           * RETURNS:       unsigned int                                                    C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
00593c   cfd9     MOVFF     0xfd9,0xfe6    unsigned int Get_Analog_Value (unsigned char ADC_channel)                        C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
00593e   ffe6                                                                                                               
005940   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
005942   ffd9                                                                                                               
005944   0e02     MOVLW     0x2                                                                                             
005946   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                             unsigned int result;                                                           C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           #if defined(__18F8722)                                                           C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005958   0ef1     MOVLW     0xf1             OpenADC( ADC_FOSC_RC & ADC_RIGHT_JUST & ADC_0_TAD,                             C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
00595a   6ee6     MOVWF     0xe6,0x0                                                                                        
005948   0e0f     MOVLW     0xf                       ADC_channel & ADC_INT_OFF & ADC_VREFPLUS_VDD & ADC_VREFMINUS_VSS,15); C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
00594a   6ee6     MOVWF     0xe6,0x0                                                                                        
00594c   0efe     MOVLW     0xfe                                                                                            
00594e   50db     MOVF      0xdb,0x0,0x0                                                                                    
005950   0b7f     ANDLW     0x7f                                                                                            
005952   0bfe     ANDLW     0xfe                                                                                            
005954   0bfd     ANDLW     0xfd                                                                                            
005956   6ee6     MOVWF     0xe6,0x0                                                                                        
00595c   ec4d     CALL      0x5e9a,0x0                                                                                      
00595e   f02f                                                                                                               
005960   52e5     MOVF      0xe5,0x1,0x0                                                                                    
005962   52e5     MOVF      0xe5,0x1,0x0                                                                                    
005964   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           #else                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                             OpenADC( ADC_FOSC_RC & ADC_RIGHT_JUST & ifi_analog_channels,                   C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                                     ADC_channel & ADC_INT_OFF & ADC_VREFPLUS_VDD & ADC_VREFMINUS_VSS );    C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005966   0e0a     MOVLW     0xa              Delay10TCYx( 10 );                                                             C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005968   6ee6     MOVWF     0xe6,0x0                                                                                        
00596a   ecc6     CALL      0x618c,0x0                                                                                      
00596c   f030                                                                                                               
00596e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
005970   ecdd     CALL      0x61ba,0x0       ConvertADC();                                                                  C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005972   f030                                                                                                               
005974   ec07     CALL      0x80e,0x0        while( BusyADC() );                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005976   f004                                                                                                               
005978   0900     IORLW     0x0                                                                                             
00597a   e001     BZ        0x597e                                                                                          
00597c   d7fb     BRA       0x5974                                                                                          
00597e   ec3d     CALL      0x607a,0x0       ReadADC();                                                                     C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005980   f030                                                                                                               
005982   ecda     CALL      0x61b4,0x0       CloseADC();                                                                    C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005984   f030                                                                                                               
005986   50c4     MOVF      0xc4,0x0,0x0     result = (int) ADRESH << 8 | ADRESL;                                           C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
005988   6e02     MOVWF     0x2,0x0                                                                                         
00598a   c002     MOVFF     0x2,0x3                                                                                         
00598c   f003                                                                                                               
00598e   6a02     CLRF      0x2,0x0                                                                                         
005990   50c3     MOVF      0xc3,0x0,0x0                                                                                    
005992   0100     MOVLB     0x0                                                                                             
005994   1002     IORWF     0x2,0x0,0x0                                                                                     
005996   6e00     MOVWF     0x0,0x0                                                                                         
005998   c003     MOVFF     0x3,0x1                                                                                         
00599a   f001                                                                                                               
00599c   c000     MOVFF     0x0,0xfde                                                                                       
00599e   ffde                                                                                                               
0059a0   c001     MOVFF     0x1,0xfdd                                                                                       
0059a2   ffdd                                                                                                               
0059a4   cfde     MOVFF     0xfde,0x0        return result;                                                                 C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0059a6   f000                                                                                                               
0059a8   cfdd     MOVFF     0xfdd,0x1                                                                                       
0059aa   f001                                                                                                               
0059ac   c000     MOVFF     0x0,0xff3                                                                                       
0059ae   fff3                                                                                                               
0059b0   c001     MOVFF     0x1,0xff4                                                                                       
0059b2   fff4                                                                                                               
0059b4   d000     BRA       0x59b6                                                                                          
0059b6   cfd9     MOVFF     0xfd9,0xfe1    }                                                                                C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
0059b8   ffe1                                                                                                               
0059ba   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0059bc   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0059be   ffd9                                                                                                               
0059c0   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           /******************************************************************************/ C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           /******************************************************************************/ C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           /******************************************************************************/ C:\code\2008\Mnemosyne - 2008\ifi_utilities.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\main.c
                                           * FILE NAME: main.c <FRC VERSION>                                                C:\code\2008\Mnemosyne - 2008\main.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\main.c
                                           * DESCRIPTION:                                                                   C:\code\2008\Mnemosyne - 2008\main.c
                                           *  This file contains the main program loop.                                     C:\code\2008\Mnemosyne - 2008\main.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\main.c
                                           * USAGE:                                                                         C:\code\2008\Mnemosyne - 2008\main.c
                                           *  You should not need to modify this file.                                      C:\code\2008\Mnemosyne - 2008\main.c
                                           *  Note the different loop speed for the two routines:                           C:\code\2008\Mnemosyne - 2008\main.c
                                           *     Process_Data_From_Master_uP                                                C:\code\2008\Mnemosyne - 2008\main.c
                                           *     Process_Data_From_Local_IO                                                 C:\code\2008\Mnemosyne - 2008\main.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\main.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\main.c
                                           #include "ifi_aliases.h"                                                         C:\code\2008\Mnemosyne - 2008\main.c
                                           #include "ifi_default.h"                                                         C:\code\2008\Mnemosyne - 2008\main.c
                                           #include "ifi_utilities.h"                                                       C:\code\2008\Mnemosyne - 2008\main.c
                                           #include "user_routines.h"                                                       C:\code\2008\Mnemosyne - 2008\main.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\main.c
                                           tx_data_record txdata;          /* DO NOT CHANGE! */                             C:\code\2008\Mnemosyne - 2008\main.c
                                           rx_data_record rxdata;          /* DO NOT CHANGE! */                             C:\code\2008\Mnemosyne - 2008\main.c
                                           packed_struct statusflag;       /* DO NOT CHANGE! */                             C:\code\2008\Mnemosyne - 2008\main.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\main.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\main.c
                                           * FUNCTION NAME: main                                                            C:\code\2008\Mnemosyne - 2008\main.c
                                           * PURPOSE:       Main program function.                                          C:\code\2008\Mnemosyne - 2008\main.c
                                           * CALLED FROM:   ifi_startup.c                                                   C:\code\2008\Mnemosyne - 2008\main.c
                                           * ARGUMENTS:     none                                                            C:\code\2008\Mnemosyne - 2008\main.c
                                           * RETURNS:       void                                                            C:\code\2008\Mnemosyne - 2008\main.c
                                           * DO NOT DELETE THIS FUNCTION                                                    C:\code\2008\Mnemosyne - 2008\main.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\main.c
                                           void main (void)                                                                 C:\code\2008\Mnemosyne - 2008\main.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\main.c
                                           #ifdef UNCHANGEABLE_DEFINITION_AREA                                              C:\code\2008\Mnemosyne - 2008\main.c
0060e4   ec65     CALL      0x24ca,0x0       IFI_Initialization ();        /* DO NOT CHANGE! */                             C:\code\2008\Mnemosyne - 2008\main.c
0060e6   f012                                                                                                               
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\main.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\main.c
0060e8   ec11     CALL      0x2c22,0x0       User_Initialization();        /* You edit this in user_routines.c */           C:\code\2008\Mnemosyne - 2008\main.c
0060ea   f016                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\main.c
0060ec   0102     MOVLB     0x2              statusflag.NEW_SPI_DATA = 0;  /* DO NOT CHANGE! */                             C:\code\2008\Mnemosyne - 2008\main.c
0060ee   9140     BCF       0x40,0x0,0x1                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\main.c
006108   d7f3     BRA       0x60f0           while (1)   /* This loop will repeat indefinitely. */                          C:\code\2008\Mnemosyne - 2008\main.c
                                             {                                                                              C:\code\2008\Mnemosyne - 2008\main.c
                                           #ifdef _SIMULATOR                                                                C:\code\2008\Mnemosyne - 2008\main.c
                                               statusflag.NEW_SPI_DATA = 1;                                                 C:\code\2008\Mnemosyne - 2008\main.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\main.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\main.c
0060f0   0102     MOVLB     0x2                if (statusflag.NEW_SPI_DATA)      /* 26.2ms loop area */                     C:\code\2008\Mnemosyne - 2008\main.c
0060f2   a140     BTFSS     0x40,0x0,0x1                                                                                    
0060f4   d007     BRA       0x6104                                                                                          
                                               {                                 /* I'm slow!  I only execute every 26.2ms because */ C:\code\2008\Mnemosyne - 2008\main.c
                                                                                 /* that's how fast the Master uP gives me data. */ C:\code\2008\Mnemosyne - 2008\main.c
0060f6   ec85     CALL      0x2d0a,0x0           Process_Data_From_Master_uP();  /* You edit this in user_routines.c */     C:\code\2008\Mnemosyne - 2008\main.c
0060f8   f016                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\main.c
0060fa   0102     MOVLB     0x2                  if (autonomous_mode)            /* DO NOT CHANGE! */                       C:\code\2008\Mnemosyne - 2008\main.c
0060fc   ad21     BTFSS     0x21,0x6,0x1                                                                                    
0060fe   d002     BRA       0x6104                                                                                          
                                                 {                                                                          C:\code\2008\Mnemosyne - 2008\main.c
006100   ecc4     CALL      0x3f88,0x0             User_Autonomous_Code();        /* You edit this in user_routines_fast.c */ C:\code\2008\Mnemosyne - 2008\main.c
006102   f01f                                                                                                               
                                                 }                                                                          C:\code\2008\Mnemosyne - 2008\main.c
                                               }                                                                            C:\code\2008\Mnemosyne - 2008\main.c
006104   ecf2     CALL      0x41e4,0x0         Process_Data_From_Local_IO();     /* You edit this in user_routines_fast.c */ C:\code\2008\Mnemosyne - 2008\main.c
006106   f020                                                                                                               
                                                                                 /* I'm fast!  I execute during every loop.*/ C:\code\2008\Mnemosyne - 2008\main.c
                                             } /* while (1) */                                                              C:\code\2008\Mnemosyne - 2008\main.c
00610a   0012     RETURN    0x0            }  /* END of Main */                                                             C:\code\2008\Mnemosyne - 2008\main.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\main.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\main.c
                                           /******************************************************************************/ C:\code\2008\Mnemosyne - 2008\main.c
                                           /******************************************************************************/ C:\code\2008\Mnemosyne - 2008\main.c
                                           /******************************************************************************/ C:\code\2008\Mnemosyne - 2008\main.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	TITLE:		pwm.c                                                                  C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	VERSION:	0.1 (Beta)                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	DATE:		29-Dec-2006                                                             C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	AUTHOR:		R. Kevin Watson                                                       C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *				kevinw@jpl.nasa.gov                                                         C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	COMMENTS:	You are free to use this source code for any non-commercial          C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *				use. Please do not make copies of this source code, modified                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *				or un-modified, publicly available on the internet or elsewhere             C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *				without permission. Thanks.                                                 C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *				Copyright ©2006-2007 R. Kevin Watson. All rights are reserved.              C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           ******************************************************************************** C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	CHANGE LOG:                                                                    C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	DATE         REV  DESCRIPTION                                                  C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	-----------  ---  ----------------------------------------------------------   C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	29-Dec-2006  0.1  RKW - Original code.                                         C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\pwm.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                           #include "ifi_default.h"                                                         C:\code\2008\Mnemosyne - 2008\pwm.c
                                           #include "pwm.h"                                                                 C:\code\2008\Mnemosyne - 2008\pwm.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	FUNCTION:		Initialize_PWM()                                                    C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	PURPOSE:		CCP and timer initialization				                                     C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	CALLED FROM:	PWM()                                                             C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	PARAMETERS:		none                                                              C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	RETURNS:		nothing                                                              C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\pwm.c
                                           void Initialize_PWM(void)                                                        C:\code\2008\Mnemosyne - 2008\pwm.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	// select 16-bit read/writes to timer 3                                         C:\code\2008\Mnemosyne - 2008\pwm.c
0059c2   8eb1     BSF       0xb1,0x7,0x0   	T3CONbits.RD16 = 1;                                                             C:\code\2008\Mnemosyne - 2008\pwm.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	// CCP2 through CCP5 will use timer 3 for compare mode                          C:\code\2008\Mnemosyne - 2008\pwm.c
0059c4   86b1     BSF       0xb1,0x3,0x0   	T3CONbits.T3CCP1 = 1;                                                           C:\code\2008\Mnemosyne - 2008\pwm.c
0059c6   9cb1     BCF       0xb1,0x6,0x0   	T3CONbits.T3CCP2 = 0;                                                           C:\code\2008\Mnemosyne - 2008\pwm.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	// use a 1:1 prescale for timer 3                                               C:\code\2008\Mnemosyne - 2008\pwm.c
0059c8   9ab1     BCF       0xb1,0x5,0x0   	T3CONbits.T3CKPS1 = 0;                                                          C:\code\2008\Mnemosyne - 2008\pwm.c
0059ca   98b1     BCF       0xb1,0x4,0x0   	T3CONbits.T3CKPS0 = 0;                                                          C:\code\2008\Mnemosyne - 2008\pwm.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	// use the internal 10MHz clock for timer 3 (each timer "tick" equals 100ns)    C:\code\2008\Mnemosyne - 2008\pwm.c
0059cc   92b1     BCF       0xb1,0x1,0x0   	T3CONbits.TMR3CS = 0;                                                           C:\code\2008\Mnemosyne - 2008\pwm.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	// disable the timer 3 overflow interrupt                                       C:\code\2008\Mnemosyne - 2008\pwm.c
0059ce   92a0     BCF       0xa0,0x1,0x0   	PIE2bits.TMR3IE = 0;                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	// disable the CCP interrupts                                                   C:\code\2008\Mnemosyne - 2008\pwm.c
0059d0   90a0     BCF       0xa0,0x0,0x0   	PIE2bits.CCP2IE = 0;                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
0059d2   90a3     BCF       0xa3,0x0,0x0   	PIE3bits.CCP3IE = 0;                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
0059d4   92a3     BCF       0xa3,0x1,0x0   	PIE3bits.CCP4IE = 0;                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
0059d6   94a3     BCF       0xa3,0x2,0x0   	PIE3bits.CCP5IE = 0;	                                                           C:\code\2008\Mnemosyne - 2008\pwm.c
0059d8   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	FUNCTION:		PWM()                                                               C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	PURPOSE:		Replacement for IFI's Generate_Pwms() function						                 C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	CALLED FROM:	user_routines.c/Process_Data_From_Master_uP()                     C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	PARAMETERS:		Four unsigned char PWM position/velocity values                   C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *					for PWM outputs 13, 14, 15 and 16.                                         C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	RETURNS:		nothing                                                              C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\pwm.c
0059da   cfd9     MOVFF     0xfd9,0xfe6    void PWM(unsigned char pwm_13, unsigned char pwm_14, unsigned char pwm_15, unsigned char pwm_16) C:\code\2008\Mnemosyne - 2008\pwm.c
0059dc   ffe6                                                                                                               
0059de   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0059e0   ffd9                                                                                                               
0059e2   0e08     MOVLW     0x8                                                                                             
0059e4   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	int temp_pwm_13;                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	int temp_pwm_14;                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	int temp_pwm_15;                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	int temp_pwm_16;                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	// stop timer 3                                                                 C:\code\2008\Mnemosyne - 2008\pwm.c
0059e6   90b1     BCF       0xb1,0x0,0x0   	T3CONbits.TMR3ON = 0;                                                           C:\code\2008\Mnemosyne - 2008\pwm.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	// initialize timer 3 register to zero                                          C:\code\2008\Mnemosyne - 2008\pwm.c
0059e8   6ab3     CLRF      0xb3,0x0       	TMR3H = 0;                                                                      C:\code\2008\Mnemosyne - 2008\pwm.c
0059ea   6ab2     CLRF      0xb2,0x0       	TMR3L = 0;                                                                      C:\code\2008\Mnemosyne - 2008\pwm.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	// reset CCP hardware                                                           C:\code\2008\Mnemosyne - 2008\pwm.c
0059ec   6aba     CLRF      0xba,0x0       	CCP2CON = 0;                                                                    C:\code\2008\Mnemosyne - 2008\pwm.c
0059ee   6ab7     CLRF      0xb7,0x0       	CCP3CON = 0;                                                                    C:\code\2008\Mnemosyne - 2008\pwm.c
0059f0   6a73     CLRF      0x73,0x0       	CCP4CON = 0;                                                                    C:\code\2008\Mnemosyne - 2008\pwm.c
0059f2   6a70     CLRF      0x70,0x0       	CCP5CON = 0;                                                                    C:\code\2008\Mnemosyne - 2008\pwm.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	// calculate the number of 100 ns timer ticks                                   C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	// needed to match the desired PWM pulse width                                  C:\code\2008\Mnemosyne - 2008\pwm.c
0059f4   0efe     MOVLW     0xfe           	temp_pwm_13 = (PWM_13_GAIN * ((int)pwm_13 - 127)) + PWM_13_CENTER;              C:\code\2008\Mnemosyne - 2008\pwm.c
0059f6   50db     MOVF      0xdb,0x0,0x0                                                                                    
0059f8   6e02     MOVWF     0x2,0x0                                                                                         
0059fa   6a03     CLRF      0x3,0x0                                                                                         
0059fc   0e7f     MOVLW     0x7f                                                                                            
0059fe   5e02     SUBWF     0x2,0x1,0x0                                                                                     
005a00   0e00     MOVLW     0x0                                                                                             
005a02   5a03     SUBWFB    0x3,0x1,0x0                                                                                     
005a04   0e32     MOVLW     0x32                                                                                            
005a06   6e41     MOVWF     0x41,0x0                                                                                        
005a08   6a42     CLRF      0x42,0x0                                                                                        
005a0a   c002     MOVFF     0x2,0x46                                                                                        
005a0c   f046                                                                                                               
005a0e   c003     MOVFF     0x3,0x47                                                                                        
005a10   f047                                                                                                               
005a12   ec26     CALL      0x444c,0x0                                                                                      
005a14   f022                                                                                                               
005a16   c03f     MOVFF     0x3f,0x0                                                                                        
005a18   f000                                                                                                               
005a1a   c040     MOVFF     0x40,0x1                                                                                        
005a1c   f001                                                                                                               
005a1e   0e98     MOVLW     0x98                                                                                            
005a20   2600     ADDWF     0x0,0x1,0x0                                                                                     
005a22   0e3a     MOVLW     0x3a                                                                                            
005a24   2201     ADDWFC    0x1,0x1,0x0                                                                                     
005a26   c000     MOVFF     0x0,0xfde                                                                                       
005a28   ffde                                                                                                               
005a2a   c001     MOVFF     0x1,0xfdd                                                                                       
005a2c   ffdd                                                                                                               
005a2e   0efd     MOVLW     0xfd           	temp_pwm_14 = (PWM_14_GAIN * ((int)pwm_14 - 127)) + PWM_14_CENTER;              C:\code\2008\Mnemosyne - 2008\pwm.c
005a30   50db     MOVF      0xdb,0x0,0x0                                                                                    
005a32   6e02     MOVWF     0x2,0x0                                                                                         
005a34   6a03     CLRF      0x3,0x0                                                                                         
005a36   0e7f     MOVLW     0x7f                                                                                            
005a38   5e02     SUBWF     0x2,0x1,0x0                                                                                     
005a3a   0e00     MOVLW     0x0                                                                                             
005a3c   5a03     SUBWFB    0x3,0x1,0x0                                                                                     
005a3e   0e32     MOVLW     0x32                                                                                            
005a40   6e41     MOVWF     0x41,0x0                                                                                        
005a42   6a42     CLRF      0x42,0x0                                                                                        
005a44   c002     MOVFF     0x2,0x46                                                                                        
005a46   f046                                                                                                               
005a48   c003     MOVFF     0x3,0x47                                                                                        
005a4a   f047                                                                                                               
005a4c   ec26     CALL      0x444c,0x0                                                                                      
005a4e   f022                                                                                                               
005a50   c03f     MOVFF     0x3f,0x0                                                                                        
005a52   f000                                                                                                               
005a54   c040     MOVFF     0x40,0x1                                                                                        
005a56   f001                                                                                                               
005a58   0e98     MOVLW     0x98                                                                                            
005a5a   2600     ADDWF     0x0,0x1,0x0                                                                                     
005a5c   0e3a     MOVLW     0x3a                                                                                            
005a5e   2201     ADDWFC    0x1,0x1,0x0                                                                                     
005a60   0e02     MOVLW     0x2                                                                                             
005a62   c000     MOVFF     0x0,0xfdb                                                                                       
005a64   ffdb                                                                                                               
005a66   0e03     MOVLW     0x3                                                                                             
005a68   c001     MOVFF     0x1,0xfdb                                                                                       
005a6a   ffdb                                                                                                               
005a6c   0efc     MOVLW     0xfc           	temp_pwm_15 = (PWM_15_GAIN * ((int)pwm_15 - 127)) + PWM_15_CENTER;              C:\code\2008\Mnemosyne - 2008\pwm.c
005a6e   50db     MOVF      0xdb,0x0,0x0                                                                                    
005a70   6e02     MOVWF     0x2,0x0                                                                                         
005a72   6a03     CLRF      0x3,0x0                                                                                         
005a74   0e7f     MOVLW     0x7f                                                                                            
005a76   5e02     SUBWF     0x2,0x1,0x0                                                                                     
005a78   0e00     MOVLW     0x0                                                                                             
005a7a   5a03     SUBWFB    0x3,0x1,0x0                                                                                     
005a7c   0e32     MOVLW     0x32                                                                                            
005a7e   6e41     MOVWF     0x41,0x0                                                                                        
005a80   6a42     CLRF      0x42,0x0                                                                                        
005a82   c002     MOVFF     0x2,0x46                                                                                        
005a84   f046                                                                                                               
005a86   c003     MOVFF     0x3,0x47                                                                                        
005a88   f047                                                                                                               
005a8a   ec26     CALL      0x444c,0x0                                                                                      
005a8c   f022                                                                                                               
005a8e   c03f     MOVFF     0x3f,0x0                                                                                        
005a90   f000                                                                                                               
005a92   c040     MOVFF     0x40,0x1                                                                                        
005a94   f001                                                                                                               
005a96   0e98     MOVLW     0x98                                                                                            
005a98   2600     ADDWF     0x0,0x1,0x0                                                                                     
005a9a   0e3a     MOVLW     0x3a                                                                                            
005a9c   2201     ADDWFC    0x1,0x1,0x0                                                                                     
005a9e   0e04     MOVLW     0x4                                                                                             
005aa0   c000     MOVFF     0x0,0xfdb                                                                                       
005aa2   ffdb                                                                                                               
005aa4   0e05     MOVLW     0x5                                                                                             
005aa6   c001     MOVFF     0x1,0xfdb                                                                                       
005aa8   ffdb                                                                                                               
005aaa   0efb     MOVLW     0xfb           	temp_pwm_16 = (PWM_16_GAIN * ((int)pwm_16 - 127)) + PWM_16_CENTER;              C:\code\2008\Mnemosyne - 2008\pwm.c
005aac   50db     MOVF      0xdb,0x0,0x0                                                                                    
005aae   6e02     MOVWF     0x2,0x0                                                                                         
005ab0   6a03     CLRF      0x3,0x0                                                                                         
005ab2   0e7f     MOVLW     0x7f                                                                                            
005ab4   5e02     SUBWF     0x2,0x1,0x0                                                                                     
005ab6   0e00     MOVLW     0x0                                                                                             
005ab8   5a03     SUBWFB    0x3,0x1,0x0                                                                                     
005aba   0e32     MOVLW     0x32                                                                                            
005abc   6e41     MOVWF     0x41,0x0                                                                                        
005abe   6a42     CLRF      0x42,0x0                                                                                        
005ac0   c002     MOVFF     0x2,0x46                                                                                        
005ac2   f046                                                                                                               
005ac4   c003     MOVFF     0x3,0x47                                                                                        
005ac6   f047                                                                                                               
005ac8   ec26     CALL      0x444c,0x0                                                                                      
005aca   f022                                                                                                               
005acc   c03f     MOVFF     0x3f,0x0                                                                                        
005ace   f000                                                                                                               
005ad0   c040     MOVFF     0x40,0x1                                                                                        
005ad2   f001                                                                                                               
005ad4   0e98     MOVLW     0x98                                                                                            
005ad6   2600     ADDWF     0x0,0x1,0x0                                                                                     
005ad8   0e3a     MOVLW     0x3a                                                                                            
005ada   2201     ADDWFC    0x1,0x1,0x0                                                                                     
005adc   0e06     MOVLW     0x6                                                                                             
005ade   c000     MOVFF     0x0,0xfdb                                                                                       
005ae0   ffdb                                                                                                               
005ae2   0e07     MOVLW     0x7                                                                                             
005ae4   c001     MOVFF     0x1,0xfdb                                                                                       
005ae6   ffdb                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	// load the CCP compare registers                                               C:\code\2008\Mnemosyne - 2008\pwm.c
005ae8   50df     MOVF      0xdf,0x0,0x0   	CCPR2L = LOBYTE((unsigned int)temp_pwm_13);                                     C:\code\2008\Mnemosyne - 2008\pwm.c
005aea   6ebb     MOVWF     0xbb,0x0                                                                                        
005aec   cfde     MOVFF     0xfde,0x0      	CCPR2H = HIBYTE((unsigned int)temp_pwm_13);                                     C:\code\2008\Mnemosyne - 2008\pwm.c
005aee   f000                                                                                                               
005af0   cfdd     MOVFF     0xfdd,0x1                                                                                       
005af2   f001                                                                                                               
005af4   c001     MOVFF     0x1,0x0                                                                                         
005af6   f000                                                                                                               
005af8   6a01     CLRF      0x1,0x0                                                                                         
005afa   5000     MOVF      0x0,0x0,0x0                                                                                     
005afc   6ebc     MOVWF     0xbc,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
005afe   0e02     MOVLW     0x2            	CCPR3L = LOBYTE((unsigned int)temp_pwm_14);                                     C:\code\2008\Mnemosyne - 2008\pwm.c
005b00   50db     MOVF      0xdb,0x0,0x0                                                                                    
005b02   6eb8     MOVWF     0xb8,0x0                                                                                        
005b04   0e02     MOVLW     0x2            	CCPR3H = HIBYTE((unsigned int)temp_pwm_14);                                     C:\code\2008\Mnemosyne - 2008\pwm.c
005b06   cfdb     MOVFF     0xfdb,0x0                                                                                       
005b08   f000                                                                                                               
005b0a   0e03     MOVLW     0x3                                                                                             
005b0c   cfdb     MOVFF     0xfdb,0x1                                                                                       
005b0e   f001                                                                                                               
005b10   c001     MOVFF     0x1,0x0                                                                                         
005b12   f000                                                                                                               
005b14   6a01     CLRF      0x1,0x0                                                                                         
005b16   5000     MOVF      0x0,0x0,0x0                                                                                     
005b18   6eb9     MOVWF     0xb9,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
005b1a   0e04     MOVLW     0x4            	CCPR4L = LOBYTE((unsigned int)temp_pwm_15);                                     C:\code\2008\Mnemosyne - 2008\pwm.c
005b1c   50db     MOVF      0xdb,0x0,0x0                                                                                    
005b1e   6e74     MOVWF     0x74,0x0                                                                                        
005b20   0e04     MOVLW     0x4            	CCPR4H = HIBYTE((unsigned int)temp_pwm_15);                                     C:\code\2008\Mnemosyne - 2008\pwm.c
005b22   cfdb     MOVFF     0xfdb,0x0                                                                                       
005b24   f000                                                                                                               
005b26   0e05     MOVLW     0x5                                                                                             
005b28   cfdb     MOVFF     0xfdb,0x1                                                                                       
005b2a   f001                                                                                                               
005b2c   c001     MOVFF     0x1,0x0                                                                                         
005b2e   f000                                                                                                               
005b30   6a01     CLRF      0x1,0x0                                                                                         
005b32   5000     MOVF      0x0,0x0,0x0                                                                                     
005b34   6e75     MOVWF     0x75,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
005b36   0e06     MOVLW     0x6            	CCPR5L = LOBYTE((unsigned int)temp_pwm_16);                                     C:\code\2008\Mnemosyne - 2008\pwm.c
005b38   50db     MOVF      0xdb,0x0,0x0                                                                                    
005b3a   6e71     MOVWF     0x71,0x0                                                                                        
005b3c   0e06     MOVLW     0x6            	CCPR5H = HIBYTE((unsigned int)temp_pwm_16);                                     C:\code\2008\Mnemosyne - 2008\pwm.c
005b3e   cfdb     MOVFF     0xfdb,0x0                                                                                       
005b40   f000                                                                                                               
005b42   0e07     MOVLW     0x7                                                                                             
005b44   cfdb     MOVFF     0xfdb,0x1                                                                                       
005b46   f001                                                                                                               
005b48   c001     MOVFF     0x1,0x0                                                                                         
005b4a   f000                                                                                                               
005b4c   6a01     CLRF      0x1,0x0                                                                                         
005b4e   5000     MOVF      0x0,0x0,0x0                                                                                     
005b50   6e72     MOVWF     0x72,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	// disable all interrupts to prevent an interrupt routine                       C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	// from executing after the CCP hardware is initialized                         C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	// and the moment the timer is started                                          C:\code\2008\Mnemosyne - 2008\pwm.c
005b52   9ef2     BCF       0xf2,0x7,0x0   	INTCONbits.GIEH = 0;                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	// setup CCP hardware for compare mode (each PWM output                         C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	// transitions from low to high at this point)                                  C:\code\2008\Mnemosyne - 2008\pwm.c
005b54   0e09     MOVLW     0x9            	CCP2CON = 0x09;                                                                 C:\code\2008\Mnemosyne - 2008\pwm.c
005b56   6eba     MOVWF     0xba,0x0                                                                                        
005b58   6eb7     MOVWF     0xb7,0x0       	CCP3CON = 0x09;                                                                 C:\code\2008\Mnemosyne - 2008\pwm.c
005b5a   6e73     MOVWF     0x73,0x0       	CCP4CON = 0x09;                                                                 C:\code\2008\Mnemosyne - 2008\pwm.c
005b5c   6e70     MOVWF     0x70,0x0       	CCP5CON = 0x09;                                                                 C:\code\2008\Mnemosyne - 2008\pwm.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	// start timer 3                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
005b5e   80b1     BSF       0xb1,0x0,0x0   	T3CONbits.TMR3ON = 1;                                                           C:\code\2008\Mnemosyne - 2008\pwm.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
                                           	//enable interrupts                                                             C:\code\2008\Mnemosyne - 2008\pwm.c
005b60   8ef2     BSF       0xf2,0x7,0x0   	INTCONbits.GIEH = 1;                                                            C:\code\2008\Mnemosyne - 2008\pwm.c
005b62   cfd9     MOVFF     0xfd9,0xfe1    }                                                                                C:\code\2008\Mnemosyne - 2008\pwm.c
005b64   ffe1                                                                                                               
005b66   52e5     MOVF      0xe5,0x1,0x0                                                                                    
005b68   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
005b6a   ffd9                                                                                                               
005b6c   0012     RETURN    0x0                                                                                             
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	TITLE:		serial_ports.c                                                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	VERSION:	0.4 (Beta)                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	DATE:		10-Jan-2006                                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	AUTHOR:		R. Kevin Watson                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				kevinw@jpl.nasa.gov                                                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	COMMENTS:	The source code in this file implements a fully buffered,            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				interrupt-driven serial port driver that can be used with                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				either or both on-board serial ports.                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				This source code will work with the Robovation (A/K/A EDU-RC)               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				robot controller and the FIRST Robotics robot controller.                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				By default, serial port one will operate at 115200 baud, which              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				is compatible with InnovationFIRST's terminal program, and                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				serial port two will operate at 9600 baud. These values can be              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				easily changed by modifying the	serial port initialization                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				functions mentioned below.                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *               This file is best viewed with tabs set to four characters.       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				Nine things must be done before this software will work                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				correctly:                                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  1a) FRC-RC: As this software is intended to replace IFI's                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  serial port driver, the call to Serial_Driver_Initialize()                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  in user_routines.c / User_Initialization() should be                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  removed or commented out.	In addition, all references to                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  "user_Serialdrv.c" and "user_Serialdrv.h" must be removed                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  from the project and all project source files.                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  1b) EDU-RC: As this software is intended to replace IFI's                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  serial port driver, the call to Initialize_Serial_Comms()                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  in user_routines.c / User_Initialization() should be                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  removed or commented out.	In addition, all references to                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  "printf_lib.c" and "printf_lib.h" must be removed from                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  the project and all project source files.                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  2) You must add the serial_ports.c/.h source files to                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  your MPLAB project.                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  3) A #include statement for the serial_ports.h header                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  file must be included at the beginning of each source                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  file that uses the serial ports. The statement should                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  look like this: #include "serial_ports.h".                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  4) If you intend to use the C18 output stream functions,                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  A #include statement for the stdio.h header file must be                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  included at the beginning of each source file that calls                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  any of these functions. The statement should look like                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  this: #include <serial_ports.h>.                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  5) Init_Serial_Port_One() and/or Init_Serial_Port_Two()                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  must be called from the User_Initialization() function                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  located in the user_routines.c source file.                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  6) The interrupt handler(s) must be installed in the                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  InterruptHandlerLow() function located in the                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  user_routines_fast.c source file. See the accompanying                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  copy of user_routines_fast.c to see how this is done.                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  7) Decide what functionality you need and comment out the                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  #define ENABLE_SERIAL_PORT_xxx_yy entries in serial_ports.h               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  as necessary. As an example, if you only need to send data                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  using serial port one and would like to reclaim the resources             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  used by serial port two and serial port one's receiver                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  source code, the top of the serial_ports.h file would look                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  like this:                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  // comment out the next line to disable all serial port one               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  // receive functionality                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  // #define ENABLE_SERIAL_PORT_ONE_RX                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  // comment out the next line to disable all serial port one               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  // transmit functionality                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  #define ENABLE_SERIAL_PORT_ONE_TX                                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  // comment out the next line to disable all serial port two               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  // receive functionality                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  // #define ENABLE_SERIAL_PORT_TWO_RX                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  // comment out the next line to disable all serial port two               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  // transmit functionality                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  // #define ENABLE_SERIAL_PORT_TWO_TX                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  By default, both serial ports and their respective receive                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  and transmit sections are enabled.                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  8) As the default output device for C18's output stream                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  functions is the null device, you'll presumably want to                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  change the value of stdout_serial_port to "SERIAL_PORT_ONE"               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  or "SERIAL_PORT_TWO" if you want to see printf()'s output.                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  User_Initialization() is a good place to do this.                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  9) To support terminal emulation software, \r\n should                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  be used instead of just \n in the printf() format string.                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				This serial port driver can send output stream data to either               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				of the serial ports by setting the value of the global variable             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				stdout_serial_port before calling output stream	functions like              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				printf(). Setting the value	to "SERIAL_PORT_ONE" will send the              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				output to serial port one. Likewise, setting the value to                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				"SERIAL_PORT_TWO" will send the output to serial port two.                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				Setting the value to "NUL" will send the output to the null                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				device, meaning that the output is sent	nowhere. These values               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				are #define'd in serial_ports.h. As an example,                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  stdout_serial_port = SERIAL_PORT_ONE;                                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  printf("Kernighan");                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  stdout_serial_port = NUL;                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  printf("and");                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  stdout_serial_port = SERIAL_PORT_TWO;                                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				  printf("Ritchie");                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				will send the text "Kernighan" to the peripheral device attached            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				to serial port one, the text "Ritchie" to the device attached to            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				serial port two and the text "and" won't be sent anywhere.                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				By default, output is sent to the null device, which is the only            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				output device guaranteed to be present.                                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				You are free to use this source code for any non-commercial                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				use. Please do not make copies of this source code, modified                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				or un-modified, publicly available on the internet or                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				elsewhere without permission. Thanks.                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *				Copyright ©2004-2007 R. Kevin Watson. All rights are reserved.              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *		                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           ******************************************************************************** C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	CHANGE LOG:                                                                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	DATE         REV  DESCRIPTION                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	-----------  ---  ----------------------------------------------------------   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	22-Dec-2004  0.1  RKW - Original code.                                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	28-Dec-2004  0.2  RKW - Using preprocessor directives, added the ability       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	                  to enable/disable individual serial port receive and         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	                  transmit code. Updated documentation.                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	05-Feb-2005  0.3  RKW - Added _user_putc() interface to C18's new output       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	                  stream capabilities. Updated documentation.                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	05-Jan-2006  0.4  RKW - Partial port to 18F8722. Updated documentation.        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	10-Jan-2006  0.4  RKW - Modified the #pragma interruptlow line to also         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	                  save the .tmpdata section.                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #include <p18f8722.h>                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #include <stdio.h>                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #include "serial_ports.h"                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           // by default stdout stream output is sent to the null device,                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           // which is the only device guaranteed to be present.                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           unsigned char stdout_serial_port = NUL;                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           //                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           // Serial Port 1 Receive Variables:                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           //                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_ONE_RX                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char Rx_1_Queue[RX_1_QUEUE_SIZE];	// serial port 1's receive circular queue C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char Rx_1_Queue_Full = FALSE;		// flag that indicates that serial port 1's C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// receive circular queue is full and cannot                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// accept any more data                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           unsigned char Rx_1_Queue_Empty = TRUE;				// flag that indicates that there is no more  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// data present in serial port 1's receive                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// circular queue                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           unsigned char Rx_1_Queue_Read_Index = 0;			// read index into serial port 1's receive C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// circular queue                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char Rx_1_Queue_Write_Index = 0;	// write index into serial port 1's receive C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// circular queue                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char Rx_1_Queue_Byte_Count = 0;	// number of bytes in serial port 1's receive C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// circular queue                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char RX_1_Overrun_Errors = 0;		// number of overrun errors that have occurred C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// in serial port 1's receive circuitry since                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// the last reset                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char RX_1_Framing_Errors = 0;		// number of framing errors that have occurred C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// in serial port 1's receive circuitry since                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// the last reset                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           //                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           // Serial Port 1 Transmit Variables:                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           //                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_ONE_TX                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char Tx_1_Queue[TX_1_QUEUE_SIZE];	// serial port 1's transmit circular queue C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char Tx_1_Queue_Full = FALSE;		// flag that indicates that serial port 1's C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// transmit circular queue is full and cannot                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// accept any more data                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char Tx_1_Queue_Empty = TRUE;		// flag that indicates that there is no more  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// data to send in serial port 1's transmit                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// circular queue                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char Tx_1_Queue_Read_Index = 0;	// read index into serial port 1's transmit C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// circular queue                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           unsigned char Tx_1_Queue_Write_Index = 0;			// write index into serial port 1's transmit C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// circular queue                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char Tx_1_Queue_Byte_Count = 0;	// number of bytes in serial port 1's transmit C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// circular queue                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           //                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           // Serial Port 2 Receive Variables:                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           //                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_TWO_RX                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char Rx_2_Queue[RX_2_QUEUE_SIZE];	// serial port 2's receive circular queue C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char Rx_2_Queue_Full = FALSE;		// flag that indicates that serial port 2's C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// receive circular queue is full and cannot                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// accept any more data                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           unsigned char Rx_2_Queue_Empty = TRUE;				// flag that indicates that there is no more  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// data present in serial port 2's receive                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// circular queue                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           unsigned char Rx_2_Queue_Read_Index = 0;			// read index into serial port 2's receive C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// circular queue                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char Rx_2_Queue_Write_Index = 0;	// write index into serial port 2's receive C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// circular queue                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char Rx_2_Queue_Byte_Count = 0;	// number of bytes in serial port 2's receive C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// circular queue                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char RX_2_Overrun_Errors = 0;		// number of overrun errors that have occurred C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// in serial port 2's receive circuitry since                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// the last reset                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char RX_2_Framing_Errors = 0;		// number of framing errors that have occurred C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// in serial port 2's receive circuitry since                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// the last reset                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           //                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           // Serial Port 2 Transmit Variables:                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           //                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_TWO_TX                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char Tx_2_Queue[TX_2_QUEUE_SIZE];	// serial port 2's transmit circular queue C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char Tx_2_Queue_Full = FALSE;		// flag that indicates that serial port 2's C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// transmit circular queue is full and cannot                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// accept any more data                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char Tx_2_Queue_Empty = TRUE;		// flag that indicates that there is no more  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// data to send in serial port 2's transmit                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// circular queue                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char Tx_2_Queue_Read_Index = 0;	// read index into serial port 2's transmit C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// circular queue                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           unsigned char Tx_2_Queue_Write_Index = 0;			// write index into serial port 2's transmit C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// circular queue                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           volatile unsigned char Tx_2_Queue_Byte_Count = 0;	// number of bytes in serial port 2's transmit C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           													// circular queue                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	FUNCTION:		Init_Serial_Port_One()                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PURPOSE:		Initializes serial port one for asynchronous operation               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	CALLED FROM:	user_routines.c/User_Initialization()                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	COMMENTS:		This function must be called before you try to use serial           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					port one.                                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					By default, this serial port is set to 115200 baud with                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					the transmitter and receiver enabled. This is the rate                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					IFI's terminal program expects.                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					The	serial port's baud rate is programmed by entering                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					a value into the SPBRG1 register and possibly changing                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					the value of the BRGH bit. Several example values are                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					included in the serial_ports.h file.                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					Numbers within brackets refer to the PIC18F8722	data                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					sheet page number where more information can be found.                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					This document can be found at microchip's website at                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					http://www.microchip.com or at the author's website at                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					http://www.kevin.org/frc                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_ONE_RX or ENABLE_SERIAL_PORT_ONE_TX                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					is #define'd in serial_ports.h                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           void Init_Serial_Port_One(void)                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// Start by initializing the serial port with code                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// common to receive and transmit functions                                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
00507a   0e15     MOVLW     0x15           	SPBRG1 = BAUD_115200;	// baud rate generator register [251]                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
00507c   6eaf     MOVWF     0xaf,0x0                                                                                        
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
00507e   84ac     BSF       0xac,0x2,0x0   	TXSTA1bits.BRGH = 1;	// high baud rate select bit (asynchronous mode only) [248] C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: low speed                                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: high speed                                                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
005080   9a9d     BCF       0x9d,0x5,0x0   	PIE1bits.RC1IE = 0;		// receive interrupt enable bit [127]                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: disables received data interrupt                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: enables received data interrupt                                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
005082   989d     BCF       0x9d,0x4,0x0   	PIE1bits.TX1IE = 0;		// transmit interrupt enable bit [127]                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: disables transmit register empty interrupt                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: enables transmit register empty interrupt                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
005084   98ac     BCF       0xac,0x4,0x0   	TXSTA1bits.SYNC = 0;	// USART mode select bit [248]                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: asynchronous mode                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: synchronous mode                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
005086   9eac     BCF       0xac,0x7,0x0   	TXSTA1bits.CSRC = 0;	// clock source select bit (synchronous mode only) [248]   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: Slave mode (clock generated by external source)                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: Master mode (clock generated internally from BRG)                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// if receive functionality is to be included in the                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// software build, include code that is specific to                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// initializing the receiver                                                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	#ifdef ENABLE_SERIAL_PORT_ONE_RX                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
005088   8e94     BSF       0x94,0x7,0x0   	TRISCbits.TRISC7 = 1;	// make sure the RC7/RX1/DT1 pin is configured as an input [140] C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
00508a   9cab     BCF       0xab,0x6,0x0   	RCSTA1bits.RX9 = 0;		// 9-bit receive enable bit [249]                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: 8-bit reception mode                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: 9-bit reception mode                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
00508c   96ab     BCF       0xab,0x3,0x0   	RCSTA1bits.ADDEN = 0;	// address detect enable bit (9-bit asynchronous mode only) [249] C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: disables address detection                                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: enables address detection                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
00508e   8aab     BSF       0xab,0x5,0x0   	RCSTA1bits.SREN = 1;	// single receive enable bit (master synchronous mode only) [249] C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: disables single receive mode                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: enables single receive mode                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
005090   88ab     BSF       0xab,0x4,0x0   	RCSTA1bits.CREN = 1;	// continuous receive mode enable bit [249]                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							// asynchronous mode:                                                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: disables receiver                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: enable receiver                                                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							// synchronous mode:                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: disables continuous receive                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: enables continuous receive until CREN is cleared                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
005092   9a9f     BCF       0x9f,0x5,0x0   	IPR1bits.RC1IP = 0;		// receive interrupt priority bit (must be 0 for IFI controllers) [130] C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: low-priority                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: high-priority                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
005094   8a9d     BSF       0x9d,0x5,0x0   	PIE1bits.RC1IE = 1;		// receive interrupt enable bit [127]                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: disables received data interrupt                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: enables received data interrupt                                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	#endif					//                                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// if transmit functionality is to be included in the                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// software build, include code that is specific to                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// initializing the serial port transmitter                                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	#ifdef ENABLE_SERIAL_PORT_ONE_TX                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
005096   0102     MOVLB     0x2            	stdout = _H_USER;		// use this driver for output stream functions               C:\code\2008\Mnemosyne - 2008\serial_ports.c
005098   69f9     SETF      0xf9,0x1                                                                                        
00509a   69fa     SETF      0xfa,0x1                                                                                        
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
00509c   9c94     BCF       0x94,0x6,0x0   	TRISCbits.TRISC6 = 0;	// make sure the RC6/TX1/CK1 pin is configured as an output [140] C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
00509e   9cac     BCF       0xac,0x6,0x0   	TXSTA1bits.TX9 = 0;		// 9-bit transmit enable bit [248]                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: 8-bit transmission mode                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: 9-bit transmission mode                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050a0   96ac     BCF       0xac,0x3,0x0   	TXSTA1bits.SENDB = 0;	// send break character bit [248]                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: Sync Break transmission completed                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: Send Sync Break on next transmission                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050a2   989f     BCF       0x9f,0x4,0x0   	IPR1bits.TX1IP = 0;		// transmit interrupt priority bit (must be 0 for IFI controllers) [130] C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: low-priority                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: high-priority                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050a4   889d     BSF       0x9d,0x4,0x0   	PIE1bits.TX1IE = 1;		// transmit interrupt enable bit [127]                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: disables transmit register empty interrupt                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: enables transmit register empty interrupt                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050a6   8aac     BSF       0xac,0x5,0x0   	TXSTA1bits.TXEN = 1;  	// Enable transmitter [248]                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: serial transmitter is disabled                                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: serial transmitter                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	#endif					//                                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// finally, turn on the serial port                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050a8   8eab     BSF       0xab,0x7,0x0   	RCSTA1bits.SPEN = 1;  	// Serial Port Enable [249]                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: serial port is disabled                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: serial port is enabled                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050aa   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	FUNCTION:		Init_Serial_Port_Two()                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PURPOSE:		Initializes serial port two for asynchronous operation               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	CALLED FROM:	user_routines.c/User_Initialization()                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	COMMENTS:		This function must be called before you try to use serial           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					port two.                                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					By default, this serial port is set to 9600 baud with                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					the transmitter and receiver enabled.                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					The	serial port's baud rate is programmed by entering                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					a value into the SPBRG2 register and possibly changing                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					the value of the BRGH bit. Several example values are                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					included in the serial_ports.h file.                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					Numbers within brackets refer to the PIC18F8722	data                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					sheet page number where more information can be found.                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					This document can be found at microchip's website at                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					http://www.microchip.com or at the author's website at                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					http://www.kevin.org/frc                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_TWO_RX or ENABLE_SERIAL_PORT_TWO_TX                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					is #define'd in serial_ports.h                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           void Init_Serial_Port_Two(void)                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// Start by initializing the serial port with code                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// common to receive and transmit functions                                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050ac   0e15     MOVLW     0x15           	SPBRG2 = BAUD_115200;	// baud rate generator register [251]                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050ae   6e6f     MOVWF     0x6f,0x0                                                                                        
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050b0   846c     BSF       0x6c,0x2,0x0   	TXSTA2bits.BRGH = 1;	// high baud rate select bit (asynchronous mode only) [248] C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: low speed                                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: high speed                                                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050b2   9aa3     BCF       0xa3,0x5,0x0   	PIE3bits.RC2IE = 0;		// receive interrupt enable bit [129]                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: disables received data interrupt                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: enables received data interrupt                                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050b4   98a3     BCF       0xa3,0x4,0x0   	PIE3bits.TX2IE = 0;		// transmit interrupt enable bit [129]                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: disables transmit register empty interrupt                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: enables transmit register empty interrupt                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050b6   986c     BCF       0x6c,0x4,0x0   	TXSTA2bits.SYNC = 0;	// USART mode select bit [248]                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: asynchronous mode                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: synchronous mode                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050b8   9e6c     BCF       0x6c,0x7,0x0   	TXSTA2bits.CSRC = 0;	// clock source select bit (synchronous mode only) [248]   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: Slave mode (clock generated by external source)                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: Master mode (clock generated internally from BRG)                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// if receive functionality is to be included in the                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// software build, include code that is specific to                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// initializing the receiver                                                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	#ifdef ENABLE_SERIAL_PORT_TWO_RX                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050ba   8498     BSF       0x98,0x2,0x0   	TRISGbits.TRISG2 = 1;	// make sure the RG2/RX2/DT2 pin is configured as an input [151] C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050bc   9c6b     BCF       0x6b,0x6,0x0   	RCSTA2bits.RX9 = 0;		// 9-bit receive enable bit [249]                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: 8-bit reception mode                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: 9-bit reception mode                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050be   966b     BCF       0x6b,0x3,0x0   	RCSTA2bits.ADDEN = 0;	// address detect enable bit (9-bit asynchronous mode only) [249] C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: disables address detection                                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: enables address detection                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050c0   8a6b     BSF       0x6b,0x5,0x0   	RCSTA2bits.SREN = 1;	// single receive enable bit (master synchronous mode only) [249] C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: disables single receive mode                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: enables single receive mode                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050c2   886b     BSF       0x6b,0x4,0x0   	RCSTA2bits.CREN = 1;	// continuous receive mode enable bit [249]                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							// asynchronous mode:                                                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: disables receiver                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: enable receiver                                                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							// synchronous mode:                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: disables continuous receive                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: enables continuous receive until CREN is cleared                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050c4   9aa5     BCF       0xa5,0x5,0x0   	IPR3bits.RC2IP = 0;		// receive interrupt priority bit (must be 0 for IFI controllers) [132] C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: low-priority                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: high-priority                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050c6   8aa3     BSF       0xa3,0x5,0x0   	PIE3bits.RC2IE = 1;		// receive interrupt enable bit [129]                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: disables received data interrupt                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: enables received data interrupt                                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	#endif					//                                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// if transmit functionality is to be included in the                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// software build, include code that is specific to                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// initializing the serial port transmitter                                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	#ifdef ENABLE_SERIAL_PORT_TWO_TX                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050c8   0102     MOVLB     0x2            	stdout = _H_USER;		// use this driver for output stream functions               C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050ca   69f9     SETF      0xf9,0x1                                                                                        
0050cc   69fa     SETF      0xfa,0x1                                                                                        
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050ce   9298     BCF       0x98,0x1,0x0   	TRISGbits.TRISG1 = 0;	// make sure the RG1/TX2/CK2 pin is configured as an output [151] C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050d0   9c6c     BCF       0x6c,0x6,0x0   	TXSTA2bits.TX9 = 0;		// 9-bit transmit enable bit [248]                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: 8-bit transmission mode                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: 9-bit transmission mode                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050d2   966c     BCF       0x6c,0x3,0x0   	TXSTA2bits.SENDB = 0;	// send break character bit [248]                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: Sync Break transmission completed                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: Send Sync Break on next transmission                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050d4   98a5     BCF       0xa5,0x4,0x0   	IPR3bits.TX2IP = 0;		// transmit interrupt priority bit (must be 0 for IFI controllers) [132] C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: low-priority                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: high-priority                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050d6   88a3     BSF       0xa3,0x4,0x0   	PIE3bits.TX2IE = 1;		// transmit interrupt enable bit [129]                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: disables transmit register empty interrupt                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: enables transmit register empty interrupt                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//                                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050d8   8a6c     BSF       0x6c,0x5,0x0   	TXSTA2bits.TXEN = 1;  	// Enable transmitter [248]                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: serial transmitter is disabled                                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: serial transmitter                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	#endif					//                                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// finally, turn on the serial port                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050da   8e6b     BSF       0x6b,0x7,0x0   	RCSTA2bits.SPEN = 1;  	// Serial Port Enable [249]                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  0: serial port is disabled                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           							//  1: serial port is enabled                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050dc   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	FUNCTION:		Serial_Port_One_Byte_Count()                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PURPOSE:		Returns the number of bytes in serial port                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					ones's received data queue.		                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PARAMETERS:		none                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	RETURNS:		unsigned char                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	COMMENTS:		This function must be called to determine how much data,            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					if any, is present in serial port one's received data                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					queue. If the returned number is greater than zero, then                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					a call to Read_Serial_Port_One() can be made to retrieve                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					the next byte.                                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_ONE_RX is #define'd in serial_ports.h                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_ONE_RX                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050de   cfd9     MOVFF     0xfd9,0xfe6    unsigned char Serial_Port_One_Byte_Count(void)                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050e0   ffe6                                                                                                               
0050e2   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0050e4   ffd9                                                                                                               
0050e6   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	unsigned char temp;                                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// since we're about to use the Rx_1_Queue_Byte_Count variable,                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// which can also be modified in the interrupt service routine,                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// let's briefly disable the serial port interrupt to make sure                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// that Rx_1_Queue_Byte_Count doesn't get altered while we're                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// using it.                                                                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050e8   9a9d     BCF       0x9d,0x5,0x0   	PIE1bits.RC1IE = 0;                                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// now we can get a local copy of the byte count without fear                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// that we'll get corrupted data                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050ea   c1e3     MOVFF     0x1e3,0xfdf    	temp = Rx_1_Queue_Byte_Count;                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050ec   ffdf                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// okay, we have a local copy of the byte count, so turn the                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// serial port interrupt back on.                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050ee   8a9d     BSF       0x9d,0x5,0x0   	PIE1bits.RC1IE = 1;                                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// return the byte count                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050f0   50df     MOVF      0xdf,0x0,0x0   	return(temp);                                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050f2   d000     BRA       0x50f4                                                                                          
0050f4   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050f6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0050f8   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0050fa   ffd9                                                                                                               
0050fc   0012     RETURN    0x0                                                                                             
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	FUNCTION:		Serial_Port_Two_Byte_Count()                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PURPOSE:		Returns the number of bytes in serial port                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					two's received data queue.		                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PARAMETERS:		none                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	RETURNS:		unsigned char                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	COMMENTS:		This function must be called to determine how much data,            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					if any, is present in serial port two's received data                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					queue. If the returned number is greater than zero, then                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					a call to Read_Serial_Port_Two() can be made to retrieve                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					the next byte.                                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_TWO_RX is #define'd in serial_ports.h                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_TWO_RX                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
0050fe   cfd9     MOVFF     0xfd9,0xfe6    unsigned char Serial_Port_Two_Byte_Count(void)                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
005100   ffe6                                                                                                               
005102   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
005104   ffd9                                                                                                               
005106   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	unsigned char temp;                                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// since we're about to use the Rx_1_Queue_Byte_Count variable,                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// which can also be modified in the interrupt service routine,                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// let's briefly disable the serial port interrupt to make sure                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// that Rx_1_Queue_Byte_Count doesn't get altered while we're                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// using it.                                                                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
005108   9aa3     BCF       0xa3,0x5,0x0   	PIE3bits.RC2IE = 0;                                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// now we can get a local copy of the byte count without fear                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// that we'll get corrupted data                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
00510a   c1ef     MOVFF     0x1ef,0xfdf    	temp = Rx_2_Queue_Byte_Count;                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
00510c   ffdf                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// okay, we have a local copy of the byte count, so turn the                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// serial port interrupt back on.                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
00510e   8aa3     BSF       0xa3,0x5,0x0   	PIE3bits.RC2IE = 1;                                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// return the byte count                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
005110   50df     MOVF      0xdf,0x0,0x0   	return(temp);                                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
005112   d000     BRA       0x5114                                                                                          
005114   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
005116   52e5     MOVF      0xe5,0x1,0x0                                                                                    
005118   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00511a   ffd9                                                                                                               
00511c   0012     RETURN    0x0                                                                                             
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	FUNCTION:		Read_Serial_Port_One()                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PURPOSE:		                                                                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PARAMETERS:		none                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	RETURNS:		unsigned char                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	COMMENTS:		This function will not be included in the build unless              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_ONE_RX is #define'd in serial_ports.h 		                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_ONE_RX                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
00511e   cfd9     MOVFF     0xfd9,0xfe6    unsigned char Read_Serial_Port_One(void)                                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
005120   ffe6                                                                                                               
005122   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
005124   ffd9                                                                                                               
005126   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	unsigned char byte;                                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
005128   0101     MOVLB     0x1            	if(Rx_1_Queue_Empty)                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
00512a   51e0     MOVF      0xe0,0x0,0x1                                                                                    
00512c   e003     BZ        0x5134                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// error: no data to read                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
00512e   0e00     MOVLW     0x0            		return(0);                                                                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
005130   d017     BRA       0x5160                                                                                          
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
005132   d016     BRA       0x5160         	else                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// get a byte from the circular queue and store it temporarily                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
005134   51e1     MOVF      0xe1,0x0,0x1   		byte = Rx_1_Queue[Rx_1_Queue_Read_Index];                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
005136   6aea     CLRF      0xea,0x0                                                                                        
005138   0f00     ADDLW     0x0                                                                                             
00513a   6ee9     MOVWF     0xe9,0x0                                                                                        
00513c   0e01     MOVLW     0x1                                                                                             
00513e   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
005140   cfef     MOVFF     0xfef,0xfdf                                                                                     
005142   ffdf                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// decrement the queue byte count                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
005144   07e3     DECF      0xe3,0x1,0x1   		Rx_1_Queue_Byte_Count--;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// increment the read pointer                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
005146   2be1     INCF      0xe1,0x1,0x1   		Rx_1_Queue_Read_Index++;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// If the index pointer overflowed, cut-off the high-order bit. Doing this     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// every time is quicker than checking for overflow every time with an if()    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// statement and only then occasionally setting it back to zero. For this      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// to work, the queue size must be a power of 2 (e.g., 16,32,64,128...).       C:\code\2008\Mnemosyne - 2008\serial_ports.c
005148   0e1f     MOVLW     0x1f           		Rx_1_Queue_Read_Index &= RX_1_QUEUE_INDEX_MASK;                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
00514a   17e1     ANDWF     0xe1,0x1,0x1                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// since we're about to use the Rx_1_Queue_Write_Index variable, which can     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// also be modified in the interrupt service routine, let's briefly disable    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// the serial port interrupt to make sure that Rx_1_Queue_Write_Index doesn't  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// get altered while we're using it.                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
00514c   9a9d     BCF       0x9d,0x5,0x0   		PIE1bits.RC1IE = 0;                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// is the circular queue now empty?                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
00514e   51e2     MOVF      0xe2,0x0,0x1   		if(Rx_1_Queue_Read_Index == Rx_1_Queue_Write_Index)                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
005150   5de1     SUBWF     0xe1,0x0,0x1                                                                                    
005152   e102     BNZ       0x5158                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
005154   0e01     MOVLW     0x1            			Rx_1_Queue_Empty = TRUE;                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
005156   6fe0     MOVWF     0xe0,0x1                                                                                        
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// okay, we're done using Rx_1_Queue_Write_Index, so turn the serial port      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// interrupt back on.                                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
005158   8a9d     BSF       0x9d,0x5,0x0   		PIE1bits.RC1IE = 1;                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                            		// Since we've just removed a byte to the queue, it can't possibly be full.   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// Again, this is quicker than using an if() statement every time              C:\code\2008\Mnemosyne - 2008\serial_ports.c
00515a   6bdf     CLRF      0xdf,0x1       		Rx_1_Queue_Full = FALSE;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// return the data                                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
00515c   50df     MOVF      0xdf,0x0,0x0   		return(byte);                                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
00515e   d000     BRA       0x5160                                                                                          
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
005160   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
005162   52e5     MOVF      0xe5,0x1,0x0                                                                                    
005164   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
005166   ffd9                                                                                                               
005168   0012     RETURN    0x0                                                                                             
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	FUNCTION:		Read_Serial_Port_Two()                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PURPOSE:		                                                                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PARAMETERS:		none                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	RETURNS:		unsigned char                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	COMMENTS:		This function will not be included in the build unless              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_TWO_RX is #define'd in serial_ports.h 		                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_TWO_RX                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
00516a   cfd9     MOVFF     0xfd9,0xfe6    unsigned char Read_Serial_Port_Two(void)                                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
00516c   ffe6                                                                                                               
00516e   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
005170   ffd9                                                                                                               
005172   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	unsigned char byte;                                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
005174   0101     MOVLB     0x1            	if(Rx_2_Queue_Empty)                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
005176   51ec     MOVF      0xec,0x0,0x1                                                                                    
005178   e003     BZ        0x5180                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// error: no data to read                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
00517a   0e00     MOVLW     0x0            		return(0);                                                                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
00517c   d017     BRA       0x51ac                                                                                          
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
00517e   d016     BRA       0x51ac         	else                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// get a byte from the circular queue and store it temporarily                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
005180   51ed     MOVF      0xed,0x0,0x1   		byte = Rx_2_Queue[Rx_2_Queue_Read_Index];                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
005182   6aea     CLRF      0xea,0x0                                                                                        
005184   0f40     ADDLW     0x40                                                                                            
005186   6ee9     MOVWF     0xe9,0x0                                                                                        
005188   0e01     MOVLW     0x1                                                                                             
00518a   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00518c   cfef     MOVFF     0xfef,0xfdf                                                                                     
00518e   ffdf                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// decrement the queue byte count                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
005190   07ef     DECF      0xef,0x1,0x1   		Rx_2_Queue_Byte_Count--;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// increment the read pointer                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
005192   2bed     INCF      0xed,0x1,0x1   		Rx_2_Queue_Read_Index++;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// If the index pointer overflowed, cut-off the high-order bit. Doing this     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// every time is quicker than checking for overflow every time with an if()    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// statement and only then occasionally setting it back to zero. For this      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// to work, the queue size must be a power of 2 (e.g., 16,32,64,128...).       C:\code\2008\Mnemosyne - 2008\serial_ports.c
005194   0e1f     MOVLW     0x1f           		Rx_2_Queue_Read_Index &= RX_2_QUEUE_INDEX_MASK;                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
005196   17ed     ANDWF     0xed,0x1,0x1                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// since we're about to use the Rx_2_Queue_Write_Index variable, which can     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// also be modified in the interrupt service routine, let's briefly disable    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// the serial port interrupt to make sure that Rx_2_Queue_Write_Index doesn't  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// get altered while we're using it.                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
005198   9aa3     BCF       0xa3,0x5,0x0   		PIE3bits.RC2IE = 0;                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// is the circular queue now empty?                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
00519a   51ee     MOVF      0xee,0x0,0x1   		if(Rx_2_Queue_Read_Index == Rx_2_Queue_Write_Index)                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
00519c   5ded     SUBWF     0xed,0x0,0x1                                                                                    
00519e   e102     BNZ       0x51a4                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051a0   0e01     MOVLW     0x1            			Rx_2_Queue_Empty = TRUE;                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051a2   6fec     MOVWF     0xec,0x1                                                                                        
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// okay, we're done using Rx_2_Queue_Write_Index, so turn the serial port      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// interrupt back on.                                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051a4   8aa3     BSF       0xa3,0x5,0x0   		PIE3bits.RC2IE = 1;                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                            		// Since we've just removed a byte to the queue, it can't possibly be full.   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// Again, this is quicker than using an if() statement every time              C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051a6   6beb     CLRF      0xeb,0x1       		Rx_2_Queue_Full = FALSE;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// return the data                                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051a8   50df     MOVF      0xdf,0x0,0x0   		return(byte);                                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051aa   d000     BRA       0x51ac                                                                                          
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051ac   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051ae   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0051b0   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0051b2   ffd9                                                                                                               
0051b4   0012     RETURN    0x0                                                                                             
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	FUNCTION:		Write_Serial_Port_One()                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PURPOSE:		Sends a byte of data using serial port one.                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PARAMETERS:		unsigned char                                                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	RETURNS:		nothing                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	COMMENTS:		If you don't initialize the serial port before calling              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					this function, the robot controller will stop functioning                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					and you'll get the much dreaded red-light-of-death. This                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					is because the while() statement below is waiting for the                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					transmit circuitry to send another byte, but if the serial                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					port hasn't been configured, nothing will be transmitted                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					and we'll be stuck in the while() loop.                                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_ONE_TX is #define'd in serial_ports.h                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_ONE_TX                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051b6   cfd9     MOVFF     0xfd9,0xfe6    void Write_Serial_Port_One(unsigned char byte)                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051b8   ffe6                                                                                                               
0051ba   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0051bc   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// if the queue is full, wait here until space is available                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051be   0101     MOVLB     0x1            	while(Tx_1_Queue_Full);                                                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051c0   51e6     MOVF      0xe6,0x0,0x1                                                                                    
0051c2   e001     BZ        0x51c6                                                                                          
0051c4   d7fc     BRA       0x51be                                                                                          
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// put the byte on the circular queue                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051c6   51e9     MOVF      0xe9,0x0,0x1   	Tx_1_Queue[Tx_1_Queue_Write_Index] = byte;                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051c8   6aea     CLRF      0xea,0x0                                                                                        
0051ca   0f20     ADDLW     0x20                                                                                            
0051cc   6ee9     MOVWF     0xe9,0x0                                                                                        
0051ce   0e01     MOVLW     0x1                                                                                             
0051d0   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0051d2   0efe     MOVLW     0xfe                                                                                            
0051d4   cfdb     MOVFF     0xfdb,0xfef                                                                                     
0051d6   ffef                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// increment the queue byte count                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051d8   2bea     INCF      0xea,0x1,0x1   	Tx_1_Queue_Byte_Count++;                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// increment the write pointer                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051da   2be9     INCF      0xe9,0x1,0x1   	Tx_1_Queue_Write_Index++;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// If the index pointer overflowed, cut-off the high-order bit. Doing this      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// every time is quicker than checking for overflow every time with an if()     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// statement and only then occasionally setting it back to zero. For this       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// to work, the queue size must be a power of 2 (e.g., 16,32,64,128...).        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051dc   0e1f     MOVLW     0x1f           	Tx_1_Queue_Write_Index &= TX_1_QUEUE_INDEX_MASK;                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051de   17e9     ANDWF     0xe9,0x1,0x1                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// since we're about to use the Tx_1_Queue_Write_Index variable, which can      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// also be modified in the interrupt service routine, let's briefly disable     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// the serial port interrupt to make sure that Tx_1_Queue_Write_Index doesn't   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// get altered while we're using it.                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051e0   989d     BCF       0x9d,0x4,0x0   	PIE1bits.TX1IE = 0;                                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// is the circular queue now full?                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051e2   51e9     MOVF      0xe9,0x0,0x1   	if(Tx_1_Queue_Read_Index == Tx_1_Queue_Write_Index)                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051e4   5de8     SUBWF     0xe8,0x0,0x1                                                                                    
0051e6   e102     BNZ       0x51ec                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051e8   0e01     MOVLW     0x1            		Tx_1_Queue_Full = TRUE;                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051ea   6fe6     MOVWF     0xe6,0x1                                                                                        
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// okay, we're done using Tx_Queue_Write_Index, so turn the serial port         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// interrupt back on.                                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051ec   889d     BSF       0x9d,0x4,0x0   	PIE1bits.TX1IE = 1;                                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// Since we've just added a byte to the queue, it can't possibly be empty.      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// Again, this is quicker than using an if() statement every time               C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051ee   6be7     CLRF      0xe7,0x1       	Tx_1_Queue_Empty = FALSE;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051f0   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051f2   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0051f4   ffd9                                                                                                               
0051f6   0012     RETURN    0x0                                                                                             
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	FUNCTION:		Write_Serial_Port_Two()                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PURPOSE:		Sends a byte of data using serial port two.                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PARAMETERS:		unsigned char                                                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	RETURNS:		nothing                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	COMMENTS:		If you don't initialize the serial port before calling              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					this function, the robot controller will stop functioning                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					and you'll get the much dreaded red-light-of-death. This                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					is because the while() statement below is waiting for the                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					transmit circuitry to send another byte, but if the serial                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					port hasn't been configured, nothing will be transmitted                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					and we'll be stuck in the while() loop.                                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_TWO_TX is #define'd in serial_ports.h                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_TWO_TX                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051f8   cfd9     MOVFF     0xfd9,0xfe6    void Write_Serial_Port_Two(unsigned char byte)                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
0051fa   ffe6                                                                                                               
0051fc   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0051fe   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// if the queue is full, wait here until space is available                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
005200   0101     MOVLB     0x1            	while(Tx_2_Queue_Full);                                                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
005202   51f2     MOVF      0xf2,0x0,0x1                                                                                    
005204   e001     BZ        0x5208                                                                                          
005206   d7fc     BRA       0x5200                                                                                          
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// put the byte on the circular queue                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
005208   51f5     MOVF      0xf5,0x0,0x1   	Tx_2_Queue[Tx_2_Queue_Write_Index] = byte;                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
00520a   6aea     CLRF      0xea,0x0                                                                                        
00520c   0f60     ADDLW     0x60                                                                                            
00520e   6ee9     MOVWF     0xe9,0x0                                                                                        
005210   0e01     MOVLW     0x1                                                                                             
005212   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
005214   0efe     MOVLW     0xfe                                                                                            
005216   cfdb     MOVFF     0xfdb,0xfef                                                                                     
005218   ffef                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// increment the queue byte count                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
00521a   2bf6     INCF      0xf6,0x1,0x1   	Tx_2_Queue_Byte_Count++;                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// increment the write pointer                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
00521c   2bf5     INCF      0xf5,0x1,0x1   	Tx_2_Queue_Write_Index++;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// If the index pointer overflowed, cut-off the high-order bit. Doing this      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// every time is quicker than checking for overflow every time with an if()     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// statement and only then occasionally setting it back to zero. For this       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// to work, the queue size must be a power of 2 (e.g., 16,32,64,128...).        C:\code\2008\Mnemosyne - 2008\serial_ports.c
00521e   0e1f     MOVLW     0x1f           	Tx_2_Queue_Write_Index &= TX_2_QUEUE_INDEX_MASK;                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
005220   17f5     ANDWF     0xf5,0x1,0x1                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// since we're about to use the Tx_2_Queue_Write_Index variable, which can      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// also be modified in the interrupt service routine, let's briefly disable     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// the serial port interrupt to make sure that Tx_2_Queue_Write_Index doesn't   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// get altered while we're using it.                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
005222   98a3     BCF       0xa3,0x4,0x0   	PIE3bits.TX2IE = 0;                                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// is the circular queue now full?                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
005224   51f5     MOVF      0xf5,0x0,0x1   	if(Tx_2_Queue_Read_Index == Tx_2_Queue_Write_Index)                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
005226   5df4     SUBWF     0xf4,0x0,0x1                                                                                    
005228   e102     BNZ       0x522e                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
00522a   0e01     MOVLW     0x1            		Tx_2_Queue_Full = TRUE;                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
00522c   6ff2     MOVWF     0xf2,0x1                                                                                        
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// okay, we're done using Tx_2_Queue_Write_Index, so turn the serial port       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// interrupt back on.                                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
00522e   88a3     BSF       0xa3,0x4,0x0   	PIE3bits.TX2IE = 1;                                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// Since we've just added a byte to the queue, it can't possibly be empty.      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	// Again, this is quicker than using an if() statement every time               C:\code\2008\Mnemosyne - 2008\serial_ports.c
005230   6bf3     CLRF      0xf3,0x1       	Tx_2_Queue_Empty = FALSE;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
005232   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
005234   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
005236   ffd9                                                                                                               
005238   0012     RETURN    0x0                                                                                             
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	FUNCTION:		Rx_1_Int_Handler()                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PURPOSE:		Serial port one new data interrupt handler.                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	CALLED FROM:	user_routines_fast()                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	COMMENTS:		If the interrupt handler was installed correctly, this              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					function will be called every time a new byte of data                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					is received by serial port one.                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_ONE_RX is #define'd in serial_ports.h		                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_ONE_RX                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           void Rx_1_Int_Handler(void)                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
00523a   0101     MOVLB     0x1            	if(Rx_1_Queue_Full)                                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
00523c   51df     MOVF      0xdf,0x0,0x1                                                                                    
00523e   e002     BZ        0x5244                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// just turn off the serial port interrupt if we can't store any more data.    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// the interrupt will be re-enabled within the Receive_Byte() function when    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// more data is read.                                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
005240   9a9d     BCF       0x9d,0x5,0x0   		PIE1bits.RC1IE = 0;                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
005242   d019     BRA       0x5276         	else                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// put the byte on the circular queue                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
005244   51e2     MOVF      0xe2,0x0,0x1   		Rx_1_Queue[Rx_1_Queue_Write_Index] = RCREG1;                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
005246   6aea     CLRF      0xea,0x0                                                                                        
005248   0f00     ADDLW     0x0                                                                                             
00524a   6ee9     MOVWF     0xe9,0x0                                                                                        
00524c   0e01     MOVLW     0x1                                                                                             
00524e   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
005250   cfae     MOVFF     0xfae,0xfef                                                                                     
005252   ffef                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// if the interrupt handler was disabled while data was being received,        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// data may have backed-up in the receiver circuitry, causing an overrun       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// condition. So let's check the OERR bit to see if this has happened          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// and if it has, we'll need to reset the serial port receiver circuitry       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// to get data flowing again.                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
005254   a2ab     BTFSS     0xab,0x1,0x0   		if(RCSTA1bits.OERR)                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
005256   d003     BRA       0x525e                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           			// reset by turning off the receiver circuitry, then...                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
005258   98ab     BCF       0xab,0x4,0x0   			RCSTA1bits.CREN = 0;                                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           			                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           			// ...turn it back on                                                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
00525a   88ab     BSF       0xab,0x4,0x0   			RCSTA1bits.CREN = 1;                                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           			// indicate that we've had an error                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
00525c   2be4     INCF      0xe4,0x1,0x1   			RX_1_Overrun_Errors++;                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// if incoming data gets misaligned and the receiver doesn't receive a         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// stop bit where it expects to detect it, the receiver circuitry will         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// set the FERR bit to indicate that it's received corrupted data. The         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// likely reason for this is an incorrectly set baud rate on either the        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// receiver or transmitter end.                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
00525e   b4ab     BTFSC     0xab,0x2,0x0   		if(RCSTA1bits.FERR)                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
005260   2be5     INCF      0xe5,0x1,0x1   			RX_1_Framing_Errors++;                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// increment the queue byte count                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
005262   2be3     INCF      0xe3,0x1,0x1   		Rx_1_Queue_Byte_Count++;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// increment the write pointer                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
005264   2be2     INCF      0xe2,0x1,0x1   		Rx_1_Queue_Write_Index++;                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// If the index pointer overflowed, cut-off the high-order bit. Doing this     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// every time is quicker than checking for overflow every time with an if()    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// statement and only then occasionally setting it back to zero. For this      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// to work, the queue size must be a power of 2 (e.g., 16,32,64,128...).       C:\code\2008\Mnemosyne - 2008\serial_ports.c
005266   0e1f     MOVLW     0x1f           		Rx_1_Queue_Write_Index &= RX_1_QUEUE_INDEX_MASK;                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
005268   17e2     ANDWF     0xe2,0x1,0x1                                                                                    
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// is the circular queue now full?                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
00526a   51e2     MOVF      0xe2,0x0,0x1   		if(Rx_1_Queue_Read_Index == Rx_1_Queue_Write_Index)                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
00526c   5de1     SUBWF     0xe1,0x0,0x1                                                                                    
00526e   e102     BNZ       0x5274                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
005270   0e01     MOVLW     0x1            			Rx_1_Queue_Full = TRUE;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
005272   6fdf     MOVWF     0xdf,0x1                                                                                        
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// Since we've just added a byte to the queue, it can't possibly be empty.     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// Again, this is quicker than using an if() statement every time              C:\code\2008\Mnemosyne - 2008\serial_ports.c
005274   6be0     CLRF      0xe0,0x1       		Rx_1_Queue_Empty = FALSE;                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
005276   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	FUNCTION:		Rx_2_Int_Handler()                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PURPOSE:		Serial port two new data interrupt handler.		                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	CALLED FROM:	user_routines_fast()                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	COMMENTS:		If the interrupt handler was installed correctly, this              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					function will be called every time a new byte of data                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					is received by serial port two.                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_TWO_RX is #define'd in serial_ports.h 		                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_TWO_RX                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           void Rx_2_Int_Handler(void)                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
005278   0101     MOVLB     0x1            	if(Rx_2_Queue_Full)                                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
00527a   51eb     MOVF      0xeb,0x0,0x1                                                                                    
00527c   e002     BZ        0x5282                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// just turn off the serial port interrupt if we can't store any more data.    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// the interrupt will be re-enabled within the Receive_Byte() function when    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// more data is read.                                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
00527e   9aa3     BCF       0xa3,0x5,0x0   		PIE3bits.RC2IE = 0;                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
005280   d019     BRA       0x52b4         	else                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// put the byte on the circular queue                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
005282   51ee     MOVF      0xee,0x0,0x1   		Rx_2_Queue[Rx_2_Queue_Write_Index] = RCREG2;                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
005284   6aea     CLRF      0xea,0x0                                                                                        
005286   0f40     ADDLW     0x40                                                                                            
005288   6ee9     MOVWF     0xe9,0x0                                                                                        
00528a   0e01     MOVLW     0x1                                                                                             
00528c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00528e   cf6e     MOVFF     0xf6e,0xfef                                                                                     
005290   ffef                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// if the interrupt handler was disabled while data was being received,        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// data may have backed-up in the receiver circuitry, causing an overrun       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// condition. So let's check the OERR bit to see if this has happened          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// and if it has, we'll need to reset the serial port receiver circuitry       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// to get data flowing again.                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
005292   a26b     BTFSS     0x6b,0x1,0x0   		if(RCSTA2bits.OERR)                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
005294   d003     BRA       0x529c                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           			// reset by turning off the receiver circuitry, then...                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
005296   986b     BCF       0x6b,0x4,0x0   			RCSTA2bits.CREN = 0;                                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           			                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           			// ...turn it back on                                                         C:\code\2008\Mnemosyne - 2008\serial_ports.c
005298   886b     BSF       0x6b,0x4,0x0   			RCSTA2bits.CREN = 1;                                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           			// indicate that we've had an error                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
00529a   2bf0     INCF      0xf0,0x1,0x1   			RX_2_Overrun_Errors++;                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// if incoming data gets misaligned and the receiver doesn't receive a         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// stop bit where it expects to detect it, the receiver circuitry will         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// set the FERR bit to indicate that it's received corrupted data. The         C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// likely reason for this is an incorrectly set baud rate on either the        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// receiver or transmitter end.                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
00529c   b46b     BTFSC     0x6b,0x2,0x0   		if(RCSTA2bits.FERR)                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
00529e   2bf1     INCF      0xf1,0x1,0x1   			RX_2_Framing_Errors++;                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// increment the queue byte count                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052a0   2bef     INCF      0xef,0x1,0x1   		Rx_2_Queue_Byte_Count++;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// increment the write pointer                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052a2   2bee     INCF      0xee,0x1,0x1   		Rx_2_Queue_Write_Index++;                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// If the index pointer overflowed, cut-off the high-order bit. Doing this     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// every time is quicker than checking for overflow every time with an if()    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// statement and only then occasionally setting it back to zero. For this      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// to work, the queue size must be a power of 2 (e.g., 16,32,64,128...).       C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052a4   0e1f     MOVLW     0x1f           		Rx_2_Queue_Write_Index &= RX_2_QUEUE_INDEX_MASK;                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052a6   17ee     ANDWF     0xee,0x1,0x1                                                                                    
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// is the circular queue now full?                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052a8   51ee     MOVF      0xee,0x0,0x1   		if(Rx_2_Queue_Read_Index == Rx_2_Queue_Write_Index)                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052aa   5ded     SUBWF     0xed,0x0,0x1                                                                                    
0052ac   e102     BNZ       0x52b2                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052ae   0e01     MOVLW     0x1            			Rx_2_Queue_Full = TRUE;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052b0   6feb     MOVWF     0xeb,0x1                                                                                        
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// Since we've just added a byte to the queue, it can't possibly be empty.     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// Again, this is quicker than using an if() statement every time              C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052b2   6bec     CLRF      0xec,0x1       		Rx_2_Queue_Empty = FALSE;                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052b4   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	FUNCTION:		Tx_1_Int_Handler()                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PURPOSE:		Serial port one empty transmit buffer interrupt handler.             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	CALLED FROM:	user_routines_fast()                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	COMMENTS:		If the interrupt handler was installed correctly, this              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					function will be called every time serial port one is                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					ready to start sending a byte of data.                                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_ONE_TX is #define'd in serial_ports.h 		                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_ONE_TX                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           void Tx_1_Int_Handler(void)                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052b6   0101     MOVLB     0x1            	if(Tx_1_Queue_Empty)                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052b8   51e7     MOVF      0xe7,0x0,0x1                                                                                    
0052ba   e002     BZ        0x52c0                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// just turn off the serial port interrupt if we don't have data to send.      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// the interrupt will be re-enabled within the Send_Byte() function when       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// more data is sent.                                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052bc   989d     BCF       0x9d,0x4,0x0   		PIE1bits.TX1IE = 0;                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052be   d012     BRA       0x52e4         	else                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// get a byte from the circular queue and send it to the USART                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052c0   51e8     MOVF      0xe8,0x0,0x1   		TXREG1 = Tx_1_Queue[Tx_1_Queue_Read_Index];                                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052c2   6aea     CLRF      0xea,0x0                                                                                        
0052c4   0f20     ADDLW     0x20                                                                                            
0052c6   6ee9     MOVWF     0xe9,0x0                                                                                        
0052c8   0e01     MOVLW     0x1                                                                                             
0052ca   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0052cc   50ef     MOVF      0xef,0x0,0x0                                                                                    
0052ce   6ead     MOVWF     0xad,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// decrement the queue byte count                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052d0   07ea     DECF      0xea,0x1,0x1   		Tx_1_Queue_Byte_Count--;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// increment the read pointer                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052d2   2be8     INCF      0xe8,0x1,0x1   		Tx_1_Queue_Read_Index++;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// If the index pointer overflowed, cut-off the high-order bit. Doing this     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// every time is quicker than checking for overflow every time with an if()    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// statement and only then occasionally setting it back to zero. For this      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// to work, the queue size must be a power of 2 (e.g., 16,32,64,128...).       C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052d4   0e1f     MOVLW     0x1f           		Tx_1_Queue_Read_Index &= TX_1_QUEUE_INDEX_MASK;                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052d6   17e8     ANDWF     0xe8,0x1,0x1                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// is the circular queue now empty?                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052d8   51e9     MOVF      0xe9,0x0,0x1   		if(Tx_1_Queue_Read_Index == Tx_1_Queue_Write_Index)                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052da   5de8     SUBWF     0xe8,0x0,0x1                                                                                    
0052dc   e102     BNZ       0x52e2                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052de   0e01     MOVLW     0x1            			Tx_1_Queue_Empty = TRUE;                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052e0   6fe7     MOVWF     0xe7,0x1                                                                                        
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                            		// Since we've just removed a byte from the queue, it can't possibly be full. C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// Again, this is quicker than using an if() statement every time              C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052e2   6be6     CLRF      0xe6,0x1       		Tx_1_Queue_Full = FALSE;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052e4   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	FUNCTION:		Tx_2_Int_Handler()                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PURPOSE:		Serial port two empty transmit buffer interrupt handler.		           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	CALLED FROM:	user_routines_fast()                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	COMMENTS:		If the interrupt handler was installed correctly, this              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					function will be called every time serial port two is                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					ready to start sending a byte of data.                                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_TWO_TX is #define'd in serial_ports.h 			               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_TWO_TX                                                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           void Tx_2_Int_Handler(void)                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052e6   0101     MOVLB     0x1            	if(Tx_2_Queue_Empty)                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052e8   51f3     MOVF      0xf3,0x0,0x1                                                                                    
0052ea   e002     BZ        0x52f0                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// just turn off the serial port interrupt if we don't have data to send.      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// the interrupt will be re-enabled within the Send_Byte() function when       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// more data is sent.                                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052ec   98a3     BCF       0xa3,0x4,0x0   		PIE3bits.TX2IE = 0;                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052ee   d012     BRA       0x5314         	else                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// get a byte from the circular queue and send it to the USART                 C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052f0   51f4     MOVF      0xf4,0x0,0x1   		TXREG2 = Tx_2_Queue[Tx_2_Queue_Read_Index];                                    C:\code\2008\Mnemosyne - 2008\serial_ports.c
0052f2   6aea     CLRF      0xea,0x0                                                                                        
0052f4   0f60     ADDLW     0x60                                                                                            
0052f6   6ee9     MOVWF     0xe9,0x0                                                                                        
0052f8   0e01     MOVLW     0x1                                                                                             
0052fa   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0052fc   50ef     MOVF      0xef,0x0,0x0                                                                                    
0052fe   6e6d     MOVWF     0x6d,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// decrement the queue byte count                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
005300   07f6     DECF      0xf6,0x1,0x1   		Tx_2_Queue_Byte_Count--;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// increment the read pointer                                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
005302   2bf4     INCF      0xf4,0x1,0x1   		Tx_2_Queue_Read_Index++;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// If the index pointer overflowed, cut-off the high-order bit. Doing this     C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// every time is quicker than checking for overflow every time with an if()    C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// statement and only then occasionally setting it back to zero. For this      C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// to work, the queue size must be a power of 2 (e.g., 16,32,64,128...).       C:\code\2008\Mnemosyne - 2008\serial_ports.c
005304   0e1f     MOVLW     0x1f           		Tx_2_Queue_Read_Index &= TX_2_QUEUE_INDEX_MASK;                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
005306   17f4     ANDWF     0xf4,0x1,0x1                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// is the circular queue now empty?                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
005308   51f5     MOVF      0xf5,0x0,0x1   		if(Tx_2_Queue_Read_Index == Tx_2_Queue_Write_Index)                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
00530a   5df4     SUBWF     0xf4,0x0,0x1                                                                                    
00530c   e102     BNZ       0x5312                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
00530e   0e01     MOVLW     0x1            			Tx_2_Queue_Empty = TRUE;                                                      C:\code\2008\Mnemosyne - 2008\serial_ports.c
005310   6ff3     MOVWF     0xf3,0x1                                                                                        
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                            		// Since we've just removed a byte from the queue, it can't possibly be full. C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// Again, this is quicker than using an if() statement every time              C:\code\2008\Mnemosyne - 2008\serial_ports.c
005312   6bf2     CLRF      0xf2,0x1       		Tx_2_Queue_Full = FALSE;                                                       C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
005314   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	FUNCTION:		_user_putc()                                                        C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PURPOSE:		putc() interface to C18 2.4 output stream functions		                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	CALLED FROM:                                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	PARAMETERS:		None                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	RETURNS:		Nothing                                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *	COMMENTS:			                                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\serial_ports.c
005316   cfd9     MOVFF     0xfd9,0xfe6    void _user_putc(unsigned char byte)                                              C:\code\2008\Mnemosyne - 2008\serial_ports.c
005318   ffe6                                                                                                               
00531a   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00531c   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
00531e   0101     MOVLB     0x1            	if(stdout_serial_port == NUL)                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
005320   51de     MOVF      0xde,0x0,0x1                                                                                    
005322   e101     BNZ       0x5326                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// send the data to the bit bucket                                             C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	#ifdef ENABLE_SERIAL_PORT_ONE_TX                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
005324   d010     BRA       0x5346         	else if(stdout_serial_port == SERIAL_PORT_ONE)                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
005326   05de     DECF      0xde,0x0,0x1                                                                                    
005328   e106     BNZ       0x5336                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// send the data to serial port one                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
00532a   0efe     MOVLW     0xfe           		Write_Serial_Port_One(byte);                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
00532c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00532e   ffe6                                                                                                               
005330   df42     RCALL     0x51b6                                                                                          
005332   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	#endif                                                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	#ifdef ENABLE_SERIAL_PORT_TWO_TX                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
005334   d008     BRA       0x5346         	else if(stdout_serial_port == SERIAL_PORT_TWO)                                  C:\code\2008\Mnemosyne - 2008\serial_ports.c
005336   0e02     MOVLW     0x2                                                                                             
005338   5dde     SUBWF     0xde,0x0,0x1                                                                                    
00533a   e105     BNZ       0x5346                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           		// send the data to serial port two                                            C:\code\2008\Mnemosyne - 2008\serial_ports.c
00533c   0efe     MOVLW     0xfe           		Write_Serial_Port_Two(byte);                                                   C:\code\2008\Mnemosyne - 2008\serial_ports.c
00533e   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
005340   ffe6                                                                                                               
005342   df5a     RCALL     0x51f8                                                                                          
005344   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\serial_ports.c
                                           	#endif                                                                          C:\code\2008\Mnemosyne - 2008\serial_ports.c
005346   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\serial_ports.c
005348   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00534a   ffd9                                                                                                               
00534c   0012     RETURN    0x0                                                                                             
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *	TITLE:		terminal.c                                                             C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *	VERSION:	0.2 (Beta)                                                            C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *	DATE:		21-Feb-2006                                                             C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *	AUTHOR:		R. Kevin Watson                                                       C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *				kevinw@jpl.nasa.gov                                                         C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *	COMMENTS:	You are free to use this source code for any non-commercial          C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *				use. Please do not make copies of this source code, modified                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *				or un-modified, publicly available on the internet or elsewhere             C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *				without permission. Thanks.                                                 C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *				Copyright ©2005-2007 R. Kevin Watson. All rights are reserved.              C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           ******************************************************************************** C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *	CHANGE LOG:                                                                    C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *	DATE         REV  DESCRIPTION                                                  C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *	-----------  ---  ----------------------------------------------------------   C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *	25-Nov-2005  0.1  RKW - Original code.                                         C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *	21-Feb-2006  0.2  RKW - Added "no camera data" diagnostic information.         C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\terminal.c
                                           #include <stdio.h>                                                               C:\code\2008\Mnemosyne - 2008\terminal.c
                                           #include "ifi_aliases.h"                                                         C:\code\2008\Mnemosyne - 2008\terminal.c
                                           #include "ifi_default.h"                                                         C:\code\2008\Mnemosyne - 2008\terminal.c
                                           #include "camera.h"                                                              C:\code\2008\Mnemosyne - 2008\terminal.c
                                           #include "tracking.h"                                                            C:\code\2008\Mnemosyne - 2008\terminal.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\terminal.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *	FUNCTION:		Tracking_Info_Terminal()                                            C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *	PURPOSE:		This function is designed to send tracking information               C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *					to a terminal attached to your robot controller's                          C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *					programming port.                                                          C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *	CALLED FROM:	user_routines.c/Process_Data_From_Master_uP()                     C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *	PARAMETERS:		none                                                              C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *	RETURNS:		nothing                                                              C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *	COMMENTS:		This code assumes that the terminal serial port is                  C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *					properly set in camera.h                                                   C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\terminal.c
                                           void Tracking_Info_Terminal(void)                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           	static unsigned char i = 0;                                                     C:\code\2008\Mnemosyne - 2008\terminal.c
                                           	static unsigned char j = 0;                                                     C:\code\2008\Mnemosyne - 2008\terminal.c
                                           	static unsigned int old_camera_t_packets = 0;                                   C:\code\2008\Mnemosyne - 2008\terminal.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\terminal.c
                                           	// has a new camera tracking packet arrived since we last checked?              C:\code\2008\Mnemosyne - 2008\terminal.c
0055b0   0102     MOVLB     0x2            	if(camera_t_packets != old_camera_t_packets)                                    C:\code\2008\Mnemosyne - 2008\terminal.c
0055b2   51ef     MOVF      0xef,0x0,0x1                                                                                    
0055b4   0102     MOVLB     0x2                                                                                             
0055b6   19da     XORWF     0xda,0x0,0x1                                                                                    
0055b8   e104     BNZ       0x55c2                                                                                          
0055ba   0102     MOVLB     0x2                                                                                             
0055bc   51f0     MOVF      0xf0,0x0,0x1                                                                                    
0055be   0102     MOVLB     0x2                                                                                             
0055c0   19db     XORWF     0xdb,0x0,0x1                                                                                    
0055c2   e101     BNZ       0x55c6                                                                                          
0055c4   d0f8     BRA       0x57b6                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\terminal.c
                                           		// increment the t-packet counter                                              C:\code\2008\Mnemosyne - 2008\terminal.c
0055c6   0102     MOVLB     0x2            		i++;                                                                           C:\code\2008\Mnemosyne - 2008\terminal.c
0055c8   2bed     INCF      0xed,0x1,0x1                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\terminal.c
                                           		// reset the "no camera data" loop counter                                     C:\code\2008\Mnemosyne - 2008\terminal.c
0055ca   6bee     CLRF      0xee,0x1       		j = 0;                                                                         C:\code\2008\Mnemosyne - 2008\terminal.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\terminal.c
                                           		// only show data on every twenty t-packets                                    C:\code\2008\Mnemosyne - 2008\terminal.c
0055cc   0e14     MOVLW     0x14           		if(i >= 20)                                                                    C:\code\2008\Mnemosyne - 2008\terminal.c
0055ce   5ded     SUBWF     0xed,0x0,0x1                                                                                    
0055d0   e201     BC        0x55d4                                                                                          
0055d2   d0f0     BRA       0x57b4                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\terminal.c
                                           			// reset the local t-packet counter                                           C:\code\2008\Mnemosyne - 2008\terminal.c
0055d4   6bed     CLRF      0xed,0x1       			i = 0;                                                                        C:\code\2008\Mnemosyne - 2008\terminal.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\terminal.c
                                           			// does the camera have a tracking solution?                                  C:\code\2008\Mnemosyne - 2008\terminal.c
0055d6   ec95     CALL      0x3d2a,0x0     			if(Get_Tracking_State() == SEARCHING)                                         C:\code\2008\Mnemosyne - 2008\terminal.c
0055d8   f01e                                                                                                               
0055da   0900     IORLW     0x0                                                                                             
0055dc   e111     BNZ       0x5600                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\terminal.c
0055de   0e0d     MOVLW     0xd            				printf("Searching...\r\n");                                                  C:\code\2008\Mnemosyne - 2008\terminal.c
0055e0   6e00     MOVWF     0x0,0x0                                                                                         
0055e2   0e54     MOVLW     0x54                                                                                            
0055e4   6e01     MOVWF     0x1,0x0                                                                                         
0055e6   6a02     CLRF      0x2,0x0                                                                                         
0055e8   c000     MOVFF     0x0,0xfe6                                                                                       
0055ea   ffe6                                                                                                               
0055ec   c001     MOVFF     0x1,0xfe6                                                                                       
0055ee   ffe6                                                                                                               
0055f0   c002     MOVFF     0x2,0xfe6                                                                                       
0055f2   ffe6                                                                                                               
0055f4   ec89     CALL      0x5d12,0x0                                                                                      
0055f6   f02e                                                                                                               
0055f8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0055fa   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0055fc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\terminal.c
0055fe   d0da     BRA       0x57b4         			else                                                                          C:\code\2008\Mnemosyne - 2008\terminal.c
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\terminal.c
005600   0e0a     MOVLW     0xa            				printf("\r\n");                                                              C:\code\2008\Mnemosyne - 2008\terminal.c
005602   6e00     MOVWF     0x0,0x0                                                                                         
005604   0e54     MOVLW     0x54                                                                                            
005606   6e01     MOVWF     0x1,0x0                                                                                         
005608   6a02     CLRF      0x2,0x0                                                                                         
00560a   c000     MOVFF     0x0,0xfe6                                                                                       
00560c   ffe6                                                                                                               
00560e   c001     MOVFF     0x1,0xfe6                                                                                       
005610   ffe6                                                                                                               
005612   c002     MOVFF     0x2,0xfe6                                                                                       
005614   ffe6                                                                                                               
005616   ec89     CALL      0x5d12,0x0                                                                                      
005618   f02e                                                                                                               
00561a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00561c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00561e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\terminal.c
                                           				// pan angle = ((current pan PWM) - (pan center PWM)) * degrees/pan PWM step C:\code\2008\Mnemosyne - 2008\terminal.c
005620   0102     MOVLB     0x2            				printf(" Pan Angle (degrees) = %d\r\n", (((int)PAN_SERVO - 124) * 65)/124);  C:\code\2008\Mnemosyne - 2008\terminal.c
005622   5104     MOVF      0x4,0x0,0x1                                                                                     
005624   6e00     MOVWF     0x0,0x0                                                                                         
005626   6a01     CLRF      0x1,0x0                                                                                         
005628   0e7c     MOVLW     0x7c                                                                                            
00562a   5e00     SUBWF     0x0,0x1,0x0                                                                                     
00562c   0e00     MOVLW     0x0                                                                                             
00562e   5a01     SUBWFB    0x1,0x1,0x0                                                                                     
005630   0e41     MOVLW     0x41                                                                                            
005632   0201     MULWF     0x1,0x0                                                                                         
005634   cff3     MOVFF     0xff3,0x1                                                                                       
005636   f001                                                                                                               
005638   0200     MULWF     0x0,0x0                                                                                         
00563a   cff3     MOVFF     0xff3,0x0                                                                                       
00563c   f000                                                                                                               
00563e   50f4     MOVF      0xf4,0x0,0x0                                                                                    
005640   2601     ADDWF     0x1,0x1,0x0                                                                                     
005642   0e7c     MOVLW     0x7c                                                                                            
005644   6e46     MOVWF     0x46,0x0                                                                                        
005646   6a47     CLRF      0x47,0x0                                                                                        
005648   c000     MOVFF     0x0,0x41                                                                                        
00564a   f041                                                                                                               
00564c   c001     MOVFF     0x1,0x42                                                                                        
00564e   f042                                                                                                               
005650   eccc     CALL      0x4398,0x0                                                                                      
005652   f021                                                                                                               
005654   c041     MOVFF     0x41,0x0                                                                                        
005656   f000                                                                                                               
005658   c042     MOVFF     0x42,0x1                                                                                        
00565a   f001                                                                                                               
00565c   c000     MOVFF     0x0,0xfe6                                                                                       
00565e   ffe6                                                                                                               
005660   c001     MOVFF     0x1,0xfe6                                                                                       
005662   ffe6                                                                                                               
005664   0eee     MOVLW     0xee                                                                                            
005666   6e02     MOVWF     0x2,0x0                                                                                         
005668   0e53     MOVLW     0x53                                                                                            
00566a   6e03     MOVWF     0x3,0x0                                                                                         
00566c   6a04     CLRF      0x4,0x0                                                                                         
00566e   c002     MOVFF     0x2,0xfe6                                                                                       
005670   ffe6                                                                                                               
005672   c003     MOVFF     0x3,0xfe6                                                                                       
005674   ffe6                                                                                                               
005676   c004     MOVFF     0x4,0xfe6                                                                                       
005678   ffe6                                                                                                               
00567a   ec89     CALL      0x5d12,0x0                                                                                      
00567c   f02e                                                                                                               
00567e   6ef5     MOVWF     0xf5,0x0                                                                                        
005680   0e05     MOVLW     0x5                                                                                             
005682   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
005684   50f5     MOVF      0xf5,0x0,0x0                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\terminal.c
                                           				// tilt angle = ((current tilt PWM) - (tilt center PWM)) * degrees/tilt PWM step C:\code\2008\Mnemosyne - 2008\terminal.c
005686   0102     MOVLB     0x2            				printf("Tilt Angle (degrees) = %d\r\n", (((int)TILT_SERVO - 144) * 25)/50);  C:\code\2008\Mnemosyne - 2008\terminal.c
005688   5105     MOVF      0x5,0x0,0x1                                                                                     
00568a   6e00     MOVWF     0x0,0x0                                                                                         
00568c   6a01     CLRF      0x1,0x0                                                                                         
00568e   0e90     MOVLW     0x90                                                                                            
005690   5e00     SUBWF     0x0,0x1,0x0                                                                                     
005692   0e00     MOVLW     0x0                                                                                             
005694   5a01     SUBWFB    0x1,0x1,0x0                                                                                     
005696   0e19     MOVLW     0x19                                                                                            
005698   0201     MULWF     0x1,0x0                                                                                         
00569a   cff3     MOVFF     0xff3,0x1                                                                                       
00569c   f001                                                                                                               
00569e   0200     MULWF     0x0,0x0                                                                                         
0056a0   cff3     MOVFF     0xff3,0x0                                                                                       
0056a2   f000                                                                                                               
0056a4   50f4     MOVF      0xf4,0x0,0x0                                                                                    
0056a6   2601     ADDWF     0x1,0x1,0x0                                                                                     
0056a8   0e32     MOVLW     0x32                                                                                            
0056aa   6e46     MOVWF     0x46,0x0                                                                                        
0056ac   6a47     CLRF      0x47,0x0                                                                                        
0056ae   c000     MOVFF     0x0,0x41                                                                                        
0056b0   f041                                                                                                               
0056b2   c001     MOVFF     0x1,0x42                                                                                        
0056b4   f042                                                                                                               
0056b6   eccc     CALL      0x4398,0x0                                                                                      
0056b8   f021                                                                                                               
0056ba   c041     MOVFF     0x41,0x0                                                                                        
0056bc   f000                                                                                                               
0056be   c042     MOVFF     0x42,0x1                                                                                        
0056c0   f001                                                                                                               
0056c2   c000     MOVFF     0x0,0xfe6                                                                                       
0056c4   ffe6                                                                                                               
0056c6   c001     MOVFF     0x1,0xfe6                                                                                       
0056c8   ffe6                                                                                                               
0056ca   0ed2     MOVLW     0xd2                                                                                            
0056cc   6e02     MOVWF     0x2,0x0                                                                                         
0056ce   0e53     MOVLW     0x53                                                                                            
0056d0   6e03     MOVWF     0x3,0x0                                                                                         
0056d2   6a04     CLRF      0x4,0x0                                                                                         
0056d4   c002     MOVFF     0x2,0xfe6                                                                                       
0056d6   ffe6                                                                                                               
0056d8   c003     MOVFF     0x3,0xfe6                                                                                       
0056da   ffe6                                                                                                               
0056dc   c004     MOVFF     0x4,0xfe6                                                                                       
0056de   ffe6                                                                                                               
0056e0   ec89     CALL      0x5d12,0x0                                                                                      
0056e2   f02e                                                                                                               
0056e4   6ef5     MOVWF     0xf5,0x0                                                                                        
0056e6   0e05     MOVLW     0x5                                                                                             
0056e8   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0056ea   50f5     MOVF      0xf5,0x0,0x0                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\terminal.c
0056ec   0102     MOVLB     0x2            				printf(" Pan Error (Pixels)  = %d\r\n", (int)T_Packet_Data.mx - PAN_TARGET_PIXEL_DEFAULT); C:\code\2008\Mnemosyne - 2008\terminal.c
0056ee   5141     MOVF      0x41,0x0,0x1                                                                                    
0056f0   6e00     MOVWF     0x0,0x0                                                                                         
0056f2   6a01     CLRF      0x1,0x0                                                                                         
0056f4   0e4f     MOVLW     0x4f                                                                                            
0056f6   5e00     SUBWF     0x0,0x1,0x0                                                                                     
0056f8   0e00     MOVLW     0x0                                                                                             
0056fa   5a01     SUBWFB    0x1,0x1,0x0                                                                                     
0056fc   c000     MOVFF     0x0,0xfe6                                                                                       
0056fe   ffe6                                                                                                               
005700   c001     MOVFF     0x1,0xfe6                                                                                       
005702   ffe6                                                                                                               
005704   0eb6     MOVLW     0xb6                                                                                            
005706   6e02     MOVWF     0x2,0x0                                                                                         
005708   0e53     MOVLW     0x53                                                                                            
00570a   6e03     MOVWF     0x3,0x0                                                                                         
00570c   6a04     CLRF      0x4,0x0                                                                                         
00570e   c002     MOVFF     0x2,0xfe6                                                                                       
005710   ffe6                                                                                                               
005712   c003     MOVFF     0x3,0xfe6                                                                                       
005714   ffe6                                                                                                               
005716   c004     MOVFF     0x4,0xfe6                                                                                       
005718   ffe6                                                                                                               
00571a   ec89     CALL      0x5d12,0x0                                                                                      
00571c   f02e                                                                                                               
00571e   6ef5     MOVWF     0xf5,0x0                                                                                        
005720   0e05     MOVLW     0x5                                                                                             
005722   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
005724   50f5     MOVF      0xf5,0x0,0x0                                                                                    
005726   0102     MOVLB     0x2            				printf("Tilt Error (Pixels)  = %d\r\n", (int)T_Packet_Data.my - TILT_TARGET_PIXEL_DEFAULT); C:\code\2008\Mnemosyne - 2008\terminal.c
005728   5142     MOVF      0x42,0x0,0x1                                                                                    
00572a   6e00     MOVWF     0x0,0x0                                                                                         
00572c   6a01     CLRF      0x1,0x0                                                                                         
00572e   0e77     MOVLW     0x77                                                                                            
005730   5e00     SUBWF     0x0,0x1,0x0                                                                                     
005732   0e00     MOVLW     0x0                                                                                             
005734   5a01     SUBWFB    0x1,0x1,0x0                                                                                     
005736   c000     MOVFF     0x0,0xfe6                                                                                       
005738   ffe6                                                                                                               
00573a   c001     MOVFF     0x1,0xfe6                                                                                       
00573c   ffe6                                                                                                               
00573e   0e9a     MOVLW     0x9a                                                                                            
005740   6e02     MOVWF     0x2,0x0                                                                                         
005742   0e53     MOVLW     0x53                                                                                            
005744   6e03     MOVWF     0x3,0x0                                                                                         
005746   6a04     CLRF      0x4,0x0                                                                                         
005748   c002     MOVFF     0x2,0xfe6                                                                                       
00574a   ffe6                                                                                                               
00574c   c003     MOVFF     0x3,0xfe6                                                                                       
00574e   ffe6                                                                                                               
005750   c004     MOVFF     0x4,0xfe6                                                                                       
005752   ffe6                                                                                                               
005754   ec89     CALL      0x5d12,0x0                                                                                      
005756   f02e                                                                                                               
005758   6ef5     MOVWF     0xf5,0x0                                                                                        
00575a   0e05     MOVLW     0x5                                                                                             
00575c   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
00575e   50f5     MOVF      0xf5,0x0,0x0                                                                                    
005760   0102     MOVLB     0x2            				printf(" Blob Size (Pixels)  = %u\r\n", (unsigned int)T_Packet_Data.pixels); C:\code\2008\Mnemosyne - 2008\terminal.c
005762   5147     MOVF      0x47,0x0,0x1                                                                                    
005764   6ee6     MOVWF     0xe6,0x0                                                                                        
005766   6ae6     CLRF      0xe6,0x0                                                                                        
005768   0e7e     MOVLW     0x7e                                                                                            
00576a   6e00     MOVWF     0x0,0x0                                                                                         
00576c   0e53     MOVLW     0x53                                                                                            
00576e   6e01     MOVWF     0x1,0x0                                                                                         
005770   6a02     CLRF      0x2,0x0                                                                                         
005772   c000     MOVFF     0x0,0xfe6                                                                                       
005774   ffe6                                                                                                               
005776   c001     MOVFF     0x1,0xfe6                                                                                       
005778   ffe6                                                                                                               
00577a   c002     MOVFF     0x2,0xfe6                                                                                       
00577c   ffe6                                                                                                               
00577e   ec89     CALL      0x5d12,0x0                                                                                      
005780   f02e                                                                                                               
005782   6ef5     MOVWF     0xf5,0x0                                                                                        
005784   0e05     MOVLW     0x5                                                                                             
005786   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
005788   50f5     MOVF      0xf5,0x0,0x0                                                                                    
00578a   0102     MOVLB     0x2            				printf("Confidence (Pixels)  = %u\r\n", (unsigned int)T_Packet_Data.confidence); C:\code\2008\Mnemosyne - 2008\terminal.c
00578c   5148     MOVF      0x48,0x0,0x1                                                                                    
00578e   6ee6     MOVWF     0xe6,0x0                                                                                        
005790   6ae6     CLRF      0xe6,0x0                                                                                        
005792   0e62     MOVLW     0x62                                                                                            
005794   6e00     MOVWF     0x0,0x0                                                                                         
005796   0e53     MOVLW     0x53                                                                                            
005798   6e01     MOVWF     0x1,0x0                                                                                         
00579a   6a02     CLRF      0x2,0x0                                                                                         
00579c   c000     MOVFF     0x0,0xfe6                                                                                       
00579e   ffe6                                                                                                               
0057a0   c001     MOVFF     0x1,0xfe6                                                                                       
0057a2   ffe6                                                                                                               
0057a4   c002     MOVFF     0x2,0xfe6                                                                                       
0057a6   ffe6                                                                                                               
0057a8   ec89     CALL      0x5d12,0x0                                                                                      
0057aa   f02e                                                                                                               
0057ac   6ef5     MOVWF     0xf5,0x0                                                                                        
0057ae   0e05     MOVLW     0x5                                                                                             
0057b0   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0057b2   50f5     MOVF      0xf5,0x0,0x0                                                                                    
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\terminal.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\terminal.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\terminal.c
0057b4   d016     BRA       0x57e2         	else                                                                            C:\code\2008\Mnemosyne - 2008\terminal.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\terminal.c
0057b6   0102     MOVLB     0x2            		j++;                                                                           C:\code\2008\Mnemosyne - 2008\terminal.c
0057b8   2bee     INCF      0xee,0x1,0x1                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\terminal.c
                                           		// display a "no camera data" warning if we haven't received                   C:\code\2008\Mnemosyne - 2008\terminal.c
                                           		// a t-packet in 26 loops, which is about 1 second                             C:\code\2008\Mnemosyne - 2008\terminal.c
0057ba   0e1a     MOVLW     0x1a           		if(j >= 26)                                                                    C:\code\2008\Mnemosyne - 2008\terminal.c
0057bc   5dee     SUBWF     0xee,0x0,0x1                                                                                    
0057be   e311     BNC       0x57e2                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\terminal.c
                                           			// reset the "no camera data" loop counter                                    C:\code\2008\Mnemosyne - 2008\terminal.c
0057c0   6bee     CLRF      0xee,0x1       			j = 0;                                                                        C:\code\2008\Mnemosyne - 2008\terminal.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\terminal.c
0057c2   0e4e     MOVLW     0x4e           			printf("No camera data...\r\n");                                              C:\code\2008\Mnemosyne - 2008\terminal.c
0057c4   6e00     MOVWF     0x0,0x0                                                                                         
0057c6   0e53     MOVLW     0x53                                                                                            
0057c8   6e01     MOVWF     0x1,0x0                                                                                         
0057ca   6a02     CLRF      0x2,0x0                                                                                         
0057cc   c000     MOVFF     0x0,0xfe6                                                                                       
0057ce   ffe6                                                                                                               
0057d0   c001     MOVFF     0x1,0xfe6                                                                                       
0057d2   ffe6                                                                                                               
0057d4   c002     MOVFF     0x2,0xfe6                                                                                       
0057d6   ffe6                                                                                                               
0057d8   ec89     CALL      0x5d12,0x0                                                                                      
0057da   f02e                                                                                                               
0057dc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0057de   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0057e0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\terminal.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\terminal.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\terminal.c
0057e2   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\terminal.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	TITLE:		tracking.c                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	VERSION:	0.2 (Beta)                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	DATE:		21-Feb-2006                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	AUTHOR:		R. Kevin Watson                                                       C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *				kevinw@jpl.nasa.gov                                                         C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	COMMENTS:	This is the "streamlined" version of tracking.c                      C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *				You are free to use this source code for any non-commercial                 C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *				use. Please do not make copies of this source code, modified                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *				or un-modified, publicly available on the internet or elsewhere             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *				without permission. Thanks.                                                 C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *				Copyright ©2005-2007 R. Kevin Watson. All rights are reserved.              C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           ******************************************************************************** C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	CHANGE LOG:                                                                    C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	DATE         REV  DESCRIPTION                                                  C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	-----------  ---  ----------------------------------------------------------   C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	01-Jan-2006  0.1  RKW - Original code.                                         C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	21-Feb-2006  0.2  RKW - Provided two new functions to set the pan and          C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	                  tilt servo position. This was done to provide a level        C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	                  of indirection so that the servos could be commanded         C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	                  from the robot controller or the CMUcam2.                    C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	                  RKW - Fixed bug in search initialization code where          C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	                  temp_pan_servo was initialized to zero instead of            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	                  Tracking_Config_Data.Pan_Min_PWM.                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	                  RKW - Altered tracking algorithm to use the t-packet         C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	                  confidence value to determine whether the code should        C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	                  track or search.                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	                  RKW - Added Get_Tracking_State() function, which can         C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	                  be used to determine if the camera is on target.             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\tracking.c
                                           #include <stdio.h>                                                               C:\code\2008\Mnemosyne - 2008\tracking.c
                                           #include "ifi_default.h"                                                         C:\code\2008\Mnemosyne - 2008\tracking.c
                                           #include "ifi_aliases.h"                                                         C:\code\2008\Mnemosyne - 2008\tracking.c
                                           #include "camera.h"                                                              C:\code\2008\Mnemosyne - 2008\tracking.c
                                           #include "tracking.h"                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           // This variable is used to signal whether or not the camera                     C:\code\2008\Mnemosyne - 2008\tracking.c
                                           // is pointed at the target. See Get_Tracking_State(), below.                    C:\code\2008\Mnemosyne - 2008\tracking.c
                                           unsigned char Tracking_State = STATE_SEARCHING;                                  C:\code\2008\Mnemosyne - 2008\tracking.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	FUNCTION:		Servo_Track()                                                       C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	PURPOSE:		This function reads data placed in the T_Packet_Data                 C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *					structure by the Camera_Handler() function and if new                      C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *					tracking data is available, attempts to keep the center                    C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *					of the tracked object in the center of the camera's                        C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *					image using two servos that drive a pan/tilt platform.                     C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *					If the camera doesn't have the object within it's field                    C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *					of view, this function will execute a search algorithm                     C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *					in an attempt to find the object.		                                        C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	CALLED FROM:	user_routines.c/Process_Data_From_Master_uP()                     C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	COMMENTS:		This version of the tracking code uses a proportional               C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *					feedback controller to track the object.                                   C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\tracking.c
0038ca   cfd9     MOVFF     0xfd9,0xfe6    void Servo_Track(void)                                                           C:\code\2008\Mnemosyne - 2008\tracking.c
0038cc   ffe6                                                                                                               
0038ce   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0038d0   ffd9                                                                                                               
0038d2   0e0a     MOVLW     0xa                                                                                             
0038d4   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           	static unsigned char Tracking_Initialized = 0;                                  C:\code\2008\Mnemosyne - 2008\tracking.c
                                           	static unsigned int old_camera_t_packets = 0;                                   C:\code\2008\Mnemosyne - 2008\tracking.c
                                           	static unsigned char new_search = 1;                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           	static unsigned char loop_count = 0;                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           	static unsigned char pan_servo_position;                                        C:\code\2008\Mnemosyne - 2008\tracking.c
                                           	static unsigned char tilt_servo_position;                                       C:\code\2008\Mnemosyne - 2008\tracking.c
                                           	int temp_pan_servo;                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           	int temp_tilt_servo;                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           	int servo_step;                                                                 C:\code\2008\Mnemosyne - 2008\tracking.c
                                           	int pan_error;                                                                  C:\code\2008\Mnemosyne - 2008\tracking.c
                                           	int tilt_error;                                                                 C:\code\2008\Mnemosyne - 2008\tracking.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           	// if needed, initialize the tracking code                                      C:\code\2008\Mnemosyne - 2008\tracking.c
0038d6   0102     MOVLB     0x2            	if(Tracking_Initialized == 0)                                                   C:\code\2008\Mnemosyne - 2008\tracking.c
0038d8   51e4     MOVF      0xe4,0x0,0x1                                                                                    
0038da   e10f     BNZ       0x38fa                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\tracking.c
0038dc   0e01     MOVLW     0x1            		Tracking_Initialized = 1;                                                      C:\code\2008\Mnemosyne - 2008\tracking.c
0038de   6fe4     MOVWF     0xe4,0x1                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           		// get center values for the servos                                            C:\code\2008\Mnemosyne - 2008\tracking.c
0038e0   0102     MOVLB     0x2            		pan_servo_position = PAN_CENTER_PWM_DEFAULT;                                   C:\code\2008\Mnemosyne - 2008\tracking.c
0038e2   0e7c     MOVLW     0x7c                                                                                            
0038e4   6ff7     MOVWF     0xf7,0x1                                                                                        
0038e6   0e90     MOVLW     0x90           		tilt_servo_position = TILT_CENTER_PWM_DEFAULT;                                 C:\code\2008\Mnemosyne - 2008\tracking.c
0038e8   6ff8     MOVWF     0xf8,0x1                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           		// command servos to center position                                           C:\code\2008\Mnemosyne - 2008\tracking.c
0038ea   c2f7     MOVFF     0x2f7,0xfe6    		Set_Pan_Servo_Position(pan_servo_position);                                    C:\code\2008\Mnemosyne - 2008\tracking.c
0038ec   ffe6                                                                                                               
0038ee   da39     RCALL     0x3d62                                                                                          
0038f0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0038f2   c2f8     MOVFF     0x2f8,0xfe6    		Set_Tilt_Servo_Position(tilt_servo_position);                                  C:\code\2008\Mnemosyne - 2008\tracking.c
0038f4   ffe6                                                                                                               
0038f6   da40     RCALL     0x3d78                                                                                          
0038f8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\tracking.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           	// Has a new camera t-packet arrived since we last checked?                     C:\code\2008\Mnemosyne - 2008\tracking.c
0038fa   0102     MOVLB     0x2            	if(camera_t_packets != old_camera_t_packets)                                    C:\code\2008\Mnemosyne - 2008\tracking.c
0038fc   51e5     MOVF      0xe5,0x0,0x1                                                                                    
0038fe   0102     MOVLB     0x2                                                                                             
003900   19da     XORWF     0xda,0x0,0x1                                                                                    
003902   e104     BNZ       0x390c                                                                                          
003904   0102     MOVLB     0x2                                                                                             
003906   51e6     MOVF      0xe6,0x0,0x1                                                                                    
003908   0102     MOVLB     0x2                                                                                             
00390a   19db     XORWF     0xdb,0x0,0x1                                                                                    
00390c   e101     BNZ       0x3910                                                                                          
00390e   d207     BRA       0x3d1e                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\tracking.c
003910   c2da     MOVFF     0x2da,0x2e5    		old_camera_t_packets = camera_t_packets;                                       C:\code\2008\Mnemosyne - 2008\tracking.c
003912   f2e5                                                                                                               
003914   c2db     MOVFF     0x2db,0x2e6                                                                                     
003916   f2e6                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           		// Reset the Tracking_State variable to indicate that                          C:\code\2008\Mnemosyne - 2008\tracking.c
                                           		// we're in the searching state. If it turns out the                           C:\code\2008\Mnemosyne - 2008\tracking.c
                                           		// target is in view, Tracking_State will be updated                           C:\code\2008\Mnemosyne - 2008\tracking.c
                                           		// to reflect this below.                                                      C:\code\2008\Mnemosyne - 2008\tracking.c
003918   0102     MOVLB     0x2            		Tracking_State = SEARCHING;                                                    C:\code\2008\Mnemosyne - 2008\tracking.c
00391a   6be3     CLRF      0xe3,0x1                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           		// Does the camera have a tracking solution? If so,                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           		// do we need to move the servos to keep the center                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           		// of the tracked object centered within the image?                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           		// If not, we need to drop down below to start or                              C:\code\2008\Mnemosyne - 2008\tracking.c
                                           		// continue a search.                                                          C:\code\2008\Mnemosyne - 2008\tracking.c
00391c   0e14     MOVLW     0x14           		if(T_Packet_Data.confidence >= CONFIDENCE_THRESHOLD_DEFAULT)                   C:\code\2008\Mnemosyne - 2008\tracking.c
00391e   0102     MOVLB     0x2                                                                                             
003920   5d48     SUBWF     0x48,0x0,0x1                                                                                    
003922   e201     BC        0x3926                                                                                          
003924   d176     BRA       0x3c12                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// if we're tracking, reset the search                                        C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// algorithm so that a new search pattern                                     C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// will start should we lose tracking lock                                    C:\code\2008\Mnemosyne - 2008\tracking.c
003926   0102     MOVLB     0x2            			new_search = 1;                                                               C:\code\2008\Mnemosyne - 2008\tracking.c
003928   0e01     MOVLW     0x1                                                                                             
00392a   6fe7     MOVWF     0xe7,0x1                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// update Tracking_State to indicate that the target                          C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// is at least in view of the camera                                          C:\code\2008\Mnemosyne - 2008\tracking.c
00392c   6fe3     MOVWF     0xe3,0x1       			Tracking_State = TARGET_IN_VIEW;                                              C:\code\2008\Mnemosyne - 2008\tracking.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			////////////////////////////////                                              C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			//                            //                                              C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			//	x-axis/pan tracking code  //                                               C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			//                            //                                              C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			////////////////////////////////                                              C:\code\2008\Mnemosyne - 2008\tracking.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// save the current pan servo PWM value into a local                          C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// integer variable so that we can detect and correct                         C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// underflow and overflow conditions before we update                         C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// the pan servo PWM value with a new value                                   C:\code\2008\Mnemosyne - 2008\tracking.c
00392e   0102     MOVLB     0x2            			temp_pan_servo = (int)pan_servo_position;                                     C:\code\2008\Mnemosyne - 2008\tracking.c
003930   51f7     MOVF      0xf7,0x0,0x1                                                                                    
003932   6ede     MOVWF     0xde,0x0                                                                                        
003934   6add     CLRF      0xdd,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// calculate how many image pixels we're away from the                        C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// vertical center line.                                                      C:\code\2008\Mnemosyne - 2008\tracking.c
003936   0102     MOVLB     0x2            			pan_error = (int)T_Packet_Data.mx - PAN_TARGET_PIXEL_DEFAULT;                 C:\code\2008\Mnemosyne - 2008\tracking.c
003938   5141     MOVF      0x41,0x0,0x1                                                                                    
00393a   6e00     MOVWF     0x0,0x0                                                                                         
00393c   6a01     CLRF      0x1,0x0                                                                                         
00393e   0e4f     MOVLW     0x4f                                                                                            
003940   5e00     SUBWF     0x0,0x1,0x0                                                                                     
003942   0e00     MOVLW     0x0                                                                                             
003944   5a01     SUBWFB    0x1,0x1,0x0                                                                                     
003946   0e06     MOVLW     0x6                                                                                             
003948   c000     MOVFF     0x0,0xfdb                                                                                       
00394a   ffdb                                                                                                               
00394c   0e07     MOVLW     0x7                                                                                             
00394e   c001     MOVFF     0x1,0xfdb                                                                                       
003950   ffdb                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// Are we too far to the left or right of the vertical                        C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// center line? If so, calculate how far we should step                       C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// the pan servo to reduce the error.                                         C:\code\2008\Mnemosyne - 2008\tracking.c
003952   0e06     MOVLW     0x6            			if(pan_error > PAN_ALLOWABLE_ERROR_DEFAULT)                                   C:\code\2008\Mnemosyne - 2008\tracking.c
003954   cfdb     MOVFF     0xfdb,0x0                                                                                       
003956   f000                                                                                                               
003958   0e07     MOVLW     0x7                                                                                             
00395a   cfdb     MOVFF     0xfdb,0x1                                                                                       
00395c   f001                                                                                                               
00395e   3401     RLCF      0x1,0x0,0x0                                                                                     
003960   e204     BC        0x396a                                                                                          
003962   5000     MOVF      0x0,0x0,0x0                                                                                     
003964   0806     SUBLW     0x6                                                                                             
003966   0e00     MOVLW     0x0                                                                                             
003968   5401     SUBFWB    0x1,0x0,0x0                                                                                     
00396a   e225     BC        0x39b6                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// calculate how far we need to step the pan servo                           C:\code\2008\Mnemosyne - 2008\tracking.c
00396c   0e03     MOVLW     0x3            				servo_step = pan_error / PAN_GAIN_DEFAULT;                                   C:\code\2008\Mnemosyne - 2008\tracking.c
00396e   6e00     MOVWF     0x0,0x0                                                                                         
003970   6a01     CLRF      0x1,0x0                                                                                         
003972   0e06     MOVLW     0x6                                                                                             
003974   cfdb     MOVFF     0xfdb,0x41                                                                                      
003976   f041                                                                                                               
003978   0e07     MOVLW     0x7                                                                                             
00397a   cfdb     MOVFF     0xfdb,0x42                                                                                      
00397c   f042                                                                                                               
00397e   c000     MOVFF     0x0,0x46                                                                                        
003980   f046                                                                                                               
003982   c001     MOVFF     0x1,0x47                                                                                        
003984   f047                                                                                                               
003986   eccc     CALL      0x4398,0x0                                                                                      
003988   f021                                                                                                               
00398a   0e04     MOVLW     0x4                                                                                             
00398c   c041     MOVFF     0x41,0xfdb                                                                                      
00398e   ffdb                                                                                                               
003990   0e05     MOVLW     0x5                                                                                             
003992   c042     MOVFF     0x42,0xfdb                                                                                      
003994   ffdb                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// Due to rounding error in the division calculation above,                  C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// the step may be calculated as zero, which will make it                    C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// impossible to converge on the target when pan_error is                    C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// smaller than PAN_GAIN_DEFAULT. To get around this problem,                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// we just test for the zero case and set the step size to one.              C:\code\2008\Mnemosyne - 2008\tracking.c
003996   50d9     MOVF      0xd9,0x0,0x0   				if(servo_step == 0)                                                          C:\code\2008\Mnemosyne - 2008\tracking.c
003998   0f04     ADDLW     0x4                                                                                             
00399a   6ee9     MOVWF     0xe9,0x0                                                                                        
00399c   cfda     MOVFF     0xfda,0xfea                                                                                     
00399e   ffea                                                                                                               
0039a0   50ee     MOVF      0xee,0x0,0x0                                                                                    
0039a2   10ed     IORWF     0xed,0x0,0x0                                                                                    
0039a4   e107     BNZ       0x39b4                                                                                          
                                           				{                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
0039a6   0e01     MOVLW     0x1            					servo_step = 1;                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
0039a8   6ef3     MOVWF     0xf3,0x0                                                                                        
0039aa   0e04     MOVLW     0x4                                                                                             
0039ac   cff3     MOVFF     0xff3,0xfdb                                                                                     
0039ae   ffdb                                                                                                               
0039b0   0e05     MOVLW     0x5                                                                                             
0039b2   6adb     CLRF      0xdb,0x0                                                                                        
                                           				}                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
0039b4   d037     BRA       0x3a24         			else if(pan_error < -1 * PAN_ALLOWABLE_ERROR_DEFAULT)                         C:\code\2008\Mnemosyne - 2008\tracking.c
0039b6   0e06     MOVLW     0x6                                                                                             
0039b8   cfdb     MOVFF     0xfdb,0x0                                                                                       
0039ba   f000                                                                                                               
0039bc   0e07     MOVLW     0x7                                                                                             
0039be   cfdb     MOVFF     0xfdb,0x1                                                                                       
0039c0   f001                                                                                                               
0039c2   80d8     BSF       0xd8,0x0,0x0                                                                                    
0039c4   5001     MOVF      0x1,0x0,0x0                                                                                     
0039c6   e704     BNN       0x39d0                                                                                          
0039c8   0efa     MOVLW     0xfa                                                                                            
0039ca   5c00     SUBWF     0x0,0x0,0x0                                                                                     
0039cc   0eff     MOVLW     0xff                                                                                            
0039ce   5801     SUBWFB    0x1,0x0,0x0                                                                                     
0039d0   e222     BC        0x3a16                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// calculate how far we need to step the pan servo                           C:\code\2008\Mnemosyne - 2008\tracking.c
0039d2   0e03     MOVLW     0x3            				servo_step = pan_error / PAN_GAIN_DEFAULT;                                   C:\code\2008\Mnemosyne - 2008\tracking.c
0039d4   6e00     MOVWF     0x0,0x0                                                                                         
0039d6   6a01     CLRF      0x1,0x0                                                                                         
0039d8   0e06     MOVLW     0x6                                                                                             
0039da   cfdb     MOVFF     0xfdb,0x41                                                                                      
0039dc   f041                                                                                                               
0039de   0e07     MOVLW     0x7                                                                                             
0039e0   cfdb     MOVFF     0xfdb,0x42                                                                                      
0039e2   f042                                                                                                               
0039e4   c000     MOVFF     0x0,0x46                                                                                        
0039e6   f046                                                                                                               
0039e8   c001     MOVFF     0x1,0x47                                                                                        
0039ea   f047                                                                                                               
0039ec   eccc     CALL      0x4398,0x0                                                                                      
0039ee   f021                                                                                                               
0039f0   0e04     MOVLW     0x4                                                                                             
0039f2   c041     MOVFF     0x41,0xfdb                                                                                      
0039f4   ffdb                                                                                                               
0039f6   0e05     MOVLW     0x5                                                                                             
0039f8   c042     MOVFF     0x42,0xfdb                                                                                      
0039fa   ffdb                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// Due to rounding error in the division calculation above,                  C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// the step may be calculated as zero, which will make it                    C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// impossible to converge on the target when pan_error is                    C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// smaller than PAN_GAIN_DEFAULT. To get around this problem,                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// we just test for the zero case and set the step size to one               C:\code\2008\Mnemosyne - 2008\tracking.c
0039fc   50d9     MOVF      0xd9,0x0,0x0   				if(servo_step == 0)                                                          C:\code\2008\Mnemosyne - 2008\tracking.c
0039fe   0f04     ADDLW     0x4                                                                                             
003a00   6ee9     MOVWF     0xe9,0x0                                                                                        
003a02   cfda     MOVFF     0xfda,0xfea                                                                                     
003a04   ffea                                                                                                               
003a06   50ee     MOVF      0xee,0x0,0x0                                                                                    
003a08   10ed     IORWF     0xed,0x0,0x0                                                                                    
003a0a   e104     BNZ       0x3a14                                                                                          
                                           				{                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
003a0c   0e04     MOVLW     0x4            					servo_step = -1;                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
003a0e   68db     SETF      0xdb,0x0                                                                                        
003a10   0e05     MOVLW     0x5                                                                                             
003a12   68db     SETF      0xdb,0x0                                                                                        
                                           				}                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
003a14   d007     BRA       0x3a24         			else                                                                          C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// if we've fallen through to here, it means that we're                      C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// neither too far to the left or too far to the right                       C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// of the vertical center line of the image and don't                        C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// need to move the servo                                                    C:\code\2008\Mnemosyne - 2008\tracking.c
003a16   0e04     MOVLW     0x4            				servo_step = 0;                                                              C:\code\2008\Mnemosyne - 2008\tracking.c
003a18   6adb     CLRF      0xdb,0x0                                                                                        
003a1a   0e05     MOVLW     0x5                                                                                             
003a1c   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// signal that the pan servo is on target                                    C:\code\2008\Mnemosyne - 2008\tracking.c
003a1e   0e02     MOVLW     0x2            				Tracking_State += STATE_PAN_ON_TARGET;                                       C:\code\2008\Mnemosyne - 2008\tracking.c
003a20   0102     MOVLB     0x2                                                                                             
003a22   27e3     ADDWF     0xe3,0x1,0x1                                                                                    
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// add the step to the current servo position, taking into                    C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// account the direction set by the user in tracking.h                        C:\code\2008\Mnemosyne - 2008\tracking.c
003a24   6841     SETF      0x41,0x0       			temp_pan_servo += (PAN_ROTATION_SIGN_DEFAULT * servo_step);                   C:\code\2008\Mnemosyne - 2008\tracking.c
003a26   6842     SETF      0x42,0x0                                                                                        
003a28   0e04     MOVLW     0x4                                                                                             
003a2a   cfdb     MOVFF     0xfdb,0x46                                                                                      
003a2c   f046                                                                                                               
003a2e   0e05     MOVLW     0x5                                                                                             
003a30   cfdb     MOVFF     0xfdb,0x47                                                                                      
003a32   f047                                                                                                               
003a34   ec26     CALL      0x444c,0x0                                                                                      
003a36   f022                                                                                                               
003a38   c03f     MOVFF     0x3f,0x0                                                                                        
003a3a   f000                                                                                                               
003a3c   c040     MOVFF     0x40,0x1                                                                                        
003a3e   f001                                                                                                               
003a40   cfd9     MOVFF     0xfd9,0xfe9                                                                                     
003a42   ffe9                                                                                                               
003a44   cfda     MOVFF     0xfda,0xfea                                                                                     
003a46   ffea                                                                                                               
003a48   5000     MOVF      0x0,0x0,0x0                                                                                     
003a4a   26ee     ADDWF     0xee,0x1,0x0                                                                                    
003a4c   5001     MOVF      0x1,0x0,0x0                                                                                     
003a4e   22ed     ADDWFC    0xed,0x1,0x0                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// check the pan servo PWM value for under/overflow                           C:\code\2008\Mnemosyne - 2008\tracking.c
003a50   cfde     MOVFF     0xfde,0x0      			if(temp_pan_servo < PAN_MIN_PWM_DEFAULT)                                      C:\code\2008\Mnemosyne - 2008\tracking.c
003a52   f000                                                                                                               
003a54   cfdd     MOVFF     0xfdd,0x1                                                                                       
003a56   f001                                                                                                               
003a58   0100     MOVLB     0x0                                                                                             
003a5a   0e80     MOVLW     0x80                                                                                            
003a5c   1401     ANDWF     0x1,0x0,0x0                                                                                     
003a5e   e003     BZ        0x3a66                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
003a60   6ade     CLRF      0xde,0x0       				temp_pan_servo = PAN_MIN_PWM_DEFAULT;                                        C:\code\2008\Mnemosyne - 2008\tracking.c
003a62   6add     CLRF      0xdd,0x0                                                                                        
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
003a64   d00e     BRA       0x3a82         			else if(temp_pan_servo > PAN_MAX_PWM_DEFAULT)                                 C:\code\2008\Mnemosyne - 2008\tracking.c
003a66   cfde     MOVFF     0xfde,0x0                                                                                       
003a68   f000                                                                                                               
003a6a   cfdd     MOVFF     0xfdd,0x1                                                                                       
003a6c   f001                                                                                                               
003a6e   3401     RLCF      0x1,0x0,0x0                                                                                     
003a70   e204     BC        0x3a7a                                                                                          
003a72   5000     MOVF      0x0,0x0,0x0                                                                                     
003a74   08f8     SUBLW     0xf8                                                                                            
003a76   0e00     MOVLW     0x0                                                                                             
003a78   5401     SUBFWB    0x1,0x0,0x0                                                                                     
003a7a   e203     BC        0x3a82                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
003a7c   0ef8     MOVLW     0xf8           				temp_pan_servo = PAN_MAX_PWM_DEFAULT;                                        C:\code\2008\Mnemosyne - 2008\tracking.c
003a7e   6ede     MOVWF     0xde,0x0                                                                                        
003a80   6add     CLRF      0xdd,0x0                                                                                        
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
003a82   cfdf     MOVFF     0xfdf,0x2f7    			pan_servo_position = (unsigned char)temp_pan_servo;                           C:\code\2008\Mnemosyne - 2008\tracking.c
003a84   f2f7                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// update pan servo PWM value                                                 C:\code\2008\Mnemosyne - 2008\tracking.c
003a86   c2f7     MOVFF     0x2f7,0xfe6    			Set_Pan_Servo_Position(pan_servo_position);                                   C:\code\2008\Mnemosyne - 2008\tracking.c
003a88   ffe6                                                                                                               
003a8a   d96b     RCALL     0x3d62                                                                                          
003a8c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			/////////////////////////////////                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			//                             //                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			//	y-axis/tilt tracking code  //                                              C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			//                             //                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			/////////////////////////////////                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// save the current tilt servo PWM value into a local                         C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// integer variable so that we can detect and correct                         C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// underflow and overflow conditions before we update                         C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// the tilt servo PWM value with a new value                                  C:\code\2008\Mnemosyne - 2008\tracking.c
003a8e   0102     MOVLB     0x2            			temp_tilt_servo = (int)tilt_servo_position;                                   C:\code\2008\Mnemosyne - 2008\tracking.c
003a90   51f8     MOVF      0xf8,0x0,0x1                                                                                    
003a92   6ee6     MOVWF     0xe6,0x0                                                                                        
003a94   50d9     MOVF      0xd9,0x0,0x0                                                                                    
003a96   0f02     ADDLW     0x2                                                                                             
003a98   6ee9     MOVWF     0xe9,0x0                                                                                        
003a9a   cfda     MOVFF     0xfda,0xfea                                                                                     
003a9c   ffea                                                                                                               
003a9e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003aa0   50e7     MOVF      0xe7,0x0,0x0                                                                                    
003aa2   6eee     MOVWF     0xee,0x0                                                                                        
003aa4   6aed     CLRF      0xed,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// calculate how many image pixels we're away from the                        C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// horizontal center line.                                                    C:\code\2008\Mnemosyne - 2008\tracking.c
003aa6   0102     MOVLB     0x2            			tilt_error = (int)T_Packet_Data.my - TILT_TARGET_PIXEL_DEFAULT;               C:\code\2008\Mnemosyne - 2008\tracking.c
003aa8   5142     MOVF      0x42,0x0,0x1                                                                                    
003aaa   6e00     MOVWF     0x0,0x0                                                                                         
003aac   6a01     CLRF      0x1,0x0                                                                                         
003aae   0e77     MOVLW     0x77                                                                                            
003ab0   5e00     SUBWF     0x0,0x1,0x0                                                                                     
003ab2   0e00     MOVLW     0x0                                                                                             
003ab4   5a01     SUBWFB    0x1,0x1,0x0                                                                                     
003ab6   0e08     MOVLW     0x8                                                                                             
003ab8   c000     MOVFF     0x0,0xfdb                                                                                       
003aba   ffdb                                                                                                               
003abc   0e09     MOVLW     0x9                                                                                             
003abe   c001     MOVFF     0x1,0xfdb                                                                                       
003ac0   ffdb                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// Are we too far above or below the horizontal center line?                  C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// If so, calculate how far we should step the tilt servo to                  C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// reduce the error.                                                          C:\code\2008\Mnemosyne - 2008\tracking.c
003ac2   0e08     MOVLW     0x8            			if(tilt_error > TILT_ALLOWABLE_ERROR_DEFAULT)                                 C:\code\2008\Mnemosyne - 2008\tracking.c
003ac4   cfdb     MOVFF     0xfdb,0x0                                                                                       
003ac6   f000                                                                                                               
003ac8   0e09     MOVLW     0x9                                                                                             
003aca   cfdb     MOVFF     0xfdb,0x1                                                                                       
003acc   f001                                                                                                               
003ace   3401     RLCF      0x1,0x0,0x0                                                                                     
003ad0   e204     BC        0x3ada                                                                                          
003ad2   5000     MOVF      0x0,0x0,0x0                                                                                     
003ad4   0806     SUBLW     0x6                                                                                             
003ad6   0e00     MOVLW     0x0                                                                                             
003ad8   5401     SUBFWB    0x1,0x0,0x0                                                                                     
003ada   e224     BC        0x3b24                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// calculate how far we need to step the tilt servo                          C:\code\2008\Mnemosyne - 2008\tracking.c
003adc   0e08     MOVLW     0x8            				servo_step = tilt_error / TILT_GAIN_DEFAULT;                                 C:\code\2008\Mnemosyne - 2008\tracking.c
003ade   6e00     MOVWF     0x0,0x0                                                                                         
003ae0   6a01     CLRF      0x1,0x0                                                                                         
003ae2   cfdb     MOVFF     0xfdb,0x41                                                                                      
003ae4   f041                                                                                                               
003ae6   0e09     MOVLW     0x9                                                                                             
003ae8   cfdb     MOVFF     0xfdb,0x42                                                                                      
003aea   f042                                                                                                               
003aec   c000     MOVFF     0x0,0x46                                                                                        
003aee   f046                                                                                                               
003af0   c001     MOVFF     0x1,0x47                                                                                        
003af2   f047                                                                                                               
003af4   eccc     CALL      0x4398,0x0                                                                                      
003af6   f021                                                                                                               
003af8   0e04     MOVLW     0x4                                                                                             
003afa   c041     MOVFF     0x41,0xfdb                                                                                      
003afc   ffdb                                                                                                               
003afe   0e05     MOVLW     0x5                                                                                             
003b00   c042     MOVFF     0x42,0xfdb                                                                                      
003b02   ffdb                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// Due to rounding error in the division calculation above,                  C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// the step may be calculated as zero, which will make it                    C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// impossible to converge on the target when tilt_error is                   C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// smaller than TILT_GAIN_DEFAULT. To get around this problem,               C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// we just test for the zero case and set the step size to one.              C:\code\2008\Mnemosyne - 2008\tracking.c
003b04   50d9     MOVF      0xd9,0x0,0x0   				if(servo_step == 0)                                                          C:\code\2008\Mnemosyne - 2008\tracking.c
003b06   0f04     ADDLW     0x4                                                                                             
003b08   6ee9     MOVWF     0xe9,0x0                                                                                        
003b0a   cfda     MOVFF     0xfda,0xfea                                                                                     
003b0c   ffea                                                                                                               
003b0e   50ee     MOVF      0xee,0x0,0x0                                                                                    
003b10   10ed     IORWF     0xed,0x0,0x0                                                                                    
003b12   e107     BNZ       0x3b22                                                                                          
                                           				{                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
003b14   0e01     MOVLW     0x1            					servo_step = 1;                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
003b16   6ef3     MOVWF     0xf3,0x0                                                                                        
003b18   0e04     MOVLW     0x4                                                                                             
003b1a   cff3     MOVFF     0xff3,0xfdb                                                                                     
003b1c   ffdb                                                                                                               
003b1e   0e05     MOVLW     0x5                                                                                             
003b20   6adb     CLRF      0xdb,0x0                                                                                        
                                           				}                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
003b22   d036     BRA       0x3b90         			else if (tilt_error < -1 * TILT_ALLOWABLE_ERROR_DEFAULT)                      C:\code\2008\Mnemosyne - 2008\tracking.c
003b24   0e08     MOVLW     0x8                                                                                             
003b26   cfdb     MOVFF     0xfdb,0x0                                                                                       
003b28   f000                                                                                                               
003b2a   0e09     MOVLW     0x9                                                                                             
003b2c   cfdb     MOVFF     0xfdb,0x1                                                                                       
003b2e   f001                                                                                                               
003b30   80d8     BSF       0xd8,0x0,0x0                                                                                    
003b32   5001     MOVF      0x1,0x0,0x0                                                                                     
003b34   e704     BNN       0x3b3e                                                                                          
003b36   0efa     MOVLW     0xfa                                                                                            
003b38   5c00     SUBWF     0x0,0x0,0x0                                                                                     
003b3a   0eff     MOVLW     0xff                                                                                            
003b3c   5801     SUBWFB    0x1,0x0,0x0                                                                                     
003b3e   e221     BC        0x3b82                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// calculate how far we need to step the tilt servo                          C:\code\2008\Mnemosyne - 2008\tracking.c
003b40   0e08     MOVLW     0x8            				servo_step = tilt_error / TILT_GAIN_DEFAULT;                                 C:\code\2008\Mnemosyne - 2008\tracking.c
003b42   6e00     MOVWF     0x0,0x0                                                                                         
003b44   6a01     CLRF      0x1,0x0                                                                                         
003b46   cfdb     MOVFF     0xfdb,0x41                                                                                      
003b48   f041                                                                                                               
003b4a   0e09     MOVLW     0x9                                                                                             
003b4c   cfdb     MOVFF     0xfdb,0x42                                                                                      
003b4e   f042                                                                                                               
003b50   c000     MOVFF     0x0,0x46                                                                                        
003b52   f046                                                                                                               
003b54   c001     MOVFF     0x1,0x47                                                                                        
003b56   f047                                                                                                               
003b58   eccc     CALL      0x4398,0x0                                                                                      
003b5a   f021                                                                                                               
003b5c   0e04     MOVLW     0x4                                                                                             
003b5e   c041     MOVFF     0x41,0xfdb                                                                                      
003b60   ffdb                                                                                                               
003b62   0e05     MOVLW     0x5                                                                                             
003b64   c042     MOVFF     0x42,0xfdb                                                                                      
003b66   ffdb                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// Due to rounding error in the division calculation above,                  C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// the step may be calculated as zero, which will make it                    C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// impossible to converge on the target when tilt_error is                   C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// smaller than TILT_GAIN_DEFAULT. To get around this problem,               C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// we just test for the zero case and set the step size to one.              C:\code\2008\Mnemosyne - 2008\tracking.c
003b68   50d9     MOVF      0xd9,0x0,0x0   				if(servo_step == 0)                                                          C:\code\2008\Mnemosyne - 2008\tracking.c
003b6a   0f04     ADDLW     0x4                                                                                             
003b6c   6ee9     MOVWF     0xe9,0x0                                                                                        
003b6e   cfda     MOVFF     0xfda,0xfea                                                                                     
003b70   ffea                                                                                                               
003b72   50ee     MOVF      0xee,0x0,0x0                                                                                    
003b74   10ed     IORWF     0xed,0x0,0x0                                                                                    
003b76   e104     BNZ       0x3b80                                                                                          
                                           				{                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
003b78   0e04     MOVLW     0x4            					servo_step = -1;                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
003b7a   68db     SETF      0xdb,0x0                                                                                        
003b7c   0e05     MOVLW     0x5                                                                                             
003b7e   68db     SETF      0xdb,0x0                                                                                        
                                           				}                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
003b80   d007     BRA       0x3b90         			else                                                                          C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// if we've fallen through to here, it means that we're                      C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// neither too far below or to far above the horizontal                      C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// center line of the image and don't need to move the                       C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// servo                                                                     C:\code\2008\Mnemosyne - 2008\tracking.c
003b82   0e04     MOVLW     0x4            				servo_step = 0;                                                              C:\code\2008\Mnemosyne - 2008\tracking.c
003b84   6adb     CLRF      0xdb,0x0                                                                                        
003b86   0e05     MOVLW     0x5                                                                                             
003b88   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// signal that the tilt servo is on target                                   C:\code\2008\Mnemosyne - 2008\tracking.c
003b8a   0e04     MOVLW     0x4            				Tracking_State += STATE_TILT_ON_TARGET;                                      C:\code\2008\Mnemosyne - 2008\tracking.c
003b8c   0102     MOVLB     0x2                                                                                             
003b8e   27e3     ADDWF     0xe3,0x1,0x1                                                                                    
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// add the step to the current servo position, taking into                    C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// account the direction set by the user in tracking.h                        C:\code\2008\Mnemosyne - 2008\tracking.c
003b90   0e04     MOVLW     0x4            			temp_tilt_servo += (TILT_ROTATION_SIGN_DEFAULT * servo_step);                 C:\code\2008\Mnemosyne - 2008\tracking.c
003b92   cfdb     MOVFF     0xfdb,0x0                                                                                       
003b94   f000                                                                                                               
003b96   0e05     MOVLW     0x5                                                                                             
003b98   cfdb     MOVFF     0xfdb,0x1                                                                                       
003b9a   f001                                                                                                               
003b9c   50d9     MOVF      0xd9,0x0,0x0                                                                                    
003b9e   0f02     ADDLW     0x2                                                                                             
003ba0   6ee9     MOVWF     0xe9,0x0                                                                                        
003ba2   cfda     MOVFF     0xfda,0xfea                                                                                     
003ba4   ffea                                                                                                               
003ba6   5000     MOVF      0x0,0x0,0x0                                                                                     
003ba8   26ee     ADDWF     0xee,0x1,0x0                                                                                    
003baa   5001     MOVF      0x1,0x0,0x0                                                                                     
003bac   22ed     ADDWFC    0xed,0x1,0x0                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// check the tilt PWM value for under/overflow                                C:\code\2008\Mnemosyne - 2008\tracking.c
003bae   0e02     MOVLW     0x2            			if(temp_tilt_servo < TILT_MIN_PWM_DEFAULT)                                    C:\code\2008\Mnemosyne - 2008\tracking.c
003bb0   cfdb     MOVFF     0xfdb,0x0                                                                                       
003bb2   f000                                                                                                               
003bb4   0e03     MOVLW     0x3                                                                                             
003bb6   cfdb     MOVFF     0xfdb,0x1                                                                                       
003bb8   f001                                                                                                               
003bba   90d8     BCF       0xd8,0x0,0x0                                                                                    
003bbc   5001     MOVF      0x1,0x0,0x0                                                                                     
003bbe   e604     BN        0x3bc8                                                                                          
003bc0   0e5e     MOVLW     0x5e                                                                                            
003bc2   5c00     SUBWF     0x0,0x0,0x0                                                                                     
003bc4   0e00     MOVLW     0x0                                                                                             
003bc6   5801     SUBWFB    0x1,0x0,0x0                                                                                     
003bc8   e208     BC        0x3bda                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
003bca   0e5e     MOVLW     0x5e           				temp_tilt_servo = TILT_MIN_PWM_DEFAULT;                                      C:\code\2008\Mnemosyne - 2008\tracking.c
003bcc   6ef3     MOVWF     0xf3,0x0                                                                                        
003bce   0e02     MOVLW     0x2                                                                                             
003bd0   cff3     MOVFF     0xff3,0xfdb                                                                                     
003bd2   ffdb                                                                                                               
003bd4   0e03     MOVLW     0x3                                                                                             
003bd6   6adb     CLRF      0xdb,0x0                                                                                        
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
003bd8   d014     BRA       0x3c02         			else if(temp_tilt_servo > TILT_MAX_PWM_DEFAULT)                               C:\code\2008\Mnemosyne - 2008\tracking.c
003bda   0e02     MOVLW     0x2                                                                                             
003bdc   cfdb     MOVFF     0xfdb,0x0                                                                                       
003bde   f000                                                                                                               
003be0   0e03     MOVLW     0x3                                                                                             
003be2   cfdb     MOVFF     0xfdb,0x1                                                                                       
003be4   f001                                                                                                               
003be6   3401     RLCF      0x1,0x0,0x0                                                                                     
003be8   e204     BC        0x3bf2                                                                                          
003bea   5000     MOVF      0x0,0x0,0x0                                                                                     
003bec   08c2     SUBLW     0xc2                                                                                            
003bee   0e00     MOVLW     0x0                                                                                             
003bf0   5401     SUBFWB    0x1,0x0,0x0                                                                                     
003bf2   e207     BC        0x3c02                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
003bf4   0ec2     MOVLW     0xc2           				temp_tilt_servo = TILT_MAX_PWM_DEFAULT;                                      C:\code\2008\Mnemosyne - 2008\tracking.c
003bf6   6ef3     MOVWF     0xf3,0x0                                                                                        
003bf8   0e02     MOVLW     0x2                                                                                             
003bfa   cff3     MOVFF     0xff3,0xfdb                                                                                     
003bfc   ffdb                                                                                                               
003bfe   0e03     MOVLW     0x3                                                                                             
003c00   6adb     CLRF      0xdb,0x0                                                                                        
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
003c02   0e02     MOVLW     0x2            			tilt_servo_position = (unsigned char)temp_tilt_servo;                         C:\code\2008\Mnemosyne - 2008\tracking.c
003c04   cfdb     MOVFF     0xfdb,0x2f8                                                                                     
003c06   f2f8                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// update tilt servo PWM value                                                C:\code\2008\Mnemosyne - 2008\tracking.c
003c08   c2f8     MOVFF     0x2f8,0xfe6    			Set_Tilt_Servo_Position(tilt_servo_position);                                 C:\code\2008\Mnemosyne - 2008\tracking.c
003c0a   ffe6                                                                                                               
003c0c   d8b5     RCALL     0x3d78                                                                                          
003c0e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\tracking.c
003c10   d086     BRA       0x3d1e         		else // matching else to if(T_Packet_Data.confidence >= CONFIDENCE_THRESHOLD_DEFAULT) above C:\code\2008\Mnemosyne - 2008\tracking.c
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			///////////////////                                                           C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			//               //                                                           C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			//  search code  //                                                           C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			//               //                                                           C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			///////////////////                                                           C:\code\2008\Mnemosyne - 2008\tracking.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// To provide a delay for the camera to lock onto the                         C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// target between position changes, we only step the camera                   C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// to a new position every SEARCH_DELAY times while we're                     C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// in search mode. SEARCH_DELAY_DEFAULT is #define'd in                       C:\code\2008\Mnemosyne - 2008\tracking.c
                                           			// tracking.h                                                                 C:\code\2008\Mnemosyne - 2008\tracking.c
003c12   0102     MOVLB     0x2            			loop_count++;                                                                 C:\code\2008\Mnemosyne - 2008\tracking.c
003c14   2be8     INCF      0xe8,0x1,0x1                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
003c16   51e8     MOVF      0xe8,0x0,0x1   			if(loop_count > SEARCH_DELAY_DEFAULT)                                         C:\code\2008\Mnemosyne - 2008\tracking.c
003c18   0806     SUBLW     0x6                                                                                             
003c1a   e301     BNC       0x3c1e                                                                                          
003c1c   d080     BRA       0x3d1e                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// reset the loop counter                                                    C:\code\2008\Mnemosyne - 2008\tracking.c
003c1e   6be8     CLRF      0xe8,0x1       				loop_count = 0;                                                              C:\code\2008\Mnemosyne - 2008\tracking.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// If we're starting a new search, initialize the pan                        C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// and tilt servos to the search starting point.                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// Otherwise, just continue the search pattern from                          C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// where we left off. The variable new_search is reset                       C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// to one each time the tracking code (above) executes.                      C:\code\2008\Mnemosyne - 2008\tracking.c
003c20   05e7     DECF      0xe7,0x0,0x1   				if(new_search == 1)                                                          C:\code\2008\Mnemosyne - 2008\tracking.c
003c22   e10b     BNZ       0x3c3a                                                                                          
                                           				{                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
003c24   6be7     CLRF      0xe7,0x1       					new_search = 0;                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
003c26   6ade     CLRF      0xde,0x0       					temp_pan_servo = PAN_MIN_PWM_DEFAULT;                                       C:\code\2008\Mnemosyne - 2008\tracking.c
003c28   6add     CLRF      0xdd,0x0                                                                                        
003c2a   0e90     MOVLW     0x90           					temp_tilt_servo = TILT_CENTER_PWM_DEFAULT;                                  C:\code\2008\Mnemosyne - 2008\tracking.c
003c2c   6ef3     MOVWF     0xf3,0x0                                                                                        
003c2e   0e02     MOVLW     0x2                                                                                             
003c30   cff3     MOVFF     0xff3,0xfdb                                                                                     
003c32   ffdb                                                                                                               
003c34   0e03     MOVLW     0x3                                                                                             
003c36   6adb     CLRF      0xdb,0x0                                                                                        
                                           										                                                                       C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				}                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
003c38   d065     BRA       0x3d04         				else                                                                         C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				{                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           					// calculate new servo position(s) based upon our                           C:\code\2008\Mnemosyne - 2008\tracking.c
                                           					// current servo position(s)                                                C:\code\2008\Mnemosyne - 2008\tracking.c
003c3a   0102     MOVLB     0x2            					temp_pan_servo = (int)pan_servo_position;                                   C:\code\2008\Mnemosyne - 2008\tracking.c
003c3c   51f7     MOVF      0xf7,0x0,0x1                                                                                    
003c3e   6ede     MOVWF     0xde,0x0                                                                                        
003c40   6add     CLRF      0xdd,0x0                                                                                        
003c42   51f8     MOVF      0xf8,0x0,0x1   					temp_tilt_servo = (int)tilt_servo_position;                                 C:\code\2008\Mnemosyne - 2008\tracking.c
003c44   6ee6     MOVWF     0xe6,0x0                                                                                        
003c46   50d9     MOVF      0xd9,0x0,0x0                                                                                    
003c48   0f02     ADDLW     0x2                                                                                             
003c4a   6ee9     MOVWF     0xe9,0x0                                                                                        
003c4c   cfda     MOVFF     0xfda,0xfea                                                                                     
003c4e   ffea                                                                                                               
003c50   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003c52   50e7     MOVF      0xe7,0x0,0x0                                                                                    
003c54   6eee     MOVWF     0xee,0x0                                                                                        
003c56   6aed     CLRF      0xed,0x0                                                                                        
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           					// if the pan servo is at the end of its travel,                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           					// send it back to the start and step the tilt                              C:\code\2008\Mnemosyne - 2008\tracking.c
                                           					// servo to its next position                                               C:\code\2008\Mnemosyne - 2008\tracking.c
003c58   cfde     MOVFF     0xfde,0x0      					if(temp_pan_servo >= PAN_MAX_PWM_DEFAULT)                                   C:\code\2008\Mnemosyne - 2008\tracking.c
003c5a   f000                                                                                                               
003c5c   cfdd     MOVFF     0xfdd,0x1                                                                                       
003c5e   f001                                                                                                               
003c60   90d8     BCF       0xd8,0x0,0x0                                                                                    
003c62   5001     MOVF      0x1,0x0,0x0                                                                                     
003c64   e604     BN        0x3c6e                                                                                          
003c66   0ef8     MOVLW     0xf8                                                                                            
003c68   5c00     SUBWF     0x0,0x0,0x0                                                                                     
003c6a   0e00     MOVLW     0x0                                                                                             
003c6c   5801     SUBWFB    0x1,0x0,0x0                                                                                     
003c6e   e337     BNC       0x3cde                                                                                          
                                           					{                                                                           C:\code\2008\Mnemosyne - 2008\tracking.c
003c70   6ade     CLRF      0xde,0x0       						temp_pan_servo = PAN_MIN_PWM_DEFAULT;                                      C:\code\2008\Mnemosyne - 2008\tracking.c
003c72   6add     CLRF      0xdd,0x0                                                                                        
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\tracking.c
                                           						// if the tilt servo is at the end of its                                  C:\code\2008\Mnemosyne - 2008\tracking.c
                                           						// travel, send it back to the start                                       C:\code\2008\Mnemosyne - 2008\tracking.c
003c74   0e02     MOVLW     0x2            						if(temp_tilt_servo >= TILT_MAX_PWM_DEFAULT)                                C:\code\2008\Mnemosyne - 2008\tracking.c
003c76   cfdb     MOVFF     0xfdb,0x0                                                                                       
003c78   f000                                                                                                               
003c7a   0e03     MOVLW     0x3                                                                                             
003c7c   cfdb     MOVFF     0xfdb,0x1                                                                                       
003c7e   f001                                                                                                               
003c80   90d8     BCF       0xd8,0x0,0x0                                                                                    
003c82   5001     MOVF      0x1,0x0,0x0                                                                                     
003c84   e604     BN        0x3c8e                                                                                          
003c86   0ec2     MOVLW     0xc2                                                                                            
003c88   5c00     SUBWF     0x0,0x0,0x0                                                                                     
003c8a   0e00     MOVLW     0x0                                                                                             
003c8c   5801     SUBWFB    0x1,0x0,0x0                                                                                     
003c8e   e308     BNC       0x3ca0                                                                                          
                                           						{                                                                          C:\code\2008\Mnemosyne - 2008\tracking.c
003c90   0e5e     MOVLW     0x5e           							temp_tilt_servo = TILT_MIN_PWM_DEFAULT;                                   C:\code\2008\Mnemosyne - 2008\tracking.c
003c92   6ef3     MOVWF     0xf3,0x0                                                                                        
003c94   0e02     MOVLW     0x2                                                                                             
003c96   cff3     MOVFF     0xff3,0xfdb                                                                                     
003c98   ffdb                                                                                                               
003c9a   0e03     MOVLW     0x3                                                                                             
003c9c   6adb     CLRF      0xdb,0x0                                                                                        
                                           						}                                                                          C:\code\2008\Mnemosyne - 2008\tracking.c
003c9e   d01e     BRA       0x3cdc         						else                                                                       C:\code\2008\Mnemosyne - 2008\tracking.c
                                           						{                                                                          C:\code\2008\Mnemosyne - 2008\tracking.c
                                           							// step the tilt servo to its next destination                            C:\code\2008\Mnemosyne - 2008\tracking.c
003ca0   50d9     MOVF      0xd9,0x0,0x0   							temp_tilt_servo += TILT_SEARCH_STEP_SIZE_DEFAULT;                         C:\code\2008\Mnemosyne - 2008\tracking.c
003ca2   0f02     ADDLW     0x2                                                                                             
003ca4   6ee9     MOVWF     0xe9,0x0                                                                                        
003ca6   cfda     MOVFF     0xfda,0xfea                                                                                     
003ca8   ffea                                                                                                               
003caa   0e32     MOVLW     0x32                                                                                            
003cac   26ee     ADDWF     0xee,0x1,0x0                                                                                    
003cae   0e00     MOVLW     0x0                                                                                             
003cb0   22ed     ADDWFC    0xed,0x1,0x0                                                                                    
                                           			                                                                              C:\code\2008\Mnemosyne - 2008\tracking.c
                                           							// make sure its new position isn't beyond                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           							// the maximum value set in tracking.h                                    C:\code\2008\Mnemosyne - 2008\tracking.c
003cb2   0e02     MOVLW     0x2            							if(temp_tilt_servo >= TILT_MAX_PWM_DEFAULT)                               C:\code\2008\Mnemosyne - 2008\tracking.c
003cb4   cfdb     MOVFF     0xfdb,0x0                                                                                       
003cb6   f000                                                                                                               
003cb8   0e03     MOVLW     0x3                                                                                             
003cba   cfdb     MOVFF     0xfdb,0x1                                                                                       
003cbc   f001                                                                                                               
003cbe   90d8     BCF       0xd8,0x0,0x0                                                                                    
003cc0   5001     MOVF      0x1,0x0,0x0                                                                                     
003cc2   e604     BN        0x3ccc                                                                                          
003cc4   0ec2     MOVLW     0xc2                                                                                            
003cc6   5c00     SUBWF     0x0,0x0,0x0                                                                                     
003cc8   0e00     MOVLW     0x0                                                                                             
003cca   5801     SUBWFB    0x1,0x0,0x0                                                                                     
003ccc   e307     BNC       0x3cdc                                                                                          
                                           							{                                                                         C:\code\2008\Mnemosyne - 2008\tracking.c
003cce   0ec2     MOVLW     0xc2           								temp_tilt_servo = TILT_MAX_PWM_DEFAULT;                                  C:\code\2008\Mnemosyne - 2008\tracking.c
003cd0   6ef3     MOVWF     0xf3,0x0                                                                                        
003cd2   0e02     MOVLW     0x2                                                                                             
003cd4   cff3     MOVFF     0xff3,0xfdb                                                                                     
003cd6   ffdb                                                                                                               
003cd8   0e03     MOVLW     0x3                                                                                             
003cda   6adb     CLRF      0xdb,0x0                                                                                        
                                           							}                                                                         C:\code\2008\Mnemosyne - 2008\tracking.c
                                           						}                                                                          C:\code\2008\Mnemosyne - 2008\tracking.c
                                           					}                                                                           C:\code\2008\Mnemosyne - 2008\tracking.c
003cdc   d013     BRA       0x3d04         					else                                                                        C:\code\2008\Mnemosyne - 2008\tracking.c
                                           					{                                                                           C:\code\2008\Mnemosyne - 2008\tracking.c
                                           						// step the pan servo to its next destination                              C:\code\2008\Mnemosyne - 2008\tracking.c
003cde   0e3e     MOVLW     0x3e           						temp_pan_servo += PAN_SEARCH_STEP_SIZE_DEFAULT;                            C:\code\2008\Mnemosyne - 2008\tracking.c
003ce0   26de     ADDWF     0xde,0x1,0x0                                                                                    
003ce2   0e00     MOVLW     0x0                                                                                             
003ce4   22dd     ADDWFC    0xdd,0x1,0x0                                                                                    
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\tracking.c
                                           						// make sure its new position isn't beyond                                 C:\code\2008\Mnemosyne - 2008\tracking.c
                                           						// the maximum value set in tracking.h                                     C:\code\2008\Mnemosyne - 2008\tracking.c
003ce6   cfde     MOVFF     0xfde,0x0      						if(temp_pan_servo >= PAN_MAX_PWM_DEFAULT)                                  C:\code\2008\Mnemosyne - 2008\tracking.c
003ce8   f000                                                                                                               
003cea   cfdd     MOVFF     0xfdd,0x1                                                                                       
003cec   f001                                                                                                               
003cee   90d8     BCF       0xd8,0x0,0x0                                                                                    
003cf0   5001     MOVF      0x1,0x0,0x0                                                                                     
003cf2   e604     BN        0x3cfc                                                                                          
003cf4   0ef8     MOVLW     0xf8                                                                                            
003cf6   5c00     SUBWF     0x0,0x0,0x0                                                                                     
003cf8   0e00     MOVLW     0x0                                                                                             
003cfa   5801     SUBWFB    0x1,0x0,0x0                                                                                     
003cfc   e303     BNC       0x3d04                                                                                          
                                           						{                                                                          C:\code\2008\Mnemosyne - 2008\tracking.c
003cfe   0ef8     MOVLW     0xf8           							temp_pan_servo = PAN_MAX_PWM_DEFAULT;                                     C:\code\2008\Mnemosyne - 2008\tracking.c
003d00   6ede     MOVWF     0xde,0x0                                                                                        
003d02   6add     CLRF      0xdd,0x0                                                                                        
                                           						}                                                                          C:\code\2008\Mnemosyne - 2008\tracking.c
                                           					}                                                                           C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				}                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
003d04   cfdf     MOVFF     0xfdf,0x2f7    				pan_servo_position = (int)temp_pan_servo;                                    C:\code\2008\Mnemosyne - 2008\tracking.c
003d06   f2f7                                                                                                               
003d08   0e02     MOVLW     0x2            				tilt_servo_position = (int)temp_tilt_servo;                                  C:\code\2008\Mnemosyne - 2008\tracking.c
003d0a   cfdb     MOVFF     0xfdb,0x2f8                                                                                     
003d0c   f2f8                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           				// update the pan and tilt servo PWM value                                   C:\code\2008\Mnemosyne - 2008\tracking.c
003d0e   c2f7     MOVFF     0x2f7,0xfe6    				Set_Pan_Servo_Position((unsigned char)pan_servo_position);                   C:\code\2008\Mnemosyne - 2008\tracking.c
003d10   ffe6                                                                                                               
003d12   d827     RCALL     0x3d62                                                                                          
003d14   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003d16   c2f8     MOVFF     0x2f8,0xfe6    				Set_Tilt_Servo_Position((unsigned char)tilt_servo_position);                 C:\code\2008\Mnemosyne - 2008\tracking.c
003d18   ffe6                                                                                                               
003d1a   d82e     RCALL     0x3d78                                                                                          
003d1c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\tracking.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\tracking.c
003d1e   cfd9     MOVFF     0xfd9,0xfe1    }                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
003d20   ffe1                                                                                                               
003d22   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003d24   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003d26   ffd9                                                                                                               
003d28   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	FUNCTION:		Get_Tracking_State()                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	PURPOSE:		This function can be used to determine if both the pan               C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *					and tilt servos have the camera positioned such that the                   C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *					centroid (center) of the green light is located at the                     C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *					center of the camera's imager.                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	CALLED FROM:	User code.                                                        C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	RETURNS:		SEARCHING if in search mode.                                         C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *					TARGET_IN_VIEW if the target is in view of the camera                      C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *					but not locked on.                                                         C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *					CAMERA_ON_TARGET if the camera is locked onto the                          C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *					target                                                                     C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	COMMENTS:		The return values are defined in tracking.h.                        C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\tracking.c
003d2a   cfd9     MOVFF     0xfd9,0xfe6    unsigned char Get_Tracking_State(void)                                           C:\code\2008\Mnemosyne - 2008\tracking.c
003d2c   ffe6                                                                                                               
003d2e   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003d30   ffd9                                                                                                               
003d32   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           	unsigned char return_value;                                                     C:\code\2008\Mnemosyne - 2008\tracking.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
003d34   0102     MOVLB     0x2            	if(Tracking_State == STATE_SEARCHING)                                           C:\code\2008\Mnemosyne - 2008\tracking.c
003d36   51e3     MOVF      0xe3,0x0,0x1                                                                                    
003d38   e102     BNZ       0x3d3e                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\tracking.c
003d3a   6adf     CLRF      0xdf,0x0       		return_value = SEARCHING;                                                      C:\code\2008\Mnemosyne - 2008\tracking.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\tracking.c
003d3c   d00b     BRA       0x3d54         	else if(Tracking_State < STATE_TARGET_IN_VIEW + STATE_PAN_ON_TARGET + STATE_TILT_ON_TARGET) C:\code\2008\Mnemosyne - 2008\tracking.c
003d3e   0e07     MOVLW     0x7                                                                                             
003d40   5de3     SUBWF     0xe3,0x0,0x1                                                                                    
003d42   e203     BC        0x3d4a                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\tracking.c
003d44   0e01     MOVLW     0x1            		return_value = TARGET_IN_VIEW;                                                 C:\code\2008\Mnemosyne - 2008\tracking.c
003d46   6edf     MOVWF     0xdf,0x0                                                                                        
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\tracking.c
003d48   d005     BRA       0x3d54         	else if(Tracking_State == STATE_TARGET_IN_VIEW + STATE_PAN_ON_TARGET + STATE_TILT_ON_TARGET) C:\code\2008\Mnemosyne - 2008\tracking.c
003d4a   0e07     MOVLW     0x7                                                                                             
003d4c   5de3     SUBWF     0xe3,0x0,0x1                                                                                    
003d4e   e102     BNZ       0x3d54                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\tracking.c
003d50   0e02     MOVLW     0x2            		return_value = CAMERA_ON_TARGET;                                               C:\code\2008\Mnemosyne - 2008\tracking.c
003d52   6edf     MOVWF     0xdf,0x0                                                                                        
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\tracking.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
003d54   50df     MOVF      0xdf,0x0,0x0   	return(return_value);                                                           C:\code\2008\Mnemosyne - 2008\tracking.c
003d56   d000     BRA       0x3d58                                                                                          
003d58   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
003d5a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003d5c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003d5e   ffd9                                                                                                               
003d60   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	FUNCTION:		Set_Pan_Servo_Position()                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	PURPOSE:		Commands the pan servo to a new position                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	CALLED FROM:	Servo_Track(), above.                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\tracking.c
003d62   cfd9     MOVFF     0xfd9,0xfe6    void Set_Pan_Servo_Position(unsigned char new_pan_position)                      C:\code\2008\Mnemosyne - 2008\tracking.c
003d64   ffe6                                                                                                               
003d66   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003d68   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
003d6a   0efe     MOVLW     0xfe           	PAN_SERVO = new_pan_position;                                                   C:\code\2008\Mnemosyne - 2008\tracking.c
003d6c   cfdb     MOVFF     0xfdb,0x204                                                                                     
003d6e   f204                                                                                                               
003d70   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
003d72   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003d74   ffd9                                                                                                               
003d76   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	FUNCTION:		Set_Tilt_Servo_Position()                                           C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	PURPOSE:		Commands the tilt servo to a new position                            C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	CALLED FROM:	Servo_Track(), above.                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	PARAMETERS:		None.                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	RETURNS:		Nothing.                                                             C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *	COMMENTS:                                                                      C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\tracking.c
003d78   cfd9     MOVFF     0xfd9,0xfe6    void Set_Tilt_Servo_Position(unsigned char new_tilt_position)                    C:\code\2008\Mnemosyne - 2008\tracking.c
003d7a   ffe6                                                                                                               
003d7c   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003d7e   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
003d80   0efe     MOVLW     0xfe           	TILT_SERVO = new_tilt_position;                                                 C:\code\2008\Mnemosyne - 2008\tracking.c
003d82   cfdb     MOVFF     0xfdb,0x205                                                                                     
003d84   f205                                                                                                               
003d86   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\tracking.c
003d88   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003d8a   ffd9                                                                                                               
003d8c   0012     RETURN    0x0                                                                                             
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           * FILE NAME: TRCfunctions.c                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           * AUTHOR: Paul Malmsten, 2008                                                    C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           * DESCRIPTION:                                                                   C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           *  This file contains all of the extra functions the Titan Robotics Club has     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           *  added. Feel free to mess with it.                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           #include <stdio.h>                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           #include "ifi_aliases.h"                                                         C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           #include "ifi_default.h"                                                         C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           #include "ifi_utilities.h"                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           #include "user_routines.h"                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           #include "serial_ports.h"                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           #include "encoder.h"                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           #include "adc.h"                                                                 C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           #include "gyro.h"                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           #include "TRCfunctions.h"                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           extern VelServo Left, Right;                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           //extern PosServo Elev;                                                          C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           extern long timerTicks;                                                          C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           /*                                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           //Modified to be supplied with externally calulated velocity at 1/4 rate, approx. 104.8ms C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           int doPid(PosServo *p, long pos, int motor_direction)                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	int Error, Drive;                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	if(p->Psetpoint > p->posMaxLim)                                                 C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		p->Psetpoint = p->posMaxLim;                                                   C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	if(p->Psetpoint < p->posMinLim)                                                 C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		p->Psetpoint = p->posMinLim;                                                   C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	Error = p->Psetpoint - pos;		//Compare against the requested velocity           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	Drive = (p->Kp*Error + p->Kd*(Error - p->PrevErr) + p->Ki*p->Ierror)/p->Ko;  //Yay! PID! Note: PrevErr is bigger than Error when approaching setpoint; Kd is okay being added C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	p->PrevErr = Error;				//Save this error for next time                          C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                               if (Drive >= 127)				//Accumulate Integral error only if not saturated; Remember this is 0 based - 127 is added later C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                      Drive = 127;				//Forward Limit                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                               else if (Drive <= -127)                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                   Drive = -127;				//Reverse Limit                                         C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                               else                                                                         C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		p->Ierror += Error;			//Accumulate Error                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	return (p->Drive = (Drive*motor_direction)+127); //Adjust direction             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           }*/                                                                              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0008a4   cfd9     MOVFF     0xfd9,0xfe6    int doVelPid(VelServo *p, long encoder, int motor_direction)                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0008a6   ffe6                                                                                                               
0008a8   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0008aa   ffd9                                                                                                               
0008ac   0e08     MOVLW     0x8                                                                                             
0008ae   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0008b0   6ade     CLRF      0xde,0x0       	long encVel = 0;                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0008b2   6ade     CLRF      0xde,0x0                                                                                        
0008b4   6ade     CLRF      0xde,0x0                                                                                        
0008b6   6add     CLRF      0xdd,0x0                                                                                        
0008b8   52dd     MOVF      0xdd,0x1,0x0                                                                                    
0008ba   52dd     MOVF      0xdd,0x1,0x0                                                                                    
                                           	int velErr,Drive;                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	//if(p->Mode)                                                                   C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	//	p->Vsetpoint = ((p->Psetpoint - encoder)*p->Kp)/p->Ko;		//Position Ctrl Loop; sent to Velocity Ctrl Loop C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0008bc   0efd     MOVLW     0xfd           	if(p->Vsetpoint > p->velLim)									//Enforce Veloctiy Limit                   C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0008be   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0008c0   ffe9                                                                                                               
0008c2   0efe     MOVLW     0xfe                                                                                            
0008c4   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0008c6   ffea                                                                                                               
0008c8   0e06     MOVLW     0x6                                                                                             
0008ca   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
0008cc   0e00     MOVLW     0x0                                                                                             
0008ce   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0008d0   cfee     MOVFF     0xfee,0x0                                                                                       
0008d2   f000                                                                                                               
0008d4   cfef     MOVFF     0xfef,0x1                                                                                       
0008d6   f001                                                                                                               
0008d8   0efd     MOVLW     0xfd                                                                                            
0008da   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0008dc   ffe9                                                                                                               
0008de   0efe     MOVLW     0xfe                                                                                            
0008e0   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0008e2   ffea                                                                                                               
0008e4   0e14     MOVLW     0x14                                                                                            
0008e6   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
0008e8   0e00     MOVLW     0x0                                                                                             
0008ea   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0008ec   cfee     MOVFF     0xfee,0x2                                                                                       
0008ee   f002                                                                                                               
0008f0   cfef     MOVFF     0xfef,0x3                                                                                       
0008f2   f003                                                                                                               
0008f4   5003     MOVF      0x3,0x0,0x0                                                                                     
0008f6   1801     XORWF     0x1,0x0,0x0                                                                                     
0008f8   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
0008fa   d002     BRA       0x900                                                                                           
0008fc   3401     RLCF      0x1,0x0,0x0                                                                                     
0008fe   d004     BRA       0x908                                                                                           
000900   5000     MOVF      0x0,0x0,0x0                                                                                     
000902   5c02     SUBWF     0x2,0x0,0x0                                                                                     
000904   5001     MOVF      0x1,0x0,0x0                                                                                     
000906   5803     SUBWFB    0x3,0x0,0x0                                                                                     
000908   e21d     BC        0x944                                                                                           
00090a   0efd     MOVLW     0xfd           		p->Vsetpoint = p->velLim;                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00090c   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
00090e   ffe9                                                                                                               
000910   0efe     MOVLW     0xfe                                                                                            
000912   cfdb     MOVFF     0xfdb,0xfea                                                                                     
000914   ffea                                                                                                               
000916   0e14     MOVLW     0x14                                                                                            
000918   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
00091a   0e00     MOVLW     0x0                                                                                             
00091c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00091e   cfee     MOVFF     0xfee,0x0                                                                                       
000920   f000                                                                                                               
000922   cfef     MOVFF     0xfef,0x1                                                                                       
000924   f001                                                                                                               
000926   0efd     MOVLW     0xfd                                                                                            
000928   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
00092a   ffe9                                                                                                               
00092c   0efe     MOVLW     0xfe                                                                                            
00092e   cfdb     MOVFF     0xfdb,0xfea                                                                                     
000930   ffea                                                                                                               
000932   0e06     MOVLW     0x6                                                                                             
000934   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000936   0e00     MOVLW     0x0                                                                                             
000938   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00093a   c000     MOVFF     0x0,0xfee                                                                                       
00093c   ffee                                                                                                               
00093e   c001     MOVFF     0x1,0xfed                                                                                       
000940   ffed                                                                                                               
000942   d049     BRA       0x9d6          	else if (p->Vsetpoint < -p->velLim)                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000944   0efd     MOVLW     0xfd                                                                                            
000946   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
000948   ffe9                                                                                                               
00094a   0efe     MOVLW     0xfe                                                                                            
00094c   cfdb     MOVFF     0xfdb,0xfea                                                                                     
00094e   ffea                                                                                                               
000950   0e06     MOVLW     0x6                                                                                             
000952   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000954   0e00     MOVLW     0x0                                                                                             
000956   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000958   cfee     MOVFF     0xfee,0x0                                                                                       
00095a   f000                                                                                                               
00095c   cfef     MOVFF     0xfef,0x1                                                                                       
00095e   f001                                                                                                               
000960   0efd     MOVLW     0xfd                                                                                            
000962   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
000964   ffe9                                                                                                               
000966   0efe     MOVLW     0xfe                                                                                            
000968   cfdb     MOVFF     0xfdb,0xfea                                                                                     
00096a   ffea                                                                                                               
00096c   0e14     MOVLW     0x14                                                                                            
00096e   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000970   0e00     MOVLW     0x0                                                                                             
000972   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000974   cfee     MOVFF     0xfee,0x2                                                                                       
000976   f002                                                                                                               
000978   cfef     MOVFF     0xfef,0x3                                                                                       
00097a   f003                                                                                                               
00097c   6c02     NEGF      0x2,0x0                                                                                         
00097e   1e03     COMF      0x3,0x1,0x0                                                                                     
000980   2203     ADDWFC    0x3,0x1,0x0                                                                                     
000982   5001     MOVF      0x1,0x0,0x0                                                                                     
000984   1803     XORWF     0x3,0x0,0x0                                                                                     
000986   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
000988   d002     BRA       0x98e                                                                                           
00098a   3403     RLCF      0x3,0x0,0x0                                                                                     
00098c   d004     BRA       0x996                                                                                           
00098e   5002     MOVF      0x2,0x0,0x0                                                                                     
000990   5c00     SUBWF     0x0,0x0,0x0                                                                                     
000992   5003     MOVF      0x3,0x0,0x0                                                                                     
000994   5801     SUBWFB    0x1,0x0,0x0                                                                                     
000996   e21f     BC        0x9d6                                                                                           
000998   0efd     MOVLW     0xfd           		p->Vsetpoint = -p->velLim;                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00099a   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
00099c   ffe9                                                                                                               
00099e   0efe     MOVLW     0xfe                                                                                            
0009a0   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0009a2   ffea                                                                                                               
0009a4   0e14     MOVLW     0x14                                                                                            
0009a6   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
0009a8   0e00     MOVLW     0x0                                                                                             
0009aa   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0009ac   cfee     MOVFF     0xfee,0x0                                                                                       
0009ae   f000                                                                                                               
0009b0   cfef     MOVFF     0xfef,0x1                                                                                       
0009b2   f001                                                                                                               
0009b4   6c00     NEGF      0x0,0x0                                                                                         
0009b6   1e01     COMF      0x1,0x1,0x0                                                                                     
0009b8   2201     ADDWFC    0x1,0x1,0x0                                                                                     
0009ba   0efd     MOVLW     0xfd                                                                                            
0009bc   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0009be   ffe9                                                                                                               
0009c0   0efe     MOVLW     0xfe                                                                                            
0009c2   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0009c4   ffea                                                                                                               
0009c6   0e06     MOVLW     0x6                                                                                             
0009c8   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
0009ca   0e00     MOVLW     0x0                                                                                             
0009cc   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0009ce   c000     MOVFF     0x0,0xfee                                                                                       
0009d0   ffee                                                                                                               
0009d2   c001     MOVFF     0x1,0xfed                                                                                       
0009d4   ffed                                                                                                               
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0009d6   0ef9     MOVLW     0xf9           	p->vel = (encoder - p->PrevEnc);								//Update velocity property              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0009d8   cfdb     MOVFF     0xfdb,0x4                                                                                       
0009da   f004                                                                                                               
0009dc   0efa     MOVLW     0xfa                                                                                            
0009de   cfdb     MOVFF     0xfdb,0x5                                                                                       
0009e0   f005                                                                                                               
0009e2   0efb     MOVLW     0xfb                                                                                            
0009e4   cfdb     MOVFF     0xfdb,0x6                                                                                       
0009e6   f006                                                                                                               
0009e8   0efc     MOVLW     0xfc                                                                                            
0009ea   cfdb     MOVFF     0xfdb,0x7                                                                                       
0009ec   f007                                                                                                               
0009ee   0efd     MOVLW     0xfd                                                                                            
0009f0   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0009f2   ffe9                                                                                                               
0009f4   0efe     MOVLW     0xfe                                                                                            
0009f6   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0009f8   ffea                                                                                                               
0009fa   0e08     MOVLW     0x8                                                                                             
0009fc   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
0009fe   0e00     MOVLW     0x0                                                                                             
000a00   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000a02   50ee     MOVF      0xee,0x0,0x0                                                                                    
000a04   5c04     SUBWF     0x4,0x0,0x0                                                                                     
000a06   6e00     MOVWF     0x0,0x0                                                                                         
000a08   50ee     MOVF      0xee,0x0,0x0                                                                                    
000a0a   5805     SUBWFB    0x5,0x0,0x0                                                                                     
000a0c   6e01     MOVWF     0x1,0x0                                                                                         
000a0e   50ee     MOVF      0xee,0x0,0x0                                                                                    
000a10   5806     SUBWFB    0x6,0x0,0x0                                                                                     
000a12   6e02     MOVWF     0x2,0x0                                                                                         
000a14   50ee     MOVF      0xee,0x0,0x0                                                                                    
000a16   5807     SUBWFB    0x7,0x0,0x0                                                                                     
000a18   6e03     MOVWF     0x3,0x0                                                                                         
000a1a   0efd     MOVLW     0xfd                                                                                            
000a1c   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
000a1e   ffe9                                                                                                               
000a20   0efe     MOVLW     0xfe                                                                                            
000a22   cfdb     MOVFF     0xfdb,0xfea                                                                                     
000a24   ffea                                                                                                               
000a26   0e16     MOVLW     0x16                                                                                            
000a28   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000a2a   0e00     MOVLW     0x0                                                                                             
000a2c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000a2e   c000     MOVFF     0x0,0xfee                                                                                       
000a30   ffee                                                                                                               
000a32   c001     MOVFF     0x1,0xfed                                                                                       
000a34   ffed                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000a36   0efd     MOVLW     0xfd           	velErr = p->Vsetpoint - p->vel;									//Velocity Error                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000a38   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
000a3a   ffe9                                                                                                               
000a3c   0efe     MOVLW     0xfe                                                                                            
000a3e   cfdb     MOVFF     0xfdb,0xfea                                                                                     
000a40   ffea                                                                                                               
000a42   0e06     MOVLW     0x6                                                                                             
000a44   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000a46   0e00     MOVLW     0x0                                                                                             
000a48   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000a4a   cfee     MOVFF     0xfee,0x2                                                                                       
000a4c   f002                                                                                                               
000a4e   cfef     MOVFF     0xfef,0x3                                                                                       
000a50   f003                                                                                                               
000a52   0efd     MOVLW     0xfd                                                                                            
000a54   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
000a56   ffe9                                                                                                               
000a58   0efe     MOVLW     0xfe                                                                                            
000a5a   cfdb     MOVFF     0xfdb,0xfea                                                                                     
000a5c   ffea                                                                                                               
000a5e   0e16     MOVLW     0x16                                                                                            
000a60   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000a62   0e00     MOVLW     0x0                                                                                             
000a64   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000a66   50ee     MOVF      0xee,0x0,0x0                                                                                    
000a68   5c02     SUBWF     0x2,0x0,0x0                                                                                     
000a6a   6e00     MOVWF     0x0,0x0                                                                                         
000a6c   50ee     MOVF      0xee,0x0,0x0                                                                                    
000a6e   5803     SUBWFB    0x3,0x0,0x0                                                                                     
000a70   6e01     MOVWF     0x1,0x0                                                                                         
000a72   0e04     MOVLW     0x4                                                                                             
000a74   c000     MOVFF     0x0,0xfdb                                                                                       
000a76   ffdb                                                                                                               
000a78   0e05     MOVLW     0x5                                                                                             
000a7a   c001     MOVFF     0x1,0xfdb                                                                                       
000a7c   ffdb                                                                                                               
000a7e   0efd     MOVLW     0xfd           	Drive = ((velErr + (p->Kvi*p->Ierr)/p->Ko)*p->Kvp)/p->Ko;		//Velocity Ctrl Loop: ((velErr + (Iterm/Ko))*Kvp)/Ko C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000a80   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
000a82   ffe9                                                                                                               
000a84   0efe     MOVLW     0xfe                                                                                            
000a86   cfdb     MOVFF     0xfdb,0xfea                                                                                     
000a88   ffea                                                                                                               
000a8a   0e1e     MOVLW     0x1e                                                                                            
000a8c   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000a8e   0e00     MOVLW     0x0                                                                                             
000a90   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000a92   cfee     MOVFF     0xfee,0x20                                                                                      
000a94   f020                                                                                                               
000a96   cfef     MOVFF     0xfef,0x21                                                                                      
000a98   f021                                                                                                               
000a9a   6a22     CLRF      0x22,0x0                                                                                        
000a9c   6a23     CLRF      0x23,0x0                                                                                        
000a9e   ae21     BTFSS     0x21,0x7,0x0                                                                                    
000aa0   d002     BRA       0xaa6                                                                                           
000aa2   6822     SETF      0x22,0x0                                                                                        
000aa4   6823     SETF      0x23,0x0                                                                                        
000aa6   0efd     MOVLW     0xfd                                                                                            
000aa8   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
000aaa   ffe9                                                                                                               
000aac   0efe     MOVLW     0xfe                                                                                            
000aae   cfdb     MOVFF     0xfdb,0xfea                                                                                     
000ab0   ffea                                                                                                               
000ab2   0e1a     MOVLW     0x1a                                                                                            
000ab4   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000ab6   0e00     MOVLW     0x0                                                                                             
000ab8   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000aba   cfee     MOVFF     0xfee,0x1c                                                                                      
000abc   f01c                                                                                                               
000abe   cfef     MOVFF     0xfef,0x1d                                                                                      
000ac0   f01d                                                                                                               
000ac2   6a1e     CLRF      0x1e,0x0                                                                                        
000ac4   6a1f     CLRF      0x1f,0x0                                                                                        
000ac6   ae1d     BTFSS     0x1d,0x7,0x0                                                                                    
000ac8   d002     BRA       0xace                                                                                           
000aca   681e     SETF      0x1e,0x0                                                                                        
000acc   681f     SETF      0x1f,0x0                                                                                        
000ace   0e04     MOVLW     0x4                                                                                             
000ad0   cfdb     MOVFF     0xfdb,0x8                                                                                       
000ad2   f008                                                                                                               
000ad4   0e05     MOVLW     0x5                                                                                             
000ad6   cfdb     MOVFF     0xfdb,0x9                                                                                       
000ad8   f009                                                                                                               
000ada   6a0a     CLRF      0xa,0x0                                                                                         
000adc   6a0b     CLRF      0xb,0x0                                                                                         
000ade   ae09     BTFSS     0x9,0x7,0x0                                                                                     
000ae0   d002     BRA       0xae6                                                                                           
000ae2   680a     SETF      0xa,0x0                                                                                         
000ae4   680b     SETF      0xb,0x0                                                                                         
000ae6   0efd     MOVLW     0xfd                                                                                            
000ae8   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
000aea   ffe9                                                                                                               
000aec   0efe     MOVLW     0xfe                                                                                            
000aee   cfdb     MOVFF     0xfdb,0xfea                                                                                     
000af0   ffea                                                                                                               
000af2   0e1e     MOVLW     0x1e                                                                                            
000af4   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000af6   0e00     MOVLW     0x0                                                                                             
000af8   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000afa   cfee     MOVFF     0xfee,0x18                                                                                      
000afc   f018                                                                                                               
000afe   cfef     MOVFF     0xfef,0x19                                                                                      
000b00   f019                                                                                                               
000b02   6a1a     CLRF      0x1a,0x0                                                                                        
000b04   6a1b     CLRF      0x1b,0x0                                                                                        
000b06   ae19     BTFSS     0x19,0x7,0x0                                                                                    
000b08   d002     BRA       0xb0e                                                                                           
000b0a   681a     SETF      0x1a,0x0                                                                                        
000b0c   681b     SETF      0x1b,0x0                                                                                        
000b0e   0efd     MOVLW     0xfd                                                                                            
000b10   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
000b12   ffe9                                                                                                               
000b14   0efe     MOVLW     0xfe                                                                                            
000b16   cfdb     MOVFF     0xfdb,0xfea                                                                                     
000b18   ffea                                                                                                               
000b1a   0e0c     MOVLW     0xc                                                                                             
000b1c   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000b1e   0e00     MOVLW     0x0                                                                                             
000b20   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000b22   cfee     MOVFF     0xfee,0x14                                                                                      
000b24   f014                                                                                                               
000b26   cfee     MOVFF     0xfee,0x15                                                                                      
000b28   f015                                                                                                               
000b2a   cfee     MOVFF     0xfee,0x16                                                                                      
000b2c   f016                                                                                                               
000b2e   cfef     MOVFF     0xfef,0x17                                                                                      
000b30   f017                                                                                                               
000b32   0efd     MOVLW     0xfd                                                                                            
000b34   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
000b36   ffe9                                                                                                               
000b38   0efe     MOVLW     0xfe                                                                                            
000b3a   cfdb     MOVFF     0xfdb,0xfea                                                                                     
000b3c   ffea                                                                                                               
000b3e   0e1c     MOVLW     0x1c                                                                                            
000b40   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000b42   0e00     MOVLW     0x0                                                                                             
000b44   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000b46   cfee     MOVFF     0xfee,0x10                                                                                      
000b48   f010                                                                                                               
000b4a   cfef     MOVFF     0xfef,0x11                                                                                      
000b4c   f011                                                                                                               
000b4e   6a12     CLRF      0x12,0x0                                                                                        
000b50   6a13     CLRF      0x13,0x0                                                                                        
000b52   ae11     BTFSS     0x11,0x7,0x0                                                                                    
000b54   d002     BRA       0xb5a                                                                                           
000b56   6812     SETF      0x12,0x0                                                                                        
000b58   6813     SETF      0x13,0x0                                                                                        
000b5a   c010     MOVFF     0x10,0x3f                                                                                       
000b5c   f03f                                                                                                               
000b5e   c011     MOVFF     0x11,0x40                                                                                       
000b60   f040                                                                                                               
000b62   c012     MOVFF     0x12,0x41                                                                                       
000b64   f041                                                                                                               
000b66   c013     MOVFF     0x13,0x42                                                                                       
000b68   f042                                                                                                               
000b6a   c014     MOVFF     0x14,0x44                                                                                       
000b6c   f044                                                                                                               
000b6e   c015     MOVFF     0x15,0x45                                                                                       
000b70   f045                                                                                                               
000b72   c016     MOVFF     0x16,0x46                                                                                       
000b74   f046                                                                                                               
000b76   c017     MOVFF     0x17,0x47                                                                                       
000b78   f047                                                                                                               
000b7a   ec15     CALL      0x5e2a,0x0                                                                                      
000b7c   f02f                                                                                                               
000b7e   c03b     MOVFF     0x3b,0xc                                                                                        
000b80   f00c                                                                                                               
000b82   c03c     MOVFF     0x3c,0xd                                                                                        
000b84   f00d                                                                                                               
000b86   c03d     MOVFF     0x3d,0xe                                                                                        
000b88   f00e                                                                                                               
000b8a   c03e     MOVFF     0x3e,0xf                                                                                        
000b8c   f00f                                                                                                               
000b8e   c00c     MOVFF     0xc,0x3f                                                                                        
000b90   f03f                                                                                                               
000b92   c00d     MOVFF     0xd,0x40                                                                                        
000b94   f040                                                                                                               
000b96   c00e     MOVFF     0xe,0x41                                                                                        
000b98   f041                                                                                                               
000b9a   c00f     MOVFF     0xf,0x42                                                                                        
000b9c   f042                                                                                                               
000b9e   c018     MOVFF     0x18,0x44                                                                                       
000ba0   f044                                                                                                               
000ba2   c019     MOVFF     0x19,0x45                                                                                       
000ba4   f045                                                                                                               
000ba6   c01a     MOVFF     0x1a,0x46                                                                                       
000ba8   f046                                                                                                               
000baa   c01b     MOVFF     0x1b,0x47                                                                                       
000bac   f047                                                                                                               
000bae   ecf2     CALL      0x43e4,0x0                                                                                      
000bb0   f021                                                                                                               
000bb2   5008     MOVF      0x8,0x0,0x0                                                                                     
000bb4   243f     ADDWF     0x3f,0x0,0x0                                                                                    
000bb6   6e04     MOVWF     0x4,0x0                                                                                         
000bb8   5009     MOVF      0x9,0x0,0x0                                                                                     
000bba   2040     ADDWFC    0x40,0x0,0x0                                                                                    
000bbc   6e05     MOVWF     0x5,0x0                                                                                         
000bbe   500a     MOVF      0xa,0x0,0x0                                                                                     
000bc0   2041     ADDWFC    0x41,0x0,0x0                                                                                    
000bc2   6e06     MOVWF     0x6,0x0                                                                                         
000bc4   500b     MOVF      0xb,0x0,0x0                                                                                     
000bc6   2042     ADDWFC    0x42,0x0,0x0                                                                                    
000bc8   6e07     MOVWF     0x7,0x0                                                                                         
000bca   c004     MOVFF     0x4,0x3f                                                                                        
000bcc   f03f                                                                                                               
000bce   c005     MOVFF     0x5,0x40                                                                                        
000bd0   f040                                                                                                               
000bd2   c006     MOVFF     0x6,0x41                                                                                        
000bd4   f041                                                                                                               
000bd6   c007     MOVFF     0x7,0x42                                                                                        
000bd8   f042                                                                                                               
000bda   c01c     MOVFF     0x1c,0x44                                                                                       
000bdc   f044                                                                                                               
000bde   c01d     MOVFF     0x1d,0x45                                                                                       
000be0   f045                                                                                                               
000be2   c01e     MOVFF     0x1e,0x46                                                                                       
000be4   f046                                                                                                               
000be6   c01f     MOVFF     0x1f,0x47                                                                                       
000be8   f047                                                                                                               
000bea   ec15     CALL      0x5e2a,0x0                                                                                      
000bec   f02f                                                                                                               
000bee   c03b     MOVFF     0x3b,0x0                                                                                        
000bf0   f000                                                                                                               
000bf2   c03c     MOVFF     0x3c,0x1                                                                                        
000bf4   f001                                                                                                               
000bf6   c03d     MOVFF     0x3d,0x2                                                                                        
000bf8   f002                                                                                                               
000bfa   c03e     MOVFF     0x3e,0x3                                                                                        
000bfc   f003                                                                                                               
000bfe   c000     MOVFF     0x0,0x3f                                                                                        
000c00   f03f                                                                                                               
000c02   c001     MOVFF     0x1,0x40                                                                                        
000c04   f040                                                                                                               
000c06   c002     MOVFF     0x2,0x41                                                                                        
000c08   f041                                                                                                               
000c0a   c003     MOVFF     0x3,0x42                                                                                        
000c0c   f042                                                                                                               
000c0e   c020     MOVFF     0x20,0x44                                                                                       
000c10   f044                                                                                                               
000c12   c021     MOVFF     0x21,0x45                                                                                       
000c14   f045                                                                                                               
000c16   c022     MOVFF     0x22,0x46                                                                                       
000c18   f046                                                                                                               
000c1a   c023     MOVFF     0x23,0x47                                                                                       
000c1c   f047                                                                                                               
000c1e   ecf2     CALL      0x43e4,0x0                                                                                      
000c20   f021                                                                                                               
000c22   0e06     MOVLW     0x6                                                                                             
000c24   c03f     MOVFF     0x3f,0xfdb                                                                                      
000c26   ffdb                                                                                                               
000c28   0e07     MOVLW     0x7                                                                                             
000c2a   c040     MOVFF     0x40,0xfdb                                                                                      
000c2c   ffdb                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000c2e   0efd     MOVLW     0xfd           	p->PrevEnc = encoder;                                                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000c30   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
000c32   ffe9                                                                                                               
000c34   0efe     MOVLW     0xfe                                                                                            
000c36   cfdb     MOVFF     0xfdb,0xfea                                                                                     
000c38   ffea                                                                                                               
000c3a   0e08     MOVLW     0x8                                                                                             
000c3c   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000c3e   0e00     MOVLW     0x0                                                                                             
000c40   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000c42   0ef9     MOVLW     0xf9                                                                                            
000c44   cfdb     MOVFF     0xfdb,0xfee                                                                                     
000c46   ffee                                                                                                               
000c48   0efa     MOVLW     0xfa                                                                                            
000c4a   cfdb     MOVFF     0xfdb,0xfee                                                                                     
000c4c   ffee                                                                                                               
000c4e   0efb     MOVLW     0xfb                                                                                            
000c50   cfdb     MOVFF     0xfdb,0xfee                                                                                     
000c52   ffee                                                                                                               
000c54   0efc     MOVLW     0xfc                                                                                            
000c56   cfdb     MOVFF     0xfdb,0xfee                                                                                     
000c58   ffee                                                                                                               
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000c5a   0e06     MOVLW     0x6            	if(Drive > 127)													//Limit drive output                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000c5c   cfdb     MOVFF     0xfdb,0x0                                                                                       
000c5e   f000                                                                                                               
000c60   0e07     MOVLW     0x7                                                                                             
000c62   cfdb     MOVFF     0xfdb,0x1                                                                                       
000c64   f001                                                                                                               
000c66   3401     RLCF      0x1,0x0,0x0                                                                                     
000c68   e204     BC        0xc72                                                                                           
000c6a   5000     MOVF      0x0,0x0,0x0                                                                                     
000c6c   087f     SUBLW     0x7f                                                                                            
000c6e   0e00     MOVLW     0x0                                                                                             
000c70   5401     SUBFWB    0x1,0x0,0x0                                                                                     
000c72   e208     BC        0xc84                                                                                           
000c74   0e7f     MOVLW     0x7f           		Drive = 127;                                                                   C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000c76   6ef3     MOVWF     0xf3,0x0                                                                                        
000c78   0e06     MOVLW     0x6                                                                                             
000c7a   cff3     MOVFF     0xff3,0xfdb                                                                                     
000c7c   ffdb                                                                                                               
000c7e   0e07     MOVLW     0x7                                                                                             
000c80   6adb     CLRF      0xdb,0x0                                                                                        
000c82   d034     BRA       0xcec          	else if (Drive < -127)                                                          C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000c84   0e06     MOVLW     0x6                                                                                             
000c86   cfdb     MOVFF     0xfdb,0x0                                                                                       
000c88   f000                                                                                                               
000c8a   0e07     MOVLW     0x7                                                                                             
000c8c   cfdb     MOVFF     0xfdb,0x1                                                                                       
000c8e   f001                                                                                                               
000c90   80d8     BSF       0xd8,0x0,0x0                                                                                    
000c92   5001     MOVF      0x1,0x0,0x0                                                                                     
000c94   e704     BNN       0xc9e                                                                                           
000c96   0e81     MOVLW     0x81                                                                                            
000c98   5c00     SUBWF     0x0,0x0,0x0                                                                                     
000c9a   0eff     MOVLW     0xff                                                                                            
000c9c   5801     SUBWFB    0x1,0x0,0x0                                                                                     
000c9e   e208     BC        0xcb0                                                                                           
000ca0   0e81     MOVLW     0x81           		Drive = -127;                                                                  C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000ca2   6ef3     MOVWF     0xf3,0x0                                                                                        
000ca4   0e06     MOVLW     0x6                                                                                             
000ca6   cff3     MOVFF     0xff3,0xfdb                                                                                     
000ca8   ffdb                                                                                                               
000caa   0e07     MOVLW     0x7                                                                                             
000cac   68db     SETF      0xdb,0x0                                                                                        
000cae   d01e     BRA       0xcec          	else                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000cb0   0e04     MOVLW     0x4            		p->Ierr += velErr;                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000cb2   cfdb     MOVFF     0xfdb,0x0                                                                                       
000cb4   f000                                                                                                               
000cb6   0e05     MOVLW     0x5                                                                                             
000cb8   cfdb     MOVFF     0xfdb,0x1                                                                                       
000cba   f001                                                                                                               
000cbc   6a02     CLRF      0x2,0x0                                                                                         
000cbe   6a03     CLRF      0x3,0x0                                                                                         
000cc0   ae01     BTFSS     0x1,0x7,0x0                                                                                     
000cc2   d002     BRA       0xcc8                                                                                           
000cc4   6802     SETF      0x2,0x0                                                                                         
000cc6   6803     SETF      0x3,0x0                                                                                         
000cc8   0efd     MOVLW     0xfd                                                                                            
000cca   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
000ccc   ffe9                                                                                                               
000cce   0efe     MOVLW     0xfe                                                                                            
000cd0   cfdb     MOVFF     0xfdb,0xfea                                                                                     
000cd2   ffea                                                                                                               
000cd4   0e0c     MOVLW     0xc                                                                                             
000cd6   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000cd8   0e00     MOVLW     0x0                                                                                             
000cda   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000cdc   5000     MOVF      0x0,0x0,0x0                                                                                     
000cde   26ee     ADDWF     0xee,0x1,0x0                                                                                    
000ce0   5001     MOVF      0x1,0x0,0x0                                                                                     
000ce2   22ee     ADDWFC    0xee,0x1,0x0                                                                                    
000ce4   5002     MOVF      0x2,0x0,0x0                                                                                     
000ce6   22ee     ADDWFC    0xee,0x1,0x0                                                                                    
000ce8   5003     MOVF      0x3,0x0,0x0                                                                                     
000cea   22ee     ADDWFC    0xee,0x1,0x0                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000cec   0ef9     MOVLW     0xf9           	if(abs(p->Psetpoint - encoder) > 10)							//Report back when we're close enough to the requested position C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000cee   cfdb     MOVFF     0xfdb,0x6                                                                                       
000cf0   f006                                                                                                               
000cf2   0efa     MOVLW     0xfa                                                                                            
000cf4   cfdb     MOVFF     0xfdb,0x7                                                                                       
000cf6   f007                                                                                                               
000cf8   0efb     MOVLW     0xfb                                                                                            
000cfa   cfdb     MOVFF     0xfdb,0x8                                                                                       
000cfc   f008                                                                                                               
000cfe   0efc     MOVLW     0xfc                                                                                            
000d00   cfdb     MOVFF     0xfdb,0x9                                                                                       
000d02   f009                                                                                                               
000d04   0efd     MOVLW     0xfd                                                                                            
000d06   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
000d08   ffe9                                                                                                               
000d0a   0efe     MOVLW     0xfe                                                                                            
000d0c   cfdb     MOVFF     0xfdb,0xfea                                                                                     
000d0e   ffea                                                                                                               
000d10   0e02     MOVLW     0x2                                                                                             
000d12   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000d14   0e00     MOVLW     0x0                                                                                             
000d16   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000d18   5006     MOVF      0x6,0x0,0x0                                                                                     
000d1a   5cee     SUBWF     0xee,0x0,0x0                                                                                    
000d1c   6e02     MOVWF     0x2,0x0                                                                                         
000d1e   5007     MOVF      0x7,0x0,0x0                                                                                     
000d20   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
000d22   6e03     MOVWF     0x3,0x0                                                                                         
000d24   5008     MOVF      0x8,0x0,0x0                                                                                     
000d26   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
000d28   6e04     MOVWF     0x4,0x0                                                                                         
000d2a   5009     MOVF      0x9,0x0,0x0                                                                                     
000d2c   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
000d2e   6e05     MOVWF     0x5,0x0                                                                                         
000d30   c002     MOVFF     0x2,0xfe6                                                                                       
000d32   ffe6                                                                                                               
000d34   c003     MOVFF     0x3,0xfe6                                                                                       
000d36   ffe6                                                                                                               
000d38   d8be     RCALL     0xeb6                                                                                           
000d3a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000d3c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000d3e   cff3     MOVFF     0xff3,0x0                                                                                       
000d40   f000                                                                                                               
000d42   cff4     MOVFF     0xff4,0x1                                                                                       
000d44   f001                                                                                                               
000d46   3401     RLCF      0x1,0x0,0x0                                                                                     
000d48   e204     BC        0xd52                                                                                           
000d4a   5000     MOVF      0x0,0x0,0x0                                                                                     
000d4c   080a     SUBLW     0xa                                                                                             
000d4e   0e00     MOVLW     0x0                                                                                             
000d50   5401     SUBFWB    0x1,0x0,0x0                                                                                     
000d52   e20f     BC        0xd72                                                                                           
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000d54   0efd     MOVLW     0xfd           		p->PosOnTarget = 0;                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000d56   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
000d58   ffe9                                                                                                               
000d5a   0efe     MOVLW     0xfe                                                                                            
000d5c   cfdb     MOVFF     0xfdb,0xfea                                                                                     
000d5e   ffea                                                                                                               
000d60   0e10     MOVLW     0x10                                                                                            
000d62   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000d64   0e00     MOVLW     0x0                                                                                             
000d66   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000d68   6aee     CLRF      0xee,0x0                                                                                        
000d6a   6aee     CLRF      0xee,0x0                                                                                        
000d6c   6aee     CLRF      0xee,0x0                                                                                        
000d6e   6aee     CLRF      0xee,0x0                                                                                        
000d70   d00f     BRA       0xd90          	} else {                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000d72   0efd     MOVLW     0xfd           		p->PosOnTarget = 1;                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000d74   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
000d76   ffe9                                                                                                               
000d78   0efe     MOVLW     0xfe                                                                                            
000d7a   cfdb     MOVFF     0xfdb,0xfea                                                                                     
000d7c   ffea                                                                                                               
000d7e   0e10     MOVLW     0x10                                                                                            
000d80   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000d82   0e00     MOVLW     0x0                                                                                             
000d84   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000d86   0e01     MOVLW     0x1                                                                                             
000d88   6eee     MOVWF     0xee,0x0                                                                                        
000d8a   6aee     CLRF      0xee,0x0                                                                                        
000d8c   6aee     CLRF      0xee,0x0                                                                                        
000d8e   6aee     CLRF      0xee,0x0                                                                                        
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           #ifdef DRIVE_DEBUG                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	printf("PSet:%ld VSet:%d velErr:%d Enc:%ld Drive:%d Perr:%ld\r\n", p->Psetpoint, p->Vsetpoint, velErr, encoder, Drive*motor_direction, (p->Psetpoint - encoder)); C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000d90   0e06     MOVLW     0x6            	return (p->Drive = (Drive*motor_direction)+127);                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000d92   cfdb     MOVFF     0xfdb,0x41                                                                                      
000d94   f041                                                                                                               
000d96   0e07     MOVLW     0x7                                                                                             
000d98   cfdb     MOVFF     0xfdb,0x42                                                                                      
000d9a   f042                                                                                                               
000d9c   0ef7     MOVLW     0xf7                                                                                            
000d9e   cfdb     MOVFF     0xfdb,0x46                                                                                      
000da0   f046                                                                                                               
000da2   0ef8     MOVLW     0xf8                                                                                            
000da4   cfdb     MOVFF     0xfdb,0x47                                                                                      
000da6   f047                                                                                                               
000da8   ec26     CALL      0x444c,0x0                                                                                      
000daa   f022                                                                                                               
000dac   c03f     MOVFF     0x3f,0x0                                                                                        
000dae   f000                                                                                                               
000db0   c040     MOVFF     0x40,0x1                                                                                        
000db2   f001                                                                                                               
000db4   0e7f     MOVLW     0x7f                                                                                            
000db6   2600     ADDWF     0x0,0x1,0x0                                                                                     
000db8   0e00     MOVLW     0x0                                                                                             
000dba   2201     ADDWFC    0x1,0x1,0x0                                                                                     
000dbc   0efd     MOVLW     0xfd                                                                                            
000dbe   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
000dc0   ffe9                                                                                                               
000dc2   0efe     MOVLW     0xfe                                                                                            
000dc4   cfdb     MOVFF     0xfdb,0xfea                                                                                     
000dc6   ffea                                                                                                               
000dc8   0e20     MOVLW     0x20                                                                                            
000dca   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000dcc   0e00     MOVLW     0x0                                                                                             
000dce   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000dd0   c000     MOVFF     0x0,0xfee                                                                                       
000dd2   ffee                                                                                                               
000dd4   c001     MOVFF     0x1,0xfed                                                                                       
000dd6   ffed                                                                                                               
000dd8   c000     MOVFF     0x0,0xff3                                                                                       
000dda   fff3                                                                                                               
000ddc   c001     MOVFF     0x1,0xff4                                                                                       
000dde   fff4                                                                                                               
000de0   d000     BRA       0xde2                                                                                           
000de2   cfd9     MOVFF     0xfd9,0xfe1    }                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000de4   ffe1                                                                                                               
000de6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000de8   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
000dea   ffd9                                                                                                               
000dec   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000dee   cfd9     MOVFF     0xfd9,0xfe6    int deadBandInput(int in, int deadBand)                                          C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000df0   ffe6                                                                                                               
000df2   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000df4   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000df6   0efd     MOVLW     0xfd           	if(abs(in - 127) <= deadBand)                                                   C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000df8   cfdb     MOVFF     0xfdb,0x2                                                                                       
000dfa   f002                                                                                                               
000dfc   0efe     MOVLW     0xfe                                                                                            
000dfe   cfdb     MOVFF     0xfdb,0x3                                                                                       
000e00   f003                                                                                                               
000e02   0e7f     MOVLW     0x7f                                                                                            
000e04   5e02     SUBWF     0x2,0x1,0x0                                                                                     
000e06   0e00     MOVLW     0x0                                                                                             
000e08   5a03     SUBWFB    0x3,0x1,0x0                                                                                     
000e0a   c002     MOVFF     0x2,0xfe6                                                                                       
000e0c   ffe6                                                                                                               
000e0e   c003     MOVFF     0x3,0xfe6                                                                                       
000e10   ffe6                                                                                                               
000e12   d851     RCALL     0xeb6                                                                                           
000e14   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e16   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e18   cff3     MOVFF     0xff3,0x0                                                                                       
000e1a   f000                                                                                                               
000e1c   cff4     MOVFF     0xff4,0x1                                                                                       
000e1e   f001                                                                                                               
000e20   0efb     MOVLW     0xfb                                                                                            
000e22   cfdb     MOVFF     0xfdb,0x4                                                                                       
000e24   f004                                                                                                               
000e26   0efc     MOVLW     0xfc                                                                                            
000e28   cfdb     MOVFF     0xfdb,0x5                                                                                       
000e2a   f005                                                                                                               
000e2c   5005     MOVF      0x5,0x0,0x0                                                                                     
000e2e   1801     XORWF     0x1,0x0,0x0                                                                                     
000e30   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
000e32   d002     BRA       0xe38                                                                                           
000e34   3401     RLCF      0x1,0x0,0x0                                                                                     
000e36   d004     BRA       0xe40                                                                                           
000e38   5000     MOVF      0x0,0x0,0x0                                                                                     
000e3a   5c04     SUBWF     0x4,0x0,0x0                                                                                     
000e3c   5001     MOVF      0x1,0x0,0x0                                                                                     
000e3e   5805     SUBWFB    0x5,0x0,0x0                                                                                     
000e40   e304     BNC       0xe4a                                                                                           
000e42   6af3     CLRF      0xf3,0x0       		return 0;                                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000e44   6af4     CLRF      0xf4,0x0                                                                                        
000e46   d033     BRA       0xeae                                                                                           
000e48   d023     BRA       0xe90          	else                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000e4a   0efd     MOVLW     0xfd           		if((in - 127) > 125)                                                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000e4c   cfdb     MOVFF     0xfdb,0x0                                                                                       
000e4e   f000                                                                                                               
000e50   0efe     MOVLW     0xfe                                                                                            
000e52   cfdb     MOVFF     0xfdb,0x1                                                                                       
000e54   f001                                                                                                               
000e56   0e7f     MOVLW     0x7f                                                                                            
000e58   5e00     SUBWF     0x0,0x1,0x0                                                                                     
000e5a   0e00     MOVLW     0x0                                                                                             
000e5c   5a01     SUBWFB    0x1,0x1,0x0                                                                                     
000e5e   3401     RLCF      0x1,0x0,0x0                                                                                     
000e60   e204     BC        0xe6a                                                                                           
000e62   5000     MOVF      0x0,0x0,0x0                                                                                     
000e64   087d     SUBLW     0x7d                                                                                            
000e66   0e00     MOVLW     0x0                                                                                             
000e68   5401     SUBFWB    0x1,0x0,0x0                                                                                     
000e6a   e212     BC        0xe90                                                                                           
000e6c   0efd     MOVLW     0xfd           			return -(in - 127); //Joysticks want to flip direction when > 125             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000e6e   cfdb     MOVFF     0xfdb,0x0                                                                                       
000e70   f000                                                                                                               
000e72   0efe     MOVLW     0xfe                                                                                            
000e74   cfdb     MOVFF     0xfdb,0x1                                                                                       
000e76   f001                                                                                                               
000e78   0e7f     MOVLW     0x7f                                                                                            
000e7a   5e00     SUBWF     0x0,0x1,0x0                                                                                     
000e7c   0e00     MOVLW     0x0                                                                                             
000e7e   5a01     SUBWFB    0x1,0x1,0x0                                                                                     
000e80   6c00     NEGF      0x0,0x0                                                                                         
000e82   1e01     COMF      0x1,0x1,0x0                                                                                     
000e84   2201     ADDWFC    0x1,0x1,0x0                                                                                     
000e86   c000     MOVFF     0x0,0xff3                                                                                       
000e88   fff3                                                                                                               
000e8a   c001     MOVFF     0x1,0xff4                                                                                       
000e8c   fff4                                                                                                               
000e8e   d00f     BRA       0xeae                                                                                           
000e90   0efd     MOVLW     0xfd           		return in - 127;                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000e92   cfdb     MOVFF     0xfdb,0x0                                                                                       
000e94   f000                                                                                                               
000e96   0efe     MOVLW     0xfe                                                                                            
000e98   cfdb     MOVFF     0xfdb,0x1                                                                                       
000e9a   f001                                                                                                               
000e9c   0e7f     MOVLW     0x7f                                                                                            
000e9e   5e00     SUBWF     0x0,0x1,0x0                                                                                     
000ea0   0e00     MOVLW     0x0                                                                                             
000ea2   5a01     SUBWFB    0x1,0x1,0x0                                                                                     
000ea4   c000     MOVFF     0x0,0xff3                                                                                       
000ea6   fff3                                                                                                               
000ea8   c001     MOVFF     0x1,0xff4                                                                                       
000eaa   fff4                                                                                                               
000eac   d000     BRA       0xeae                                                                                           
000eae   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000eb0   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
000eb2   ffd9                                                                                                               
000eb4   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000eb6   cfd9     MOVFF     0xfd9,0xfe6    int abs(int val)                                                                 C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000eb8   ffe6                                                                                                               
000eba   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000ebc   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000ebe   0efd     MOVLW     0xfd           	return (val >= 0)?val:-val;                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000ec0   cfdb     MOVFF     0xfdb,0x2                                                                                       
000ec2   f002                                                                                                               
000ec4   0efe     MOVLW     0xfe                                                                                            
000ec6   cfdb     MOVFF     0xfdb,0x3                                                                                       
000ec8   f003                                                                                                               
000eca   0100     MOVLB     0x0                                                                                             
000ecc   0e80     MOVLW     0x80                                                                                            
000ece   1403     ANDWF     0x3,0x0,0x0                                                                                     
000ed0   e107     BNZ       0xee0                                                                                           
000ed2   0efd     MOVLW     0xfd                                                                                            
000ed4   cfdb     MOVFF     0xfdb,0x0                                                                                       
000ed6   f000                                                                                                               
000ed8   0efe     MOVLW     0xfe                                                                                            
000eda   cfdb     MOVFF     0xfdb,0x1                                                                                       
000edc   f001                                                                                                               
000ede   d00a     BRA       0xef4                                                                                           
000ee0   0efd     MOVLW     0xfd                                                                                            
000ee2   cfdb     MOVFF     0xfdb,0x0                                                                                       
000ee4   f000                                                                                                               
000ee6   0efe     MOVLW     0xfe                                                                                            
000ee8   cfdb     MOVFF     0xfdb,0x1                                                                                       
000eea   f001                                                                                                               
000eec   6c00     NEGF      0x0,0x0                                                                                         
000eee   1e01     COMF      0x1,0x1,0x0                                                                                     
000ef0   0e00     MOVLW     0x0                                                                                             
000ef2   2201     ADDWFC    0x1,0x1,0x0                                                                                     
000ef4   c000     MOVFF     0x0,0xff3                                                                                       
000ef6   fff3                                                                                                               
000ef8   c001     MOVFF     0x1,0xff4                                                                                       
000efa   fff4                                                                                                               
000efc   d000     BRA       0xefe                                                                                           
000efe   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000f00   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
000f02   ffd9                                                                                                               
000f04   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           int turn()                                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	//We'll start with 180 degrees for now                                          C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	static int state = 0;                                                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	static int targetDeg = -1800;                                                   C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	static int errDeg;                                                              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000f06   0e01     MOVLW     0x1            	switch(state)                                                                   C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000f08   0102     MOVLB     0x2                                                                                             
000f0a   19c4     XORWF     0xc4,0x0,0x1                                                                                    
000f0c   e101     BNZ       0xf10                                                                                           
000f0e   51c5     MOVF      0xc5,0x0,0x1                                                                                    
000f10   e024     BZ        0xf5a                                                                                           
000f12   51c4     MOVF      0xc4,0x0,0x1                                                                                    
000f14   e101     BNZ       0xf18                                                                                           
000f16   51c5     MOVF      0xc5,0x0,0x1                                                                                    
000f18   e001     BZ        0xf1c                                                                                           
000f1a   d039     BRA       0xf8e                                                                                           
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		case 0:                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000f1c   0e42     MOVLW     0x42           			Left.Vsetpoint = (Right.Vsetpoint * 66) / 100;                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000f1e   6e41     MOVWF     0x41,0x0                                                                                        
000f20   6a42     CLRF      0x42,0x0                                                                                        
000f22   c1a8     MOVFF     0x1a8,0x46                                                                                      
000f24   f046                                                                                                               
000f26   c1a9     MOVFF     0x1a9,0x47                                                                                      
000f28   f047                                                                                                               
000f2a   ec26     CALL      0x444c,0x0                                                                                      
000f2c   f022                                                                                                               
000f2e   c03f     MOVFF     0x3f,0x186                                                                                      
000f30   f186                                                                                                               
000f32   c040     MOVFF     0x40,0x187                                                                                      
000f34   f187                                                                                                               
000f36   0e64     MOVLW     0x64                                                                                            
000f38   6e46     MOVWF     0x46,0x0                                                                                        
000f3a   6a47     CLRF      0x47,0x0                                                                                        
000f3c   c186     MOVFF     0x186,0x41                                                                                      
000f3e   f041                                                                                                               
000f40   c187     MOVFF     0x187,0x42                                                                                      
000f42   f042                                                                                                               
000f44   eccc     CALL      0x4398,0x0                                                                                      
000f46   f021                                                                                                               
000f48   c041     MOVFF     0x41,0x186                                                                                      
000f4a   f186                                                                                                               
000f4c   c042     MOVFF     0x42,0x187                                                                                      
000f4e   f187                                                                                                               
000f50   0102     MOVLB     0x2            			state++;                                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000f52   2bc4     INCF      0xc4,0x1,0x1                                                                                    
000f54   0e00     MOVLW     0x0                                                                                             
000f56   23c5     ADDWFC    0xc5,0x1,0x1                                                                                    
000f58   d01a     BRA       0xf8e          		break;                                                                         C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		//Smart, smooth turn                                                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           #ifdef SMART_TURN                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		case 1:                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			if(abs(Left.vel - Left.Vsetpoint) <= 2)                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           				errDeg = Get_Gyro_Angle(); 				//Compensate for decceleration/acceleration time, in degrees of error C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           				state++;                                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		break;                                                                         C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		case 2:                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			if(Get_Gyro_Angle() <= targetDeg - errDeg)	//Subtract error                   C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           				Left.Vsetpoint = Right.Vsetpoint;                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           				state++;                                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		break;                                                                         C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		case 3:                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			if(Get_Gyro_Angle() <= targetDeg)                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           				return 1;								//I'm done                                                  C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		break;	                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		//Stupid Turning                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           #ifndef SMART_TURN                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		case 1:                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000f5a   ec26     CALL      0x4e4c,0x0     			if(Get_Gyro_Angle() < -1500)                                                  C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000f5c   f027                                                                                                               
000f5e   5042     MOVF      0x42,0x0,0x0                                                                                    
000f60   0aff     XORLW     0xff                                                                                            
000f62   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
000f64   d002     BRA       0xf6a                                                                                           
000f66   80d8     BSF       0xd8,0x0,0x0                                                                                    
000f68   d008     BRA       0xf7a                                                                                           
000f6a   0e24     MOVLW     0x24                                                                                            
000f6c   5c3f     SUBWF     0x3f,0x0,0x0                                                                                    
000f6e   0efa     MOVLW     0xfa                                                                                            
000f70   5840     SUBWFB    0x40,0x0,0x0                                                                                    
000f72   0eff     MOVLW     0xff                                                                                            
000f74   5841     SUBWFB    0x41,0x0,0x0                                                                                    
000f76   0eff     MOVLW     0xff                                                                                            
000f78   5842     SUBWFB    0x42,0x0,0x0                                                                                    
000f7a   e208     BC        0xf8c                                                                                           
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000f7c   c1a8     MOVFF     0x1a8,0x186    				Left.Vsetpoint = Right.Vsetpoint;                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000f7e   f186                                                                                                               
000f80   c1a9     MOVFF     0x1a9,0x187                                                                                     
000f82   f187                                                                                                               
000f84   0e01     MOVLW     0x1            				return 1;                                                                    C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000f86   6ef3     MOVWF     0xf3,0x0                                                                                        
000f88   6af4     CLRF      0xf4,0x0                                                                                        
000f8a   d004     BRA       0xf94                                                                                           
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000f8c   d000     BRA       0xf8e          		break;                                                                         C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	}		                                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000f8e   6af3     CLRF      0xf3,0x0       	return 0;				//Default response; not done turning                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000f90   6af4     CLRF      0xf4,0x0                                                                                        
000f92   d000     BRA       0xf94                                                                                           
000f94   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           void Launcher_State_Machine(void)                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	static char launcher_safety_change = 0;                                         C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	static char armedBefore = 0;						//We're not armed at the beginning, no need to disarm C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	static char state2 = 0;                                                         C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	static char prevState;                                                          C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	static long prevTmr;                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	static char state;                                                              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	static char launcher_safety = 1;					//Start with safety activated              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000f96   0102     MOVLB     0x2            	if(LAUNCHER_SW_SAFETY && !launcher_safety_change)	//Safety switch debounce      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000f98   5122     MOVF      0x22,0x0,0x1                                                                                    
000f9a   0b40     ANDLW     0x40                                                                                            
000f9c   e00c     BZ        0xfb6                                                                                           
000f9e   0102     MOVLB     0x2                                                                                             
000fa0   51c8     MOVF      0xc8,0x0,0x1                                                                                    
000fa2   e109     BNZ       0xfb6                                                                                           
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000fa4   51cb     MOVF      0xcb,0x0,0x1   		launcher_safety = !launcher_safety;                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000fa6   e002     BZ        0xfac                                                                                           
000fa8   0e00     MOVLW     0x0                                                                                             
000faa   d001     BRA       0xfae                                                                                           
000fac   0e01     MOVLW     0x1                                                                                             
000fae   6fcb     MOVWF     0xcb,0x1                                                                                        
000fb0   0e01     MOVLW     0x1            		launcher_safety_change = 1;                                                    C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000fb2   6fc8     MOVWF     0xc8,0x1                                                                                        
000fb4   d005     BRA       0xfc0          	} else if(!LAUNCHER_SW_SAFETY) {                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000fb6   0102     MOVLB     0x2                                                                                             
000fb8   bd22     BTFSC     0x22,0x6,0x1                                                                                    
000fba   d002     BRA       0xfc0                                                                                           
000fbc   0102     MOVLB     0x2            		launcher_safety_change = 0;                                                    C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000fbe   6bc8     CLRF      0xc8,0x1                                                                                        
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000fc0   0102     MOVLB     0x2            	if(launcher_safety)									//Force disarm if safed                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000fc2   51cb     MOVF      0xcb,0x0,0x1                                                                                    
000fc4   e003     BZ        0xfcc                                                                                           
000fc6   0102     MOVLB     0x2            		state = LAUNCHER_DISARM;                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000fc8   0e02     MOVLW     0x2                                                                                             
000fca   6fbf     MOVWF     0xbf,0x1                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000fcc   0102     MOVLB     0x2            	switch(state)                                                                   C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000fce   51bf     MOVF      0xbf,0x0,0x1                                                                                    
000fd0   0a01     XORLW     0x1                                                                                             
000fd2   e101     BNZ       0xfd6                                                                                           
000fd4   d11f     BRA       0x1214                                                                                          
000fd6   0a01     XORLW     0x1                                                                                             
000fd8   e06a     BZ        0x10ae                                                                                          
000fda   0a02     XORLW     0x2                                                                                             
000fdc   e001     BZ        0xfe0                                                                                           
000fde   d15e     BRA       0x129c                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		case LAUNCHER_DISARM:							//Return the arm to a known, disarmed position (remember-no absolute sensors) C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000fe0   0102     MOVLB     0x2            			switch(state2)                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000fe2   51ca     MOVF      0xca,0x0,0x1                                                                                    
000fe4   0a04     XORLW     0x4                                                                                             
000fe6   e057     BZ        0x1096                                                                                          
000fe8   0a07     XORLW     0x7                                                                                             
000fea   e02e     BZ        0x1048                                                                                          
000fec   0a01     XORLW     0x1                                                                                             
000fee   e01f     BZ        0x102e                                                                                          
000ff0   0a03     XORLW     0x3                                                                                             
000ff2   e00f     BZ        0x1012                                                                                          
000ff4   0a01     XORLW     0x1                                                                                             
000ff6   e001     BZ        0xffa                                                                                           
000ff8   d057     BRA       0x10a8                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           				case 0:                                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000ffa   0102     MOVLB     0x2            					LAUNCHER = LAUNCHER_REV;                                                    C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000ffc   6b04     CLRF      0x4,0x1                                                                                         
                                           					                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
000ffe   b888     BTFSC     0x88,0x4,0x0   					if(LAUNCHER_LIM)                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001000   d002     BRA       0x1006                                                                                          
001002   0102     MOVLB     0x2            						state2++;                                                                  C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001004   2bca     INCF      0xca,0x1,0x1                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001006   0102     MOVLB     0x2            					if(!armedBefore)                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001008   51c9     MOVF      0xc9,0x0,0x1                                                                                    
00100a   e102     BNZ       0x1010                                                                                          
00100c   0e04     MOVLW     0x4            						state2 = 4;	                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00100e   6fca     MOVWF     0xca,0x1                                                                                        
001010   d04b     BRA       0x10a8         				break;                                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           				                                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           				case 1:                                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001012   0102     MOVLB     0x2            					LAUNCHER = STOP;                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001014   0e7f     MOVLW     0x7f                                                                                            
001016   6f04     MOVWF     0x4,0x1                                                                                         
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001018   d9a9     RCALL     0x136c         					if(Launcher_Release())                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00101a   cff3     MOVFF     0xff3,0x0                                                                                       
00101c   f000                                                                                                               
00101e   cff4     MOVFF     0xff4,0x1                                                                                       
001020   f001                                                                                                               
001022   5000     MOVF      0x0,0x0,0x0                                                                                     
001024   1001     IORWF     0x1,0x0,0x0                                                                                     
001026   e002     BZ        0x102c                                                                                          
001028   0102     MOVLB     0x2            						state2++;                                                                  C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00102a   2bca     INCF      0xca,0x1,0x1                                                                                    
00102c   d03d     BRA       0x10a8         				break;                                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           				case 2:                                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00102e   c287     MOVFF     0x287,0x2bb    					prevTmr = timerTicks;                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001030   f2bb                                                                                                               
001032   c288     MOVFF     0x288,0x2bc                                                                                     
001034   f2bc                                                                                                               
001036   c289     MOVFF     0x289,0x2bd                                                                                     
001038   f2bd                                                                                                               
00103a   c28a     MOVFF     0x28a,0x2be                                                                                     
00103c   f2be                                                                                                               
00103e   0102     MOVLB     0x2            					LAUNCHER = LAUNCHER_FWD;                                                    C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001040   6904     SETF      0x4,0x1                                                                                         
001042   0102     MOVLB     0x2            					state2++;                                                                   C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001044   2bca     INCF      0xca,0x1,0x1                                                                                    
001046   d030     BRA       0x10a8         				break;                                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           				case 3:                                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001048   0ebb     MOVLW     0xbb           					if((timerTicks - prevTmr) > LAUNCHER_ARM_TIME)                              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00104a   6ee9     MOVWF     0xe9,0x0                                                                                        
00104c   0e02     MOVLW     0x2                                                                                             
00104e   6eea     MOVWF     0xea,0x0                                                                                        
001050   50ee     MOVF      0xee,0x0,0x0                                                                                    
001052   0102     MOVLB     0x2                                                                                             
001054   5d87     SUBWF     0x87,0x0,0x1                                                                                    
001056   6e00     MOVWF     0x0,0x0                                                                                         
001058   50ee     MOVF      0xee,0x0,0x0                                                                                    
00105a   5988     SUBWFB    0x88,0x0,0x1                                                                                    
00105c   6e01     MOVWF     0x1,0x0                                                                                         
00105e   50ee     MOVF      0xee,0x0,0x0                                                                                    
001060   5989     SUBWFB    0x89,0x0,0x1                                                                                    
001062   6e02     MOVWF     0x2,0x0                                                                                         
001064   50ee     MOVF      0xee,0x0,0x0                                                                                    
001066   598a     SUBWFB    0x8a,0x0,0x1                                                                                    
001068   6e03     MOVWF     0x3,0x0                                                                                         
00106a   0e00     MOVLW     0x0                                                                                             
00106c   1803     XORWF     0x3,0x0,0x0                                                                                     
00106e   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
001070   d002     BRA       0x1076                                                                                          
001072   3403     RLCF      0x3,0x0,0x0                                                                                     
001074   d009     BRA       0x1088                                                                                          
001076   0ec8     MOVLW     0xc8                                                                                            
001078   80d8     BSF       0xd8,0x0,0x0                                                                                    
00107a   5400     SUBFWB    0x0,0x0,0x0                                                                                     
00107c   0e00     MOVLW     0x0                                                                                             
00107e   5401     SUBFWB    0x1,0x0,0x0                                                                                     
001080   0e00     MOVLW     0x0                                                                                             
001082   5402     SUBFWB    0x2,0x0,0x0                                                                                     
001084   0e00     MOVLW     0x0                                                                                             
001086   5403     SUBFWB    0x3,0x0,0x0                                                                                     
001088   e205     BC        0x1094                                                                                          
                                           					{                                                                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00108a   0102     MOVLB     0x2            						LAUNCHER = STOP;                                                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00108c   0e7f     MOVLW     0x7f                                                                                            
00108e   6f04     MOVWF     0x4,0x1                                                                                         
001090   0102     MOVLB     0x2            						state2++;                                                                  C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001092   2bca     INCF      0xca,0x1,0x1                                                                                    
                                           					}                                                                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001094   d009     BRA       0x10a8         				break;                                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           				case 4:                                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001096   0102     MOVLB     0x2            					LAUNCHER = STOP;                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001098   0e7f     MOVLW     0x7f                                                                                            
00109a   6f04     MOVWF     0x4,0x1                                                                                         
00109c   0102     MOVLB     0x2            					if(!launcher_safety)                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00109e   51cb     MOVF      0xcb,0x0,0x1                                                                                    
0010a0   e102     BNZ       0x10a6                                                                                          
0010a2   0102     MOVLB     0x2            						state = LAUNCHER_ARMING;                                                   C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0010a4   6bbf     CLRF      0xbf,0x1                                                                                        
0010a6   d000     BRA       0x10a8         				break;                                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			}	                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0010a8   0102     MOVLB     0x2            			Pwm2_red = 0;                                                                 C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0010aa   9700     BCF       0x0,0x3,0x1                                                                                     
0010ac   d0f7     BRA       0x129c         		break;                                                                         C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		case LAUNCHER_ARMING:							//Partially arm, then fully arm the launcher       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0010ae   0102     MOVLB     0x2            			armedBefore = 1;                                                              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0010b0   0e01     MOVLW     0x1                                                                                             
0010b2   6fc9     MOVWF     0xc9,0x1                                                                                        
0010b4   51ca     MOVF      0xca,0x0,0x1   			switch(state2)                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0010b6   0a03     XORLW     0x3                                                                                             
0010b8   e05f     BZ        0x1178                                                                                          
0010ba   0a01     XORLW     0x1                                                                                             
0010bc   e04e     BZ        0x115a                                                                                          
0010be   0a03     XORLW     0x3                                                                                             
0010c0   e010     BZ        0x10e2                                                                                          
0010c2   0a01     XORLW     0x1                                                                                             
0010c4   e001     BZ        0x10c8                                                                                          
0010c6   d07f     BRA       0x11c6                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           				case 0:                                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0010c8   c287     MOVFF     0x287,0x2bb    					prevTmr = timerTicks;                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0010ca   f2bb                                                                                                               
0010cc   c288     MOVFF     0x288,0x2bc                                                                                     
0010ce   f2bc                                                                                                               
0010d0   c289     MOVFF     0x289,0x2bd                                                                                     
0010d2   f2bd                                                                                                               
0010d4   c28a     MOVFF     0x28a,0x2be                                                                                     
0010d6   f2be                                                                                                               
0010d8   0102     MOVLB     0x2            					LAUNCHER = LAUNCHER_REV;                                                    C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0010da   6b04     CLRF      0x4,0x1                                                                                         
0010dc   0102     MOVLB     0x2            					state2++;                                                                   C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0010de   2bca     INCF      0xca,0x1,0x1                                                                                    
0010e0   d072     BRA       0x11c6         				break;                                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           				case 1:                                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0010e2   0ebb     MOVLW     0xbb           					if((timerTicks - prevTmr) > LAUNCHER_PREARM_TIME)                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0010e4   6ee9     MOVWF     0xe9,0x0                                                                                        
0010e6   0e02     MOVLW     0x2                                                                                             
0010e8   6eea     MOVWF     0xea,0x0                                                                                        
0010ea   50ee     MOVF      0xee,0x0,0x0                                                                                    
0010ec   0102     MOVLB     0x2                                                                                             
0010ee   5d87     SUBWF     0x87,0x0,0x1                                                                                    
0010f0   6e00     MOVWF     0x0,0x0                                                                                         
0010f2   50ee     MOVF      0xee,0x0,0x0                                                                                    
0010f4   5988     SUBWFB    0x88,0x0,0x1                                                                                    
0010f6   6e01     MOVWF     0x1,0x0                                                                                         
0010f8   50ee     MOVF      0xee,0x0,0x0                                                                                    
0010fa   5989     SUBWFB    0x89,0x0,0x1                                                                                    
0010fc   6e02     MOVWF     0x2,0x0                                                                                         
0010fe   50ee     MOVF      0xee,0x0,0x0                                                                                    
001100   598a     SUBWFB    0x8a,0x0,0x1                                                                                    
001102   6e03     MOVWF     0x3,0x0                                                                                         
001104   0e00     MOVLW     0x0                                                                                             
001106   1803     XORWF     0x3,0x0,0x0                                                                                     
001108   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
00110a   d002     BRA       0x1110                                                                                          
00110c   3403     RLCF      0x3,0x0,0x0                                                                                     
00110e   d009     BRA       0x1122                                                                                          
001110   0ec8     MOVLW     0xc8                                                                                            
001112   80d8     BSF       0xd8,0x0,0x0                                                                                    
001114   5400     SUBFWB    0x0,0x0,0x0                                                                                     
001116   0e00     MOVLW     0x0                                                                                             
001118   5401     SUBFWB    0x1,0x0,0x0                                                                                     
00111a   0e00     MOVLW     0x0                                                                                             
00111c   5402     SUBFWB    0x2,0x0,0x0                                                                                     
00111e   0e00     MOVLW     0x0                                                                                             
001120   5403     SUBFWB    0x3,0x0,0x0                                                                                     
001122   e21a     BC        0x1158                                                                                          
                                           					{                                                                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001124   0e39     MOVLW     0x39           						printf("Launcher Stopped");                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001126   6e00     MOVWF     0x0,0x0                                                                                         
001128   0e55     MOVLW     0x55                                                                                            
00112a   6e01     MOVWF     0x1,0x0                                                                                         
00112c   6a02     CLRF      0x2,0x0                                                                                         
00112e   c000     MOVFF     0x0,0xfe6                                                                                       
001130   ffe6                                                                                                               
001132   c001     MOVFF     0x1,0xfe6                                                                                       
001134   ffe6                                                                                                               
001136   c002     MOVFF     0x2,0xfe6                                                                                       
001138   ffe6                                                                                                               
00113a   ec89     CALL      0x5d12,0x0                                                                                      
00113c   f02e                                                                                                               
00113e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001140   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001142   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001144   0102     MOVLB     0x2            						LAUNCHER = STOP;				//Launcher Victor must be set to BRAKE                 C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001146   0e7f     MOVLW     0x7f                                                                                            
001148   6f04     MOVWF     0x4,0x1                                                                                         
                                           					                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00114a   0102     MOVLB     0x2            						if(LAUNCHER_SW_FIRE)                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00114c   a922     BTFSS     0x22,0x4,0x1                                                                                    
00114e   d004     BRA       0x1158                                                                                          
                                           						{                                                                          C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001150   0102     MOVLB     0x2            							LAUNCHER = LAUNCHER_REV;                                                  C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001152   6b04     CLRF      0x4,0x1                                                                                         
001154   0102     MOVLB     0x2            							state2++;                                                                 C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001156   2bca     INCF      0xca,0x1,0x1                                                                                    
                                           						}                                                                          C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           					}                                                                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001158   d036     BRA       0x11c6         				break;                                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           					                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           				case 2:                                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00115a   b888     BTFSC     0x88,0x4,0x0   					if(LAUNCHER_LIM)                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00115c   d00c     BRA       0x1176                                                                                          
                                           					{                                                                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00115e   c287     MOVFF     0x287,0x2bb    						prevTmr = timerTicks;                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001160   f2bb                                                                                                               
001162   c288     MOVFF     0x288,0x2bc                                                                                     
001164   f2bc                                                                                                               
001166   c289     MOVFF     0x289,0x2bd                                                                                     
001168   f2bd                                                                                                               
00116a   c28a     MOVFF     0x28a,0x2be                                                                                     
00116c   f2be                                                                                                               
00116e   0102     MOVLB     0x2            						LAUNCHER = LAUNCHER_FWD;                                                   C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001170   6904     SETF      0x4,0x1                                                                                         
001172   0102     MOVLB     0x2            						state2++;                                                                  C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001174   2bca     INCF      0xca,0x1,0x1                                                                                    
                                           					}                                                                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001176   d027     BRA       0x11c6         				break;                                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           				case 3:                                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001178   0ebb     MOVLW     0xbb           					if((timerTicks - prevTmr) >= LAUNCHER_ARM_TIME)                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00117a   6ee9     MOVWF     0xe9,0x0                                                                                        
00117c   0e02     MOVLW     0x2                                                                                             
00117e   6eea     MOVWF     0xea,0x0                                                                                        
001180   50ee     MOVF      0xee,0x0,0x0                                                                                    
001182   0102     MOVLB     0x2                                                                                             
001184   5d87     SUBWF     0x87,0x0,0x1                                                                                    
001186   6e00     MOVWF     0x0,0x0                                                                                         
001188   50ee     MOVF      0xee,0x0,0x0                                                                                    
00118a   5988     SUBWFB    0x88,0x0,0x1                                                                                    
00118c   6e01     MOVWF     0x1,0x0                                                                                         
00118e   50ee     MOVF      0xee,0x0,0x0                                                                                    
001190   5989     SUBWFB    0x89,0x0,0x1                                                                                    
001192   6e02     MOVWF     0x2,0x0                                                                                         
001194   50ee     MOVF      0xee,0x0,0x0                                                                                    
001196   598a     SUBWFB    0x8a,0x0,0x1                                                                                    
001198   6e03     MOVWF     0x3,0x0                                                                                         
00119a   5003     MOVF      0x3,0x0,0x0                                                                                     
00119c   0a00     XORLW     0x0                                                                                             
00119e   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
0011a0   d002     BRA       0x11a6                                                                                          
0011a2   90d8     BCF       0xd8,0x0,0x0                                                                                    
0011a4   d008     BRA       0x11b6                                                                                          
0011a6   0ec8     MOVLW     0xc8                                                                                            
0011a8   5c00     SUBWF     0x0,0x0,0x0                                                                                     
0011aa   0e00     MOVLW     0x0                                                                                             
0011ac   5801     SUBWFB    0x1,0x0,0x0                                                                                     
0011ae   0e00     MOVLW     0x0                                                                                             
0011b0   5802     SUBWFB    0x2,0x0,0x0                                                                                     
0011b2   0e00     MOVLW     0x0                                                                                             
0011b4   5803     SUBWFB    0x3,0x0,0x0                                                                                     
0011b6   e306     BNC       0x11c4                                                                                          
                                           					{                                                                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0011b8   0102     MOVLB     0x2            						LAUNCHER = STOP;                                                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0011ba   0e7f     MOVLW     0x7f                                                                                            
0011bc   6f04     MOVWF     0x4,0x1                                                                                         
0011be   0102     MOVLB     0x2            						state = LAUNCHER_ARMED;                                                    C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0011c0   0e01     MOVLW     0x1                                                                                             
0011c2   6fbf     MOVWF     0xbf,0x1                                                                                        
                                           					}                                                                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0011c4   d000     BRA       0x11c6         				break;                                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			}	                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			                                                                              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0011c6   c287     MOVFF     0x287,0x0      			if(timerTicks % 4 == 0)                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0011c8   f000                                                                                                               
0011ca   c288     MOVFF     0x288,0x1                                                                                       
0011cc   f001                                                                                                               
0011ce   c289     MOVFF     0x289,0x2                                                                                       
0011d0   f002                                                                                                               
0011d2   c28a     MOVFF     0x28a,0x3                                                                                       
0011d4   f003                                                                                                               
0011d6   0e04     MOVLW     0x4                                                                                             
0011d8   6e44     MOVWF     0x44,0x0                                                                                        
0011da   6a45     CLRF      0x45,0x0                                                                                        
0011dc   6a46     CLRF      0x46,0x0                                                                                        
0011de   6a47     CLRF      0x47,0x0                                                                                        
0011e0   c000     MOVFF     0x0,0x3f                                                                                        
0011e2   f03f                                                                                                               
0011e4   c001     MOVFF     0x1,0x40                                                                                        
0011e6   f040                                                                                                               
0011e8   c002     MOVFF     0x2,0x41                                                                                        
0011ea   f041                                                                                                               
0011ec   c003     MOVFF     0x3,0x42                                                                                        
0011ee   f042                                                                                                               
0011f0   ecf2     CALL      0x43e4,0x0                                                                                      
0011f2   f021                                                                                                               
0011f4   c03b     MOVFF     0x3b,0x0                                                                                        
0011f6   f000                                                                                                               
0011f8   c03c     MOVFF     0x3c,0x1                                                                                        
0011fa   f001                                                                                                               
0011fc   c03d     MOVFF     0x3d,0x2                                                                                        
0011fe   f002                                                                                                               
001200   c03e     MOVFF     0x3e,0x3                                                                                        
001202   f003                                                                                                               
001204   5000     MOVF      0x0,0x0,0x0                                                                                     
001206   1001     IORWF     0x1,0x0,0x0                                                                                     
001208   1002     IORWF     0x2,0x0,0x0                                                                                     
00120a   1003     IORWF     0x3,0x0,0x0                                                                                     
00120c   e102     BNZ       0x1212                                                                                          
00120e   0102     MOVLB     0x2            				Pwm2_red = !Pwm2_red;					//Cool blink                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001210   7700     BTG       0x0,0x3,0x1                                                                                     
001212   d044     BRA       0x129c         		break;                                                                         C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		case LAUNCHER_ARMED:							//Watch for fire command, launch, pause, then reload C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001214   0102     MOVLB     0x2            			switch(state2)                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001216   51ca     MOVF      0xca,0x0,0x1                                                                                    
001218   0a01     XORLW     0x1                                                                                             
00121a   e019     BZ        0x124e                                                                                          
00121c   0a01     XORLW     0x1                                                                                             
00121e   e001     BZ        0x1222                                                                                          
001220   d03a     BRA       0x1296                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           				case 0:                                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001222   0102     MOVLB     0x2            					if(LAUNCHER_SW_FIRE)                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001224   a922     BTFSS     0x22,0x4,0x1                                                                                    
001226   d012     BRA       0x124c                                                                                          
                                           					{                                                                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001228   d8a1     RCALL     0x136c         						if(Launcher_Release())                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00122a   cff3     MOVFF     0xff3,0x0                                                                                       
00122c   f000                                                                                                               
00122e   cff4     MOVFF     0xff4,0x1                                                                                       
001230   f001                                                                                                               
001232   5000     MOVF      0x0,0x0,0x0                                                                                     
001234   1001     IORWF     0x1,0x0,0x0                                                                                     
001236   e00a     BZ        0x124c                                                                                          
                                           						{                                                                          C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001238   c287     MOVFF     0x287,0x2bb    							prevTmr = timerTicks;                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00123a   f2bb                                                                                                               
00123c   c288     MOVFF     0x288,0x2bc                                                                                     
00123e   f2bc                                                                                                               
001240   c289     MOVFF     0x289,0x2bd                                                                                     
001242   f2bd                                                                                                               
001244   c28a     MOVFF     0x28a,0x2be                                                                                     
001246   f2be                                                                                                               
001248   0102     MOVLB     0x2            							state2++;                                                                 C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00124a   2bca     INCF      0xca,0x1,0x1                                                                                    
                                           						}                                                                          C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           					}                                                                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00124c   d024     BRA       0x1296         				break;                                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           				case 1:                                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00124e   0ebb     MOVLW     0xbb           					if((timerTicks - prevTmr) > 40)                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001250   6ee9     MOVWF     0xe9,0x0                                                                                        
001252   0e02     MOVLW     0x2                                                                                             
001254   6eea     MOVWF     0xea,0x0                                                                                        
001256   50ee     MOVF      0xee,0x0,0x0                                                                                    
001258   0102     MOVLB     0x2                                                                                             
00125a   5d87     SUBWF     0x87,0x0,0x1                                                                                    
00125c   6e00     MOVWF     0x0,0x0                                                                                         
00125e   50ee     MOVF      0xee,0x0,0x0                                                                                    
001260   5988     SUBWFB    0x88,0x0,0x1                                                                                    
001262   6e01     MOVWF     0x1,0x0                                                                                         
001264   50ee     MOVF      0xee,0x0,0x0                                                                                    
001266   5989     SUBWFB    0x89,0x0,0x1                                                                                    
001268   6e02     MOVWF     0x2,0x0                                                                                         
00126a   50ee     MOVF      0xee,0x0,0x0                                                                                    
00126c   598a     SUBWFB    0x8a,0x0,0x1                                                                                    
00126e   6e03     MOVWF     0x3,0x0                                                                                         
001270   0e00     MOVLW     0x0                                                                                             
001272   1803     XORWF     0x3,0x0,0x0                                                                                     
001274   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
001276   d002     BRA       0x127c                                                                                          
001278   3403     RLCF      0x3,0x0,0x0                                                                                     
00127a   d009     BRA       0x128e                                                                                          
00127c   0e28     MOVLW     0x28                                                                                            
00127e   80d8     BSF       0xd8,0x0,0x0                                                                                    
001280   5400     SUBFWB    0x0,0x0,0x0                                                                                     
001282   0e00     MOVLW     0x0                                                                                             
001284   5401     SUBFWB    0x1,0x0,0x0                                                                                     
001286   0e00     MOVLW     0x0                                                                                             
001288   5402     SUBFWB    0x2,0x0,0x0                                                                                     
00128a   0e00     MOVLW     0x0                                                                                             
00128c   5403     SUBFWB    0x3,0x0,0x0                                                                                     
00128e   e202     BC        0x1294                                                                                          
001290   0102     MOVLB     0x2            						state = LAUNCHER_ARMING;                                                   C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001292   6bbf     CLRF      0xbf,0x1                                                                                        
001294   d000     BRA       0x1296         				break;                                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001296   0102     MOVLB     0x2            			Pwm2_red = 1;                                                                 C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001298   8700     BSF       0x0,0x3,0x1                                                                                     
00129a   d000     BRA       0x129c         		break;                                                                         C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00129c   0102     MOVLB     0x2            	if(prevState != state)								//I changed states, lets reset state2             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00129e   51bf     MOVF      0xbf,0x0,0x1                                                                                    
0012a0   5dba     SUBWF     0xba,0x0,0x1                                                                                    
0012a2   e002     BZ        0x12a8                                                                                          
0012a4   0102     MOVLB     0x2            		state2 = 0;                                                                    C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0012a6   6bca     CLRF      0xca,0x1                                                                                        
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0012a8   c2bf     MOVFF     0x2bf,0x2ba    	prevState = state;                                                              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0012aa   f2ba                                                                                                               
0012ac   0102     MOVLB     0x2            	Pwm2_green = launcher_safety;						//Make the OI look cool                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0012ae   51cb     MOVF      0xcb,0x0,0x1                                                                                    
0012b0   0102     MOVLB     0x2                                                                                             
0012b2   0b01     ANDLW     0x1                                                                                             
0012b4   6ef3     MOVWF     0xf3,0x0                                                                                        
0012b6   46f3     RLNCF     0xf3,0x1,0x0                                                                                    
0012b8   46f3     RLNCF     0xf3,0x1,0x0                                                                                    
0012ba   0efb     MOVLW     0xfb                                                                                            
0012bc   1500     ANDWF     0x0,0x0,0x1                                                                                     
0012be   10f3     IORWF     0xf3,0x0,0x0                                                                                    
0012c0   6f00     MOVWF     0x0,0x1                                                                                         
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0012c2   c287     MOVFF     0x287,0x0      	if(timerTicks % 10 == 0)                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0012c4   f000                                                                                                               
0012c6   c288     MOVFF     0x288,0x1                                                                                       
0012c8   f001                                                                                                               
0012ca   c289     MOVFF     0x289,0x2                                                                                       
0012cc   f002                                                                                                               
0012ce   c28a     MOVFF     0x28a,0x3                                                                                       
0012d0   f003                                                                                                               
0012d2   0e0a     MOVLW     0xa                                                                                             
0012d4   6e44     MOVWF     0x44,0x0                                                                                        
0012d6   6a45     CLRF      0x45,0x0                                                                                        
0012d8   6a46     CLRF      0x46,0x0                                                                                        
0012da   6a47     CLRF      0x47,0x0                                                                                        
0012dc   c000     MOVFF     0x0,0x3f                                                                                        
0012de   f03f                                                                                                               
0012e0   c001     MOVFF     0x1,0x40                                                                                        
0012e2   f040                                                                                                               
0012e4   c002     MOVFF     0x2,0x41                                                                                        
0012e6   f041                                                                                                               
0012e8   c003     MOVFF     0x3,0x42                                                                                        
0012ea   f042                                                                                                               
0012ec   ecf2     CALL      0x43e4,0x0                                                                                      
0012ee   f021                                                                                                               
0012f0   c03b     MOVFF     0x3b,0x0                                                                                        
0012f2   f000                                                                                                               
0012f4   c03c     MOVFF     0x3c,0x1                                                                                        
0012f6   f001                                                                                                               
0012f8   c03d     MOVFF     0x3d,0x2                                                                                        
0012fa   f002                                                                                                               
0012fc   c03e     MOVFF     0x3e,0x3                                                                                        
0012fe   f003                                                                                                               
001300   5000     MOVF      0x0,0x0,0x0                                                                                     
001302   1001     IORWF     0x1,0x0,0x0                                                                                     
001304   1002     IORWF     0x2,0x0,0x0                                                                                     
001306   1003     IORWF     0x3,0x0,0x0                                                                                     
001308   e130     BNZ       0x136a                                                                                          
00130a   5088     MOVF      0x88,0x0,0x0   		printf("State:%d State2:%d launchLim:%d\r\n", state, state2, LAUNCHER_LIM );   C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00130c   0b10     ANDLW     0x10                                                                                            
00130e   0a10     XORLW     0x10                                                                                            
001310   e001     BZ        0x1314                                                                                          
001312   0e01     MOVLW     0x1                                                                                             
001314   6e00     MOVWF     0x0,0x0                                                                                         
001316   6a01     CLRF      0x1,0x0                                                                                         
001318   be00     BTFSC     0x0,0x7,0x0                                                                                     
00131a   6801     SETF      0x1,0x0                                                                                         
00131c   c000     MOVFF     0x0,0xfe6                                                                                       
00131e   ffe6                                                                                                               
001320   c001     MOVFF     0x1,0xfe6                                                                                       
001322   ffe6                                                                                                               
001324   c2ca     MOVFF     0x2ca,0x2                                                                                       
001326   f002                                                                                                               
001328   6a03     CLRF      0x3,0x0                                                                                         
00132a   be02     BTFSC     0x2,0x7,0x0                                                                                     
00132c   6803     SETF      0x3,0x0                                                                                         
00132e   c002     MOVFF     0x2,0xfe6                                                                                       
001330   ffe6                                                                                                               
001332   c003     MOVFF     0x3,0xfe6                                                                                       
001334   ffe6                                                                                                               
001336   c2bf     MOVFF     0x2bf,0x4                                                                                       
001338   f004                                                                                                               
00133a   6a05     CLRF      0x5,0x0                                                                                         
00133c   be04     BTFSC     0x4,0x7,0x0                                                                                     
00133e   6805     SETF      0x5,0x0                                                                                         
001340   c004     MOVFF     0x4,0xfe6                                                                                       
001342   ffe6                                                                                                               
001344   c005     MOVFF     0x5,0xfe6                                                                                       
001346   ffe6                                                                                                               
001348   0e17     MOVLW     0x17                                                                                            
00134a   6e06     MOVWF     0x6,0x0                                                                                         
00134c   0e55     MOVLW     0x55                                                                                            
00134e   6e07     MOVWF     0x7,0x0                                                                                         
001350   6a08     CLRF      0x8,0x0                                                                                         
001352   c006     MOVFF     0x6,0xfe6                                                                                       
001354   ffe6                                                                                                               
001356   c007     MOVFF     0x7,0xfe6                                                                                       
001358   ffe6                                                                                                               
00135a   c008     MOVFF     0x8,0xfe6                                                                                       
00135c   ffe6                                                                                                               
00135e   ec89     CALL      0x5d12,0x0                                                                                      
001360   f02e                                                                                                               
001362   6ef5     MOVWF     0xf5,0x0                                                                                        
001364   0e09     MOVLW     0x9                                                                                             
001366   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001368   50f5     MOVF      0xf5,0x0,0x0                                                                                    
00136a   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           int Launcher_Release()			                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	static char state = 0;                                                          C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	static long prevTmr;                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00136c   0102     MOVLB     0x2            	switch(state)                                                                   C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00136e   51cc     MOVF      0xcc,0x0,0x1                                                                                    
001370   0a02     XORLW     0x2                                                                                             
001372   e01d     BZ        0x13ae                                                                                          
001374   0a03     XORLW     0x3                                                                                             
001376   e00b     BZ        0x138e                                                                                          
001378   0a01     XORLW     0x1                                                                                             
00137a   e001     BZ        0x137e                                                                                          
00137c   d041     BRA       0x1400                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		case 0:                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00137e   b888     BTFSC     0x88,0x4,0x0   			if(LAUNCHER_LIM)							//Am I locked? Begin unlocking                         C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001380   d005     BRA       0x138c                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001382   0102     MOVLB     0x2            				LAUNCHER_RELEASE = LAUNCHER_RELEASE_REV;                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001384   0e96     MOVLW     0x96                                                                                            
001386   6f06     MOVWF     0x6,0x1                                                                                         
001388   0102     MOVLB     0x2            				state++;                                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00138a   2bcc     INCF      0xcc,0x1,0x1                                                                                    
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00138c   d039     BRA       0x1400         		break;                                                                         C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		case 1:                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00138e   a888     BTFSS     0x88,0x4,0x0   			if(!LAUNCHER_LIM)							//Fired? Then begin locking                           C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001390   d00d     BRA       0x13ac                                                                                          
                                           			{                                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001392   0102     MOVLB     0x2            				LAUNCHER_RELEASE = LAUNCHER_RELEASE_FWD;                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001394   0e78     MOVLW     0x78                                                                                            
001396   6f06     MOVWF     0x6,0x1                                                                                         
001398   c287     MOVFF     0x287,0x2c0    				prevTmr = timerTicks;                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00139a   f2c0                                                                                                               
00139c   c288     MOVFF     0x288,0x2c1                                                                                     
00139e   f2c1                                                                                                               
0013a0   c289     MOVFF     0x289,0x2c2                                                                                     
0013a2   f2c2                                                                                                               
0013a4   c28a     MOVFF     0x28a,0x2c3                                                                                     
0013a6   f2c3                                                                                                               
0013a8   0102     MOVLB     0x2            				state++;                                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0013aa   2bcc     INCF      0xcc,0x1,0x1                                                                                    
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0013ac   d029     BRA       0x1400         		break;                                                                         C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		case 2:                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0013ae   0ec0     MOVLW     0xc0           			if(timerTicks - prevTmr > 40)				//Wait a sec to stop the motor               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0013b0   6ee9     MOVWF     0xe9,0x0                                                                                        
0013b2   0e02     MOVLW     0x2                                                                                             
0013b4   6eea     MOVWF     0xea,0x0                                                                                        
0013b6   50ee     MOVF      0xee,0x0,0x0                                                                                    
0013b8   0102     MOVLB     0x2                                                                                             
0013ba   5d87     SUBWF     0x87,0x0,0x1                                                                                    
0013bc   6e00     MOVWF     0x0,0x0                                                                                         
0013be   50ee     MOVF      0xee,0x0,0x0                                                                                    
0013c0   5988     SUBWFB    0x88,0x0,0x1                                                                                    
0013c2   6e01     MOVWF     0x1,0x0                                                                                         
0013c4   50ee     MOVF      0xee,0x0,0x0                                                                                    
0013c6   5989     SUBWFB    0x89,0x0,0x1                                                                                    
0013c8   6e02     MOVWF     0x2,0x0                                                                                         
0013ca   50ee     MOVF      0xee,0x0,0x0                                                                                    
0013cc   598a     SUBWFB    0x8a,0x0,0x1                                                                                    
0013ce   6e03     MOVWF     0x3,0x0                                                                                         
0013d0   0e00     MOVLW     0x0                                                                                             
0013d2   1803     XORWF     0x3,0x0,0x0                                                                                     
0013d4   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
0013d6   d002     BRA       0x13dc                                                                                          
0013d8   3403     RLCF      0x3,0x0,0x0                                                                                     
0013da   d009     BRA       0x13ee                                                                                          
0013dc   0e28     MOVLW     0x28                                                                                            
0013de   80d8     BSF       0xd8,0x0,0x0                                                                                    
0013e0   5400     SUBFWB    0x0,0x0,0x0                                                                                     
0013e2   0e00     MOVLW     0x0                                                                                             
0013e4   5401     SUBFWB    0x1,0x0,0x0                                                                                     
0013e6   0e00     MOVLW     0x0                                                                                             
0013e8   5402     SUBFWB    0x2,0x0,0x0                                                                                     
0013ea   0e00     MOVLW     0x0                                                                                             
0013ec   5403     SUBFWB    0x3,0x0,0x0                                                                                     
0013ee   e207     BC        0x13fe                                                                                          
                                           			{			                                                                          C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0013f0   0102     MOVLB     0x2            				LAUNCHER_RELEASE = STOP;                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0013f2   0e7f     MOVLW     0x7f                                                                                            
0013f4   6f06     MOVWF     0x6,0x1                                                                                         
0013f6   0e01     MOVLW     0x1            				return 1;                                                                    C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0013f8   6ef3     MOVWF     0xf3,0x0                                                                                        
0013fa   6af4     CLRF      0xf4,0x0                                                                                        
0013fc   d004     BRA       0x1406                                                                                          
                                           			}                                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0013fe   d000     BRA       0x1400         		break;                                                                         C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001400   6af3     CLRF      0xf3,0x0       	return 0;                                                                       C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001402   6af4     CLRF      0xf4,0x0                                                                                        
001404   d000     BRA       0x1406                                                                                          
001406   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001408   cfd9     MOVFF     0xfd9,0xfe6    void configTerminal(void)                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00140a   ffe6                                                                                                               
00140c   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00140e   ffd9                                                                                                               
001410   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	unsigned char character;                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	static char debugMode = 0;                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	static char debugChar = 'c';                                                    C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001412   ec6f     CALL      0x50de,0x0     	while(Serial_Port_One_Byte_Count() > 0)                                         C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001414   f028                                                                                                               
001416   0800     SUBLW     0x0                                                                                             
001418   e301     BNC       0x141c                                                                                          
00141a   d0eb     BRA       0x15f2                                                                                          
0015f0   d710     BRA       0x1412                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00141c   ec8f     CALL      0x511e,0x0     		character = Read_Serial_Port_One();                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00141e   f028                                                                                                               
001420   6edf     MOVWF     0xdf,0x0                                                                                        
001422   50df     MOVF      0xdf,0x0,0x0   		switch(character)                                                              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001424   0a63     XORLW     0x63                                                                                            
001426   e101     BNZ       0x142a                                                                                          
001428   d0d3     BRA       0x15d0                                                                                          
00142a   0a0f     XORLW     0xf                                                                                             
00142c   e101     BNZ       0x1430                                                                                          
00142e   d0b2     BRA       0x1594                                                                                          
001430   0a19     XORLW     0x19                                                                                            
001432   e101     BNZ       0x1436                                                                                          
001434   d080     BRA       0x1536                                                                                          
001436   0a1c     XORLW     0x1c                                                                                            
001438   e04f     BZ        0x14d8                                                                                          
00143a   0a06     XORLW     0x6                                                                                             
00143c   e028     BZ        0x148e                                                                                          
00143e   0a1f     XORLW     0x1f                                                                                            
001440   e001     BZ        0x1444                                                                                          
001442   d0ce     BRA       0x15e0                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			case 'p':                                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001444   0101     MOVLB     0x1            				++Left.Kvp;                                                                  C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001446   2b9a     INCF      0x9a,0x1,0x1                                                                                    
001448   0e00     MOVLW     0x0                                                                                             
00144a   239b     ADDWFC    0x9b,0x1,0x1                                                                                    
00144c   0101     MOVLB     0x1            				++Right.Kvp;                                                                 C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00144e   2bbc     INCF      0xbc,0x1,0x1                                                                                    
001450   23bd     ADDWFC    0xbd,0x1,0x1                                                                                    
001452   c19e     MOVFF     0x19e,0xfe6    				printf("Kvp:%d Kvi:%d Ko:%d\r\n", Left.Kvp, Left.Kvi, Left.Ko);              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001454   ffe6                                                                                                               
001456   c19f     MOVFF     0x19f,0xfe6                                                                                     
001458   ffe6                                                                                                               
00145a   c19c     MOVFF     0x19c,0xfe6                                                                                     
00145c   ffe6                                                                                                               
00145e   c19d     MOVFF     0x19d,0xfe6                                                                                     
001460   ffe6                                                                                                               
001462   c19a     MOVFF     0x19a,0xfe6                                                                                     
001464   ffe6                                                                                                               
001466   c19b     MOVFF     0x19b,0xfe6                                                                                     
001468   ffe6                                                                                                               
00146a   0e01     MOVLW     0x1                                                                                             
00146c   6e00     MOVWF     0x0,0x0                                                                                         
00146e   0e55     MOVLW     0x55                                                                                            
001470   6e01     MOVWF     0x1,0x0                                                                                         
001472   6a02     CLRF      0x2,0x0                                                                                         
001474   c000     MOVFF     0x0,0xfe6                                                                                       
001476   ffe6                                                                                                               
001478   c001     MOVFF     0x1,0xfe6                                                                                       
00147a   ffe6                                                                                                               
00147c   c002     MOVFF     0x2,0xfe6                                                                                       
00147e   ffe6                                                                                                               
001480   ec89     CALL      0x5d12,0x0                                                                                      
001482   f02e                                                                                                               
001484   6ef5     MOVWF     0xf5,0x0                                                                                        
001486   0e09     MOVLW     0x9                                                                                             
001488   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
00148a   50f5     MOVF      0xf5,0x0,0x0                                                                                    
00148c   d0a9     BRA       0x15e0         			break;                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			case 'o':                                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00148e   0101     MOVLB     0x1            				--Left.Kvp;                                                                  C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001490   079a     DECF      0x9a,0x1,0x1                                                                                    
001492   0e00     MOVLW     0x0                                                                                             
001494   5b9b     SUBWFB    0x9b,0x1,0x1                                                                                    
001496   0101     MOVLB     0x1            				--Right.Kvp;                                                                 C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001498   07bc     DECF      0xbc,0x1,0x1                                                                                    
00149a   5bbd     SUBWFB    0xbd,0x1,0x1                                                                                    
00149c   c19e     MOVFF     0x19e,0xfe6    				printf("Kvp:%d Kvi:%d Ko:%d\r\n", Left.Kvp, Left.Kvi, Left.Ko);              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00149e   ffe6                                                                                                               
0014a0   c19f     MOVFF     0x19f,0xfe6                                                                                     
0014a2   ffe6                                                                                                               
0014a4   c19c     MOVFF     0x19c,0xfe6                                                                                     
0014a6   ffe6                                                                                                               
0014a8   c19d     MOVFF     0x19d,0xfe6                                                                                     
0014aa   ffe6                                                                                                               
0014ac   c19a     MOVFF     0x19a,0xfe6                                                                                     
0014ae   ffe6                                                                                                               
0014b0   c19b     MOVFF     0x19b,0xfe6                                                                                     
0014b2   ffe6                                                                                                               
0014b4   0e01     MOVLW     0x1                                                                                             
0014b6   6e00     MOVWF     0x0,0x0                                                                                         
0014b8   0e55     MOVLW     0x55                                                                                            
0014ba   6e01     MOVWF     0x1,0x0                                                                                         
0014bc   6a02     CLRF      0x2,0x0                                                                                         
0014be   c000     MOVFF     0x0,0xfe6                                                                                       
0014c0   ffe6                                                                                                               
0014c2   c001     MOVFF     0x1,0xfe6                                                                                       
0014c4   ffe6                                                                                                               
0014c6   c002     MOVFF     0x2,0xfe6                                                                                       
0014c8   ffe6                                                                                                               
0014ca   ec89     CALL      0x5d12,0x0                                                                                      
0014cc   f02e                                                                                                               
0014ce   6ef5     MOVWF     0xf5,0x0                                                                                        
0014d0   0e09     MOVLW     0x9                                                                                             
0014d2   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0014d4   50f5     MOVF      0xf5,0x0,0x0                                                                                    
0014d6   d084     BRA       0x15e0         			break;                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			case 'i':                                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0014d8   0101     MOVLB     0x1            				++Left.Kvi;                                                                  C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0014da   2b9c     INCF      0x9c,0x1,0x1                                                                                    
0014dc   0e00     MOVLW     0x0                                                                                             
0014de   239d     ADDWFC    0x9d,0x1,0x1                                                                                    
0014e0   0101     MOVLB     0x1            				++Right.Kvi;                                                                 C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0014e2   2bbe     INCF      0xbe,0x1,0x1                                                                                    
0014e4   23bf     ADDWFC    0xbf,0x1,0x1                                                                                    
0014e6   0101     MOVLB     0x1            				Left.Ierr = 0;                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0014e8   6b8c     CLRF      0x8c,0x1                                                                                        
0014ea   6b8d     CLRF      0x8d,0x1                                                                                        
0014ec   6b8e     CLRF      0x8e,0x1                                                                                        
0014ee   6b8f     CLRF      0x8f,0x1                                                                                        
0014f0   0101     MOVLB     0x1            				Right.Ierr = 0;                                                              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0014f2   6bae     CLRF      0xae,0x1                                                                                        
0014f4   6baf     CLRF      0xaf,0x1                                                                                        
0014f6   6bb0     CLRF      0xb0,0x1                                                                                        
0014f8   6bb1     CLRF      0xb1,0x1                                                                                        
0014fa   c19e     MOVFF     0x19e,0xfe6    				printf("Kvp:%d Kvi:%d Ko:%d\r\n", Left.Kvp, Left.Kvi, Left.Ko);              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0014fc   ffe6                                                                                                               
0014fe   c19f     MOVFF     0x19f,0xfe6                                                                                     
001500   ffe6                                                                                                               
001502   c19c     MOVFF     0x19c,0xfe6                                                                                     
001504   ffe6                                                                                                               
001506   c19d     MOVFF     0x19d,0xfe6                                                                                     
001508   ffe6                                                                                                               
00150a   c19a     MOVFF     0x19a,0xfe6                                                                                     
00150c   ffe6                                                                                                               
00150e   c19b     MOVFF     0x19b,0xfe6                                                                                     
001510   ffe6                                                                                                               
001512   0e01     MOVLW     0x1                                                                                             
001514   6e00     MOVWF     0x0,0x0                                                                                         
001516   0e55     MOVLW     0x55                                                                                            
001518   6e01     MOVWF     0x1,0x0                                                                                         
00151a   6a02     CLRF      0x2,0x0                                                                                         
00151c   c000     MOVFF     0x0,0xfe6                                                                                       
00151e   ffe6                                                                                                               
001520   c001     MOVFF     0x1,0xfe6                                                                                       
001522   ffe6                                                                                                               
001524   c002     MOVFF     0x2,0xfe6                                                                                       
001526   ffe6                                                                                                               
001528   ec89     CALL      0x5d12,0x0                                                                                      
00152a   f02e                                                                                                               
00152c   6ef5     MOVWF     0xf5,0x0                                                                                        
00152e   0e09     MOVLW     0x9                                                                                             
001530   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001532   50f5     MOVF      0xf5,0x0,0x0                                                                                    
001534   d055     BRA       0x15e0         			break;                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			case 'u':                                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001536   0101     MOVLB     0x1            				--Left.Kvi;                                                                  C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001538   079c     DECF      0x9c,0x1,0x1                                                                                    
00153a   0e00     MOVLW     0x0                                                                                             
00153c   5b9d     SUBWFB    0x9d,0x1,0x1                                                                                    
00153e   0101     MOVLB     0x1            				--Right.Kvi;                                                                 C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001540   07be     DECF      0xbe,0x1,0x1                                                                                    
001542   5bbf     SUBWFB    0xbf,0x1,0x1                                                                                    
001544   0101     MOVLB     0x1            				Left.Ierr = 0;                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001546   6b8c     CLRF      0x8c,0x1                                                                                        
001548   6b8d     CLRF      0x8d,0x1                                                                                        
00154a   6b8e     CLRF      0x8e,0x1                                                                                        
00154c   6b8f     CLRF      0x8f,0x1                                                                                        
00154e   0101     MOVLB     0x1            				Right.Ierr = 0;                                                              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001550   6bae     CLRF      0xae,0x1                                                                                        
001552   6baf     CLRF      0xaf,0x1                                                                                        
001554   6bb0     CLRF      0xb0,0x1                                                                                        
001556   6bb1     CLRF      0xb1,0x1                                                                                        
001558   c19e     MOVFF     0x19e,0xfe6    				printf("Kvp:%d Kvi:%d Ko:%d\r\n", Left.Kvp, Left.Kvi, Left.Ko);              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00155a   ffe6                                                                                                               
00155c   c19f     MOVFF     0x19f,0xfe6                                                                                     
00155e   ffe6                                                                                                               
001560   c19c     MOVFF     0x19c,0xfe6                                                                                     
001562   ffe6                                                                                                               
001564   c19d     MOVFF     0x19d,0xfe6                                                                                     
001566   ffe6                                                                                                               
001568   c19a     MOVFF     0x19a,0xfe6                                                                                     
00156a   ffe6                                                                                                               
00156c   c19b     MOVFF     0x19b,0xfe6                                                                                     
00156e   ffe6                                                                                                               
001570   0e01     MOVLW     0x1                                                                                             
001572   6e00     MOVWF     0x0,0x0                                                                                         
001574   0e55     MOVLW     0x55                                                                                            
001576   6e01     MOVWF     0x1,0x0                                                                                         
001578   6a02     CLRF      0x2,0x0                                                                                         
00157a   c000     MOVFF     0x0,0xfe6                                                                                       
00157c   ffe6                                                                                                               
00157e   c001     MOVFF     0x1,0xfe6                                                                                       
001580   ffe6                                                                                                               
001582   c002     MOVFF     0x2,0xfe6                                                                                       
001584   ffe6                                                                                                               
001586   ec89     CALL      0x5d12,0x0                                                                                      
001588   f02e                                                                                                               
00158a   6ef5     MOVWF     0xf5,0x0                                                                                        
00158c   0e09     MOVLW     0x9                                                                                             
00158e   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001590   50f5     MOVF      0xf5,0x0,0x0                                                                                    
001592   d026     BRA       0x15e0         			break;                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			case 'l':                                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001594   c19e     MOVFF     0x19e,0xfe6    				printf("Kvp:%d Kvi:%d Ko:%d\r\n", Left.Kvp, Left.Kvi, Left.Ko);              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001596   ffe6                                                                                                               
001598   c19f     MOVFF     0x19f,0xfe6                                                                                     
00159a   ffe6                                                                                                               
00159c   c19c     MOVFF     0x19c,0xfe6                                                                                     
00159e   ffe6                                                                                                               
0015a0   c19d     MOVFF     0x19d,0xfe6                                                                                     
0015a2   ffe6                                                                                                               
0015a4   c19a     MOVFF     0x19a,0xfe6                                                                                     
0015a6   ffe6                                                                                                               
0015a8   c19b     MOVFF     0x19b,0xfe6                                                                                     
0015aa   ffe6                                                                                                               
0015ac   0e01     MOVLW     0x1                                                                                             
0015ae   6e00     MOVWF     0x0,0x0                                                                                         
0015b0   0e55     MOVLW     0x55                                                                                            
0015b2   6e01     MOVWF     0x1,0x0                                                                                         
0015b4   6a02     CLRF      0x2,0x0                                                                                         
0015b6   c000     MOVFF     0x0,0xfe6                                                                                       
0015b8   ffe6                                                                                                               
0015ba   c001     MOVFF     0x1,0xfe6                                                                                       
0015bc   ffe6                                                                                                               
0015be   c002     MOVFF     0x2,0xfe6                                                                                       
0015c0   ffe6                                                                                                               
0015c2   ec89     CALL      0x5d12,0x0                                                                                      
0015c4   f02e                                                                                                               
0015c6   6ef5     MOVWF     0xf5,0x0                                                                                        
0015c8   0e09     MOVLW     0x9                                                                                             
0015ca   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0015cc   50f5     MOVF      0xf5,0x0,0x0                                                                                    
0015ce   d008     BRA       0x15e0         			break;                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			case 'c':                                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0015d0   0102     MOVLB     0x2            				if(debugMode)                                                                C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0015d2   51cd     MOVF      0xcd,0x0,0x1                                                                                    
0015d4   e002     BZ        0x15da                                                                                          
0015d6   6bcd     CLRF      0xcd,0x1       					debugMode = 0;                                                              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0015d8   d002     BRA       0x15de         				else                                                                         C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0015da   0e01     MOVLW     0x1            					debugMode = 1;                                                              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0015dc   6fcd     MOVWF     0xcd,0x1                                                                                        
0015de   d000     BRA       0x15e0         			break;                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0015e0   0e0d     MOVLW     0xd            		if(character != '\r\n' && character != 'c')                                    C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0015e2   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0015e4   e005     BZ        0x15f0                                                                                          
0015e6   0e63     MOVLW     0x63                                                                                            
0015e8   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0015ea   e002     BZ        0x15f0                                                                                          
0015ec   cfdf     MOVFF     0xfdf,0x2ce    			debugChar = character;                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0015ee   f2ce                                                                                                               
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0015f2   0102     MOVLB     0x2            	if(debugMode)                                                                   C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0015f4   51cd     MOVF      0xcd,0x0,0x1                                                                                    
0015f6   e101     BNZ       0x15fa                                                                                          
0015f8   d0ea     BRA       0x17ce                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0015fa   51ce     MOVF      0xce,0x0,0x1   		switch(debugChar)                                                              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0015fc   0a77     XORLW     0x77                                                                                            
0015fe   e101     BNZ       0x1602                                                                                          
001600   d0af     BRA       0x1760                                                                                          
001602   0a06     XORLW     0x6                                                                                             
001604   e101     BNZ       0x1608                                                                                          
001606   d081     BRA       0x170a                                                                                          
001608   0a1b     XORLW     0x1b                                                                                            
00160a   e05a     BZ        0x16c0                                                                                          
00160c   0a07     XORLW     0x7                                                                                             
00160e   e013     BZ        0x1636                                                                                          
                                           		{	                                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			case 'm':                                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001636   0102     MOVLB     0x2            				printf("Enc1:%ld Enc2:%ld LVSet:%d RVSet:%d LDr:%d RDr:%d\r\n", Get_Encoder_1_Count(), Get_Encoder_2_Count(), Left.Vsetpoint, Right.Vsetpoint, pwm15, pwm13); C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001638   5110     MOVF      0x10,0x0,0x1                                                                                    
00163a   6ee6     MOVWF     0xe6,0x0                                                                                        
00163c   6ae6     CLRF      0xe6,0x0                                                                                        
00163e   5112     MOVF      0x12,0x0,0x1                                                                                    
001640   6ee6     MOVWF     0xe6,0x0                                                                                        
001642   6ae6     CLRF      0xe6,0x0                                                                                        
001644   c1a8     MOVFF     0x1a8,0xfe6                                                                                     
001646   ffe6                                                                                                               
001648   c1a9     MOVFF     0x1a9,0xfe6                                                                                     
00164a   ffe6                                                                                                               
00164c   c186     MOVFF     0x186,0xfe6                                                                                     
00164e   ffe6                                                                                                               
001650   c187     MOVFF     0x187,0xfe6                                                                                     
001652   ffe6                                                                                                               
001654   ecfe     CALL      0x5bfc,0x0                                                                                      
001656   f02d                                                                                                               
001658   c03f     MOVFF     0x3f,0x0                                                                                        
00165a   f000                                                                                                               
00165c   c040     MOVFF     0x40,0x1                                                                                        
00165e   f001                                                                                                               
001660   c041     MOVFF     0x41,0x2                                                                                        
001662   f002                                                                                                               
001664   c042     MOVFF     0x42,0x3                                                                                        
001666   f003                                                                                                               
001668   c000     MOVFF     0x0,0xfe6                                                                                       
00166a   ffe6                                                                                                               
00166c   c001     MOVFF     0x1,0xfe6                                                                                       
00166e   ffe6                                                                                                               
001670   c002     MOVFF     0x2,0xfe6                                                                                       
001672   ffe6                                                                                                               
001674   c003     MOVFF     0x3,0xfe6                                                                                       
001676   ffe6                                                                                                               
001678   ecc2     CALL      0x5b84,0x0                                                                                      
00167a   f02d                                                                                                               
00167c   c03f     MOVFF     0x3f,0x4                                                                                        
00167e   f004                                                                                                               
001680   c040     MOVFF     0x40,0x5                                                                                        
001682   f005                                                                                                               
001684   c041     MOVFF     0x41,0x6                                                                                        
001686   f006                                                                                                               
001688   c042     MOVFF     0x42,0x7                                                                                        
00168a   f007                                                                                                               
00168c   c004     MOVFF     0x4,0xfe6                                                                                       
00168e   ffe6                                                                                                               
001690   c005     MOVFF     0x5,0xfe6                                                                                       
001692   ffe6                                                                                                               
001694   c006     MOVFF     0x6,0xfe6                                                                                       
001696   ffe6                                                                                                               
001698   c007     MOVFF     0x7,0xfe6                                                                                       
00169a   ffe6                                                                                                               
00169c   0ecd     MOVLW     0xcd                                                                                            
00169e   6e08     MOVWF     0x8,0x0                                                                                         
0016a0   0e54     MOVLW     0x54                                                                                            
0016a2   6e09     MOVWF     0x9,0x0                                                                                         
0016a4   6a0a     CLRF      0xa,0x0                                                                                         
0016a6   c008     MOVFF     0x8,0xfe6                                                                                       
0016a8   ffe6                                                                                                               
0016aa   c009     MOVFF     0x9,0xfe6                                                                                       
0016ac   ffe6                                                                                                               
0016ae   c00a     MOVFF     0xa,0xfe6                                                                                       
0016b0   ffe6                                                                                                               
0016b2   ec89     CALL      0x5d12,0x0                                                                                      
0016b4   f02e                                                                                                               
0016b6   6ef5     MOVWF     0xf5,0x0                                                                                        
0016b8   0e13     MOVLW     0x13                                                                                            
0016ba   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0016bc   50f5     MOVF      0xf5,0x0,0x0                                                                                    
0016be   d087     BRA       0x17ce         			break;                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			case 'j':                                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0016c0   0102     MOVLB     0x2            				printf("p1x:%d p1y:%d p2x:%d p2y:%d p3x:%d p3y:%d\r\n", p1_x, p1_y, p2_x, p2_y, p3_x, p3_y); C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0016c2   5128     MOVF      0x28,0x0,0x1                                                                                    
0016c4   6ee6     MOVWF     0xe6,0x0                                                                                        
0016c6   6ae6     CLRF      0xe6,0x0                                                                                        
0016c8   512c     MOVF      0x2c,0x0,0x1                                                                                    
0016ca   6ee6     MOVWF     0xe6,0x0                                                                                        
0016cc   6ae6     CLRF      0xe6,0x0                                                                                        
0016ce   5127     MOVF      0x27,0x0,0x1                                                                                    
0016d0   6ee6     MOVWF     0xe6,0x0                                                                                        
0016d2   6ae6     CLRF      0xe6,0x0                                                                                        
0016d4   512b     MOVF      0x2b,0x0,0x1                                                                                    
0016d6   6ee6     MOVWF     0xe6,0x0                                                                                        
0016d8   6ae6     CLRF      0xe6,0x0                                                                                        
0016da   5126     MOVF      0x26,0x0,0x1                                                                                    
0016dc   6ee6     MOVWF     0xe6,0x0                                                                                        
0016de   6ae6     CLRF      0xe6,0x0                                                                                        
0016e0   512a     MOVF      0x2a,0x0,0x1                                                                                    
0016e2   6ee6     MOVWF     0xe6,0x0                                                                                        
0016e4   6ae6     CLRF      0xe6,0x0                                                                                        
0016e6   0ea1     MOVLW     0xa1                                                                                            
0016e8   6e00     MOVWF     0x0,0x0                                                                                         
0016ea   0e54     MOVLW     0x54                                                                                            
0016ec   6e01     MOVWF     0x1,0x0                                                                                         
0016ee   6a02     CLRF      0x2,0x0                                                                                         
0016f0   c000     MOVFF     0x0,0xfe6                                                                                       
0016f2   ffe6                                                                                                               
0016f4   c001     MOVFF     0x1,0xfe6                                                                                       
0016f6   ffe6                                                                                                               
0016f8   c002     MOVFF     0x2,0xfe6                                                                                       
0016fa   ffe6                                                                                                               
0016fc   ec89     CALL      0x5d12,0x0                                                                                      
0016fe   f02e                                                                                                               
001700   6ef5     MOVWF     0xf5,0x0                                                                                        
001702   0e0f     MOVLW     0xf                                                                                             
001704   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001706   50f5     MOVF      0xf5,0x0,0x0                                                                                    
001708   d062     BRA       0x17ce         			break;                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			case 'q':                                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00170a   0102     MOVLB     0x2            				printf("trig:%d top:%d aux1:%d aux2:%d\r\n", p3_sw_trig, p3_sw_top, p3_sw_aux1, p3_sw_aux2); C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
00170c   5122     MOVF      0x22,0x0,0x1                                                                                    
00170e   0b80     ANDLW     0x80                                                                                            
001710   e001     BZ        0x1714                                                                                          
001712   0e01     MOVLW     0x1                                                                                             
001714   6ee6     MOVWF     0xe6,0x0                                                                                        
001716   6ae6     CLRF      0xe6,0x0                                                                                        
001718   5122     MOVF      0x22,0x0,0x1                                                                                    
00171a   0b40     ANDLW     0x40                                                                                            
00171c   e001     BZ        0x1720                                                                                          
00171e   0e01     MOVLW     0x1                                                                                             
001720   6ee6     MOVWF     0xe6,0x0                                                                                        
001722   6ae6     CLRF      0xe6,0x0                                                                                        
001724   5122     MOVF      0x22,0x0,0x1                                                                                    
001726   0b20     ANDLW     0x20                                                                                            
001728   e001     BZ        0x172c                                                                                          
00172a   0e01     MOVLW     0x1                                                                                             
00172c   6ee6     MOVWF     0xe6,0x0                                                                                        
00172e   6ae6     CLRF      0xe6,0x0                                                                                        
001730   5122     MOVF      0x22,0x0,0x1                                                                                    
001732   0b10     ANDLW     0x10                                                                                            
001734   e001     BZ        0x1738                                                                                          
001736   0e01     MOVLW     0x1                                                                                             
001738   6ee6     MOVWF     0xe6,0x0                                                                                        
00173a   6ae6     CLRF      0xe6,0x0                                                                                        
00173c   0e80     MOVLW     0x80                                                                                            
00173e   6e00     MOVWF     0x0,0x0                                                                                         
001740   0e54     MOVLW     0x54                                                                                            
001742   6e01     MOVWF     0x1,0x0                                                                                         
001744   6a02     CLRF      0x2,0x0                                                                                         
001746   c000     MOVFF     0x0,0xfe6                                                                                       
001748   ffe6                                                                                                               
00174a   c001     MOVFF     0x1,0xfe6                                                                                       
00174c   ffe6                                                                                                               
00174e   c002     MOVFF     0x2,0xfe6                                                                                       
001750   ffe6                                                                                                               
001752   ec89     CALL      0x5d12,0x0                                                                                      
001754   f02e                                                                                                               
001756   6ef5     MOVWF     0xf5,0x0                                                                                        
001758   0e0b     MOVLW     0xb                                                                                             
00175a   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
00175c   50f5     MOVF      0xf5,0x0,0x0                                                                                    
00175e   d037     BRA       0x17ce         			break;                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			case 'w':                                                                     C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001760   0102     MOVLB     0x2            				printf("Relay2Fwd:%d Relay2Rev:%d Relay3Fwd:%d Relay3Rev:%d p3_sw_trig:%d p3_sw_top:%d\r\n", relay2_fwd, relay2_rev, relay3_fwd, relay3_rev, p3_sw_trig, p3_sw_top); C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001762   5122     MOVF      0x22,0x0,0x1                                                                                    
001764   0b20     ANDLW     0x20                                                                                            
001766   e001     BZ        0x176a                                                                                          
001768   0e01     MOVLW     0x1                                                                                             
00176a   6ee6     MOVWF     0xe6,0x0                                                                                        
00176c   6ae6     CLRF      0xe6,0x0                                                                                        
00176e   5122     MOVF      0x22,0x0,0x1                                                                                    
001770   0b10     ANDLW     0x10                                                                                            
001772   e001     BZ        0x1776                                                                                          
001774   0e01     MOVLW     0x1                                                                                             
001776   6ee6     MOVWF     0xe6,0x0                                                                                        
001778   6ae6     CLRF      0xe6,0x0                                                                                        
00177a   508c     MOVF      0x8c,0x0,0x0                                                                                    
00177c   0b04     ANDLW     0x4                                                                                             
00177e   e001     BZ        0x1782                                                                                          
001780   0e01     MOVLW     0x1                                                                                             
001782   6ee6     MOVWF     0xe6,0x0                                                                                        
001784   6ae6     CLRF      0xe6,0x0                                                                                        
001786   508d     MOVF      0x8d,0x0,0x0                                                                                    
001788   0b04     ANDLW     0x4                                                                                             
00178a   e001     BZ        0x178e                                                                                          
00178c   0e01     MOVLW     0x1                                                                                             
00178e   6ee6     MOVWF     0xe6,0x0                                                                                        
001790   6ae6     CLRF      0xe6,0x0                                                                                        
001792   508c     MOVF      0x8c,0x0,0x0                                                                                    
001794   0b02     ANDLW     0x2                                                                                             
001796   e001     BZ        0x179a                                                                                          
001798   0e01     MOVLW     0x1                                                                                             
00179a   6ee6     MOVWF     0xe6,0x0                                                                                        
00179c   6ae6     CLRF      0xe6,0x0                                                                                        
00179e   508d     MOVF      0x8d,0x0,0x0                                                                                    
0017a0   0b02     ANDLW     0x2                                                                                             
0017a2   e001     BZ        0x17a6                                                                                          
0017a4   0e01     MOVLW     0x1                                                                                             
0017a6   6ee6     MOVWF     0xe6,0x0                                                                                        
0017a8   6ae6     CLRF      0xe6,0x0                                                                                        
0017aa   0e2f     MOVLW     0x2f                                                                                            
0017ac   6e00     MOVWF     0x0,0x0                                                                                         
0017ae   0e54     MOVLW     0x54                                                                                            
0017b0   6e01     MOVWF     0x1,0x0                                                                                         
0017b2   6a02     CLRF      0x2,0x0                                                                                         
0017b4   c000     MOVFF     0x0,0xfe6                                                                                       
0017b6   ffe6                                                                                                               
0017b8   c001     MOVFF     0x1,0xfe6                                                                                       
0017ba   ffe6                                                                                                               
0017bc   c002     MOVFF     0x2,0xfe6                                                                                       
0017be   ffe6                                                                                                               
0017c0   ec89     CALL      0x5d12,0x0                                                                                      
0017c2   f02e                                                                                                               
0017c4   6ef5     MOVWF     0xf5,0x0                                                                                        
0017c6   0e0f     MOVLW     0xf                                                                                             
0017c8   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0017ca   50f5     MOVF      0xf5,0x0,0x0                                                                                    
0017cc   d000     BRA       0x17ce         			break;                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           			default:                                                                      C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001610   0e1c     MOVLW     0x1c           				printf("Nothing to print\r\n");                                              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001612   6e00     MOVWF     0x0,0x0                                                                                         
001614   0e54     MOVLW     0x54                                                                                            
001616   6e01     MOVWF     0x1,0x0                                                                                         
001618   6a02     CLRF      0x2,0x0                                                                                         
00161a   c000     MOVFF     0x0,0xfe6                                                                                       
00161c   ffe6                                                                                                               
00161e   c001     MOVFF     0x1,0xfe6                                                                                       
001620   ffe6                                                                                                               
001622   c002     MOVFF     0x2,0xfe6                                                                                       
001624   ffe6                                                                                                               
001626   ec89     CALL      0x5d12,0x0                                                                                      
001628   f02e                                                                                                               
00162a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00162c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00162e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001630   0102     MOVLB     0x2            				debugMode = 0;                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
001632   6bcd     CLRF      0xcd,0x1                                                                                        
001634   d0cc     BRA       0x17ce         			break;                                                                        C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0017ce   52e5     MOVF      0xe5,0x1,0x0   }			                                                                             C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
0017d0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017d2   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0017d4   ffd9                                                                                                               
0017d6   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\TRCfunctions.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * FILE NAME: user_routines.c <FRC VERSION>                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * DESCRIPTION:                                                                   C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *  This file contains the default mappings of inputs                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *  (like switches, joysticks, and buttons) to outputs on the RC.                 C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * USAGE:                                                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *  You can either modify this file to fit your needs, or remove it from your     C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *  project and replace it with a modified copy.                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #include <stdio.h>                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #include "ifi_aliases.h"                                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #include "ifi_default.h"                                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #include "ifi_utilities.h"                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #include "user_routines.h"                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #include "serial_ports.h"                                                        C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #include "pwm.h"                                                                 C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #include "camera.h"                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #include "tracking.h"                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #include "terminal.h"                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #include "adc.h"                                                                 C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #include "encoder.h"                                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #include "gyro.h"                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #include "TRCfunctions.h"                                                        C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           extern unsigned char aBreakerWasTripped;                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           extern unsigned long timerTicks;                                                 C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           /*** DEFINE USER VARIABLES AND INITIALIZE THEM HERE ***/                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           /* EXAMPLES: (see MPLAB C18 User's Guide, p.9 for all types)                     C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           unsigned char wheel_revolutions = 0; (can vary from 0 to 255)                    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           unsigned int  delay_count = 7;       (can vary from 0 to 65,535)                 C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           int           angle_deviation = 142; (can vary from -32,768 to 32,767)           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           unsigned long very_big_counter = 0;  (can vary from 0 to 4,294,967,295)          C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           */                                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           //		                                                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           //			     Mode        velLim,vel(ro),Kp,Kvp, Ki, Ko				(ro) = read only          C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           VelServo Left  = {0, 0,0,0,0,0, 70,   0,    7, 130, 10, 100, 127};               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           VelServo Right = {0, 0,0,0,0,0, 70,   0,    7, 130, 10, 100, 127};               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * FUNCTION NAME: Limit_Switch_Max                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * PURPOSE:       Sets a PWM value to neutral (127) if it exceeds 127 and the     C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *                limit switch is on.                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * CALLED FROM:   this file                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * ARGUMENTS:                                                                     C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *     Argument       Type             IO   Description                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *     --------       -------------    --   -----------                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *     switch_state   unsigned char    I    limit switch state                    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *     *input_value   pointer           O   points to PWM byte value to be limited C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * RETURNS:       void                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\user_routines.c
002b30   cfd9     MOVFF     0xfd9,0xfe6    void Limit_Switch_Max(unsigned char switch_state, unsigned char *input_value)    C:\code\2008\Mnemosyne - 2008\user_routines.c
002b32   ffe6                                                                                                               
002b34   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
002b36   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
002b38   0efe     MOVLW     0xfe             if (switch_state == CLOSED)                                                    C:\code\2008\Mnemosyne - 2008\user_routines.c
002b3a   50db     MOVF      0xdb,0x0,0x0                                                                                    
002b3c   e111     BNZ       0x2b60                                                                                          
                                             {                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
002b3e   0efc     MOVLW     0xfc               if(*input_value > 127)                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
002b40   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002b42   ffe9                                                                                                               
002b44   0efd     MOVLW     0xfd                                                                                            
002b46   cfdb     MOVFF     0xfdb,0xfea                                                                                     
002b48   ffea                                                                                                               
002b4a   50ef     MOVF      0xef,0x0,0x0                                                                                    
002b4c   087f     SUBLW     0x7f                                                                                            
002b4e   e208     BC        0x2b60                                                                                          
002b50   0efc     MOVLW     0xfc                 *input_value = 127;                                                        C:\code\2008\Mnemosyne - 2008\user_routines.c
002b52   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002b54   ffe9                                                                                                               
002b56   0efd     MOVLW     0xfd                                                                                            
002b58   cfdb     MOVFF     0xfdb,0xfea                                                                                     
002b5a   ffea                                                                                                               
002b5c   0e7f     MOVLW     0x7f                                                                                            
002b5e   6eef     MOVWF     0xef,0x0                                                                                        
                                             }                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
002b60   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
002b62   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
002b64   ffd9                                                                                                               
002b66   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * FUNCTION NAME: Limit_Switch_Min                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * PURPOSE:       Sets a PWM value to neutral (127) if it's less than 127 and the C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *                limit switch is on.                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * CALLED FROM:   this file                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * ARGUMENTS:                                                                     C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *     Argument       Type             IO   Description                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *     --------       -------------    --   -----------                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *     switch_state   unsigned char    I    limit switch state                    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *     *input_value   pointer           O   points to PWM byte value to be limited C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * RETURNS:       void                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\user_routines.c
002b68   cfd9     MOVFF     0xfd9,0xfe6    void Limit_Switch_Min(unsigned char switch_state, unsigned char *input_value)    C:\code\2008\Mnemosyne - 2008\user_routines.c
002b6a   ffe6                                                                                                               
002b6c   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
002b6e   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
002b70   0efe     MOVLW     0xfe             if (switch_state == CLOSED)                                                    C:\code\2008\Mnemosyne - 2008\user_routines.c
002b72   50db     MOVF      0xdb,0x0,0x0                                                                                    
002b74   e113     BNZ       0x2b9c                                                                                          
                                             {                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
002b76   0efc     MOVLW     0xfc               if(*input_value < 127)                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
002b78   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002b7a   ffe9                                                                                                               
002b7c   0efd     MOVLW     0xfd                                                                                            
002b7e   cfdb     MOVFF     0xfdb,0xfea                                                                                     
002b80   ffea                                                                                                               
002b82   cfef     MOVFF     0xfef,0x0                                                                                       
002b84   f000                                                                                                               
002b86   0e7f     MOVLW     0x7f                                                                                            
002b88   5c00     SUBWF     0x0,0x0,0x0                                                                                     
002b8a   e208     BC        0x2b9c                                                                                          
002b8c   0efc     MOVLW     0xfc                 *input_value = 127;                                                        C:\code\2008\Mnemosyne - 2008\user_routines.c
002b8e   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002b90   ffe9                                                                                                               
002b92   0efd     MOVLW     0xfd                                                                                            
002b94   cfdb     MOVFF     0xfdb,0xfea                                                                                     
002b96   ffea                                                                                                               
002b98   0e7f     MOVLW     0x7f                                                                                            
002b9a   6eef     MOVWF     0xef,0x0                                                                                        
                                             }                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
002b9c   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
002b9e   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
002ba0   ffd9                                                                                                               
002ba2   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * FUNCTION NAME: Limit_Mix                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * PURPOSE:       Limits the mixed value for one joystick drive.                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * CALLED FROM:   Default_Routine, this file                                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * ARGUMENTS:                                                                     C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *     Argument             Type    IO   Description                              C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *     --------             ----    --   -----------                              C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *     intermediate_value    int    I                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * RETURNS:       unsigned char                                                   C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\user_routines.c
002ba4   cfd9     MOVFF     0xfd9,0xfe6    unsigned char Limit_Mix (int intermediate_value)                                 C:\code\2008\Mnemosyne - 2008\user_routines.c
002ba6   ffe6                                                                                                               
002ba8   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
002baa   ffd9                                                                                                               
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             static int limited_value;                                                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
002bac   0efd     MOVLW     0xfd             if (intermediate_value < 2000)                                                 C:\code\2008\Mnemosyne - 2008\user_routines.c
002bae   cfdb     MOVFF     0xfdb,0x0                                                                                       
002bb0   f000                                                                                                               
002bb2   0efe     MOVLW     0xfe                                                                                            
002bb4   cfdb     MOVFF     0xfdb,0x1                                                                                       
002bb6   f001                                                                                                               
002bb8   90d8     BCF       0xd8,0x0,0x0                                                                                    
002bba   5001     MOVF      0x1,0x0,0x0                                                                                     
002bbc   e604     BN        0x2bc6                                                                                          
002bbe   0ed0     MOVLW     0xd0                                                                                            
002bc0   5c00     SUBWF     0x0,0x0,0x0                                                                                     
002bc2   0e07     MOVLW     0x7                                                                                             
002bc4   5801     SUBWFB    0x1,0x0,0x0                                                                                     
002bc6   e206     BC        0x2bd4                                                                                          
                                             {                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
002bc8   0102     MOVLB     0x2                limited_value = 2000;                                                        C:\code\2008\Mnemosyne - 2008\user_routines.c
002bca   0ed0     MOVLW     0xd0                                                                                            
002bcc   6ff5     MOVWF     0xf5,0x1                                                                                        
002bce   0e07     MOVLW     0x7                                                                                             
002bd0   6ff6     MOVWF     0xf6,0x1                                                                                        
                                             }                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
002bd2   d019     BRA       0x2c06           else if (intermediate_value > 2254)                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
002bd4   0efd     MOVLW     0xfd                                                                                            
002bd6   cfdb     MOVFF     0xfdb,0x0                                                                                       
002bd8   f000                                                                                                               
002bda   0efe     MOVLW     0xfe                                                                                            
002bdc   cfdb     MOVFF     0xfdb,0x1                                                                                       
002bde   f001                                                                                                               
002be0   3401     RLCF      0x1,0x0,0x0                                                                                     
002be2   e204     BC        0x2bec                                                                                          
002be4   5000     MOVF      0x0,0x0,0x0                                                                                     
002be6   08ce     SUBLW     0xce                                                                                            
002be8   0e08     MOVLW     0x8                                                                                             
002bea   5401     SUBFWB    0x1,0x0,0x0                                                                                     
002bec   e206     BC        0x2bfa                                                                                          
                                             {                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
002bee   0102     MOVLB     0x2                limited_value = 2254;                                                        C:\code\2008\Mnemosyne - 2008\user_routines.c
002bf0   0ece     MOVLW     0xce                                                                                            
002bf2   6ff5     MOVWF     0xf5,0x1                                                                                        
002bf4   0e08     MOVLW     0x8                                                                                             
002bf6   6ff6     MOVWF     0xf6,0x1                                                                                        
                                             }                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
002bf8   d006     BRA       0x2c06           else                                                                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             {                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
002bfa   0efd     MOVLW     0xfd               limited_value = intermediate_value;                                          C:\code\2008\Mnemosyne - 2008\user_routines.c
002bfc   cfdb     MOVFF     0xfdb,0x2f5                                                                                     
002bfe   f2f5                                                                                                               
002c00   0efe     MOVLW     0xfe                                                                                            
002c02   cfdb     MOVFF     0xfdb,0x2f6                                                                                     
002c04   f2f6                                                                                                               
                                             }                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
002c06   c2f5     MOVFF     0x2f5,0x0        return (unsigned char) (limited_value - 2000);                                 C:\code\2008\Mnemosyne - 2008\user_routines.c
002c08   f000                                                                                                               
002c0a   c2f6     MOVFF     0x2f6,0x1                                                                                       
002c0c   f001                                                                                                               
002c0e   0ed0     MOVLW     0xd0                                                                                            
002c10   5e00     SUBWF     0x0,0x1,0x0                                                                                     
002c12   0e07     MOVLW     0x7                                                                                             
002c14   5a01     SUBWFB    0x1,0x1,0x0                                                                                     
002c16   5000     MOVF      0x0,0x0,0x0                                                                                     
002c18   d000     BRA       0x2c1a                                                                                          
002c1a   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
002c1c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
002c1e   ffd9                                                                                                               
002c20   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * FUNCTION NAME: User_Initialization                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * PURPOSE:       This routine is called first (and only once) in the Main function.   C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *                You may modify and add to this function.                        C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * CALLED FROM:   main.c                                                          C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * ARGUMENTS:     none                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * RETURNS:       void                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           void User_Initialization (void)                                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             //Set_Number_of_Analog_Channels(SIXTEEN_ANALOG);    /* DO NOT CHANGE! */ /*Dumped for adc.c support--read the instructions*/ C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           /* FIRST: Set up the I/O pins you want to use as digital INPUTS. */              C:\code\2008\Mnemosyne - 2008\user_routines.c
002c22   8a93     BSF       0x93,0x5,0x0     digital_io_01 = digital_io_02 = digital_io_03 = digital_io_04 = INPUT;         C:\code\2008\Mnemosyne - 2008\user_routines.c
002c24   8893     BSF       0x93,0x4,0x0                                                                                    
002c26   8693     BSF       0x93,0x3,0x0                                                                                    
002c28   8493     BSF       0x93,0x2,0x0                                                                                    
002c2a   8299     BSF       0x99,0x1,0x0     digital_io_05 = digital_io_06 = digital_io_07 = digital_io_08 = INPUT;         C:\code\2008\Mnemosyne - 2008\user_routines.c
002c2c   8099     BSF       0x99,0x0,0x0                                                                                    
002c2e   8e93     BSF       0x93,0x7,0x0                                                                                    
002c30   8c93     BSF       0x93,0x6,0x0                                                                                    
002c32   849a     BSF       0x9a,0x2,0x0     digital_io_09 = digital_io_10 = digital_io_11 = digital_io_12 = INPUT;         C:\code\2008\Mnemosyne - 2008\user_routines.c
002c34   829a     BSF       0x9a,0x1,0x0                                                                                    
002c36   8699     BSF       0x99,0x3,0x0                                                                                    
002c38   8499     BSF       0x99,0x2,0x0                                                                                    
002c3a   8a9a     BSF       0x9a,0x5,0x0     digital_io_13 = digital_io_14 = digital_io_15 = digital_io_16 = INPUT;         C:\code\2008\Mnemosyne - 2008\user_routines.c
002c3c   889a     BSF       0x9a,0x4,0x0                                                                                    
002c3e   8094     BSF       0x94,0x0,0x0                                                                                    
002c40   869a     BSF       0x9a,0x3,0x0                                                                                    
002c42   8c9a     BSF       0x9a,0x6,0x0     digital_io_17 = INPUT;                                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
002c44   8e9a     BSF       0x9a,0x7,0x0     digital_io_18 = INPUT;  /* Used for pneumatic pressure switch. */              C:\code\2008\Mnemosyne - 2008\user_routines.c
                                               /*                                                                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                Note: digital_io_01 = digital_io_02 = ... digital_io_04 = INPUT;            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                      is the same as the following:                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                      digital_io_01 = INPUT;                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                      digital_io_02 = INPUT;                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                      ...                                                                   C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                      digital_io_04 = INPUT;                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                               */                                                                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           /* SECOND: Set up the I/O pins you want to use as digital OUTPUTS. */            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             //digital_io_17 = OUTPUT;    /* Example - Not used in Default Code. */         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           /* THIRD: Initialize the values on the digital outputs. */                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             //rc_dig_out17 = 0;                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           /* FOURTH: Set your initial PWM values.  Neutral is 127. */                      C:\code\2008\Mnemosyne - 2008\user_routines.c
002c46   0102     MOVLB     0x2              pwm01 = pwm02 = pwm03 = pwm04 = pwm05 = pwm06 = pwm07 = pwm08 = 127;           C:\code\2008\Mnemosyne - 2008\user_routines.c
002c48   0e7f     MOVLW     0x7f                                                                                            
002c4a   6f0b     MOVWF     0xb,0x1                                                                                         
002c4c   c20b     MOVFF     0x20b,0x20a                                                                                     
002c4e   f20a                                                                                                               
002c50   c20b     MOVFF     0x20b,0x209                                                                                     
002c52   f209                                                                                                               
002c54   c20b     MOVFF     0x20b,0x208                                                                                     
002c56   f208                                                                                                               
002c58   c20b     MOVFF     0x20b,0x207                                                                                     
002c5a   f207                                                                                                               
002c5c   c20b     MOVFF     0x20b,0x206                                                                                     
002c5e   f206                                                                                                               
002c60   c20b     MOVFF     0x20b,0x205                                                                                     
002c62   f205                                                                                                               
002c64   c20b     MOVFF     0x20b,0x204                                                                                     
002c66   f204                                                                                                               
002c68   6f13     MOVWF     0x13,0x1         pwm09 = pwm10 = pwm11 = pwm12 = pwm13 = pwm14 = pwm15 = pwm16 = 127;           C:\code\2008\Mnemosyne - 2008\user_routines.c
002c6a   c213     MOVFF     0x213,0x212                                                                                     
002c6c   f212                                                                                                               
002c6e   c213     MOVFF     0x213,0x211                                                                                     
002c70   f211                                                                                                               
002c72   c213     MOVFF     0x213,0x210                                                                                     
002c74   f210                                                                                                               
002c76   c213     MOVFF     0x213,0x20f                                                                                     
002c78   f20f                                                                                                               
002c7a   c213     MOVFF     0x213,0x20e                                                                                     
002c7c   f20e                                                                                                               
002c7e   c213     MOVFF     0x213,0x20d                                                                                     
002c80   f20d                                                                                                               
002c82   c213     MOVFF     0x213,0x20c                                                                                     
002c84   f20c                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           /* FIFTH: Set your PWM output types for PWM OUTPUTS 13-16.                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             /*   Choose from these parameters for PWM 13-16 respectively:               */ C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             /*     IFI_PWM  - Standard IFI PWM output generated with Generate_Pwms(...) */ C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             /*     USER_CCP - User can use PWM pin as digital I/O or CCP pin.           */ C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           //  Setup_PWM_Output_Type(IFI_PWM,IFI_PWM,IFI_PWM,IFI_PWM);                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             // changed so PWM() can control PWM outputs 13 through 16                      C:\code\2008\Mnemosyne - 2008\user_routines.c
002c86   0e01     MOVLW     0x1              Setup_PWM_Output_Type(USER_CCP,USER_CCP,USER_CCP,USER_CCP);                    C:\code\2008\Mnemosyne - 2008\user_routines.c
002c88   6ee6     MOVWF     0xe6,0x0                                                                                        
002c8a   6ae6     CLRF      0xe6,0x0                                                                                        
002c8c   6ee6     MOVWF     0xe6,0x0                                                                                        
002c8e   6ae6     CLRF      0xe6,0x0                                                                                        
002c90   6ee6     MOVWF     0xe6,0x0                                                                                        
002c92   6ae6     CLRF      0xe6,0x0                                                                                        
002c94   6ee6     MOVWF     0xe6,0x0                                                                                        
002c96   6ae6     CLRF      0xe6,0x0                                                                                        
002c98   ec69     CALL      0x26d2,0x0                                                                                      
002c9a   f013                                                                                                               
002c9c   6ef5     MOVWF     0xf5,0x0                                                                                        
002c9e   0e08     MOVLW     0x8                                                                                             
002ca0   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
002ca2   50f5     MOVF      0xf5,0x0,0x0                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             /*                                                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                Example: The following would generate a 40KHz PWM with a 50% duty cycle on the CCP2 pin: C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                    CCP2CON = 0x3C;                                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                    PR2 = 0xF9;                                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                    CCPR2L = 0x7F;                                                          C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                    T2CON = 0;                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                    T2CONbits.TMR2ON = 1;                                                   C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                    Setup_PWM_Output_Type(USER_CCP,IFI_PWM,IFI_PWM,IFI_PWM);                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             */                                                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             /* Add any other initialization code here. */                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
002ca4   ec00     CALL      0x4600,0x0       Initialize_ADC();                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
002ca6   f023                                                                                                               
002ca8   ecb7     CALL      0x5b6e,0x0       Initialize_Encoders();                                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
002caa   f02d                                                                                                               
002cac   ecc9     CALL      0x4d92,0x0       Initialize_Gyro();                                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
002cae   f026                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             // initialize and start 26.2ms timer for autonomous mode playback              C:\code\2008\Mnemosyne - 2008\user_routines.c
002cb0   0e30     MOVLW     0x30             T1CON = 0x30; /* 1:8 Prescale */                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
002cb2   6ecd     MOVWF     0xcd,0x0                                                                                        
002cb4   0e7f     MOVLW     0x7f             TMR1H = 0x7F; /* Pre-load TMR1 to overflow after 26.2ms */                     C:\code\2008\Mnemosyne - 2008\user_routines.c
002cb6   6ecf     MOVWF     0xcf,0x0                                                                                        
002cb8   68ce     SETF      0xce,0x0         TMR1L = 0xFF;                                                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
002cba   80cd     BSF       0xcd,0x0,0x0     T1CONbits.TMR1ON = 1; /* Turn timer on */                                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
002cbc   909f     BCF       0x9f,0x0,0x0     IPR1bits.TMR1IP = 0; /* Set Timer1 Interrupt to low priority */                C:\code\2008\Mnemosyne - 2008\user_routines.c
002cbe   809d     BSF       0x9d,0x0,0x0     PIE1bits.TMR1IE = 1; /* Interrupt when Timer1 overflows */                     C:\code\2008\Mnemosyne - 2008\user_routines.c
002cc0   8cf2     BSF       0xf2,0x6,0x0     INTCONbits.GIEL = 1; /* Enable Global Low Priority Interrupts */               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             // initialize the CCP PWM hardware                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
002cc2   ece1     CALL      0x59c2,0x0       Initialize_PWM();                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
002cc4   f02c                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             // initialize the serial ports                                                 C:\code\2008\Mnemosyne - 2008\user_routines.c
002cc6   ec3d     CALL      0x507a,0x0       Init_Serial_Port_One();                                                        C:\code\2008\Mnemosyne - 2008\user_routines.c
002cc8   f028                                                                                                               
002cca   ec56     CALL      0x50ac,0x0       Init_Serial_Port_Two();                                                        C:\code\2008\Mnemosyne - 2008\user_routines.c
002ccc   f028                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #ifdef TERMINAL_SERIAL_PORT_1                                                    C:\code\2008\Mnemosyne - 2008\user_routines.c
002cce   0101     MOVLB     0x1              stdout_serial_port = SERIAL_PORT_ONE;                                          C:\code\2008\Mnemosyne - 2008\user_routines.c
002cd0   0e01     MOVLW     0x1                                                                                             
002cd2   6fde     MOVWF     0xde,0x1                                                                                        
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #ifdef TERMINAL_SERIAL_PORT_2                                                    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             stdout_serial_port = SERIAL_PORT_TWO;                                          C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
002cd4   0e00     MOVLW     0x0              Putdata(&txdata);            /* DO NOT CHANGE! */                              C:\code\2008\Mnemosyne - 2008\user_routines.c
002cd6   6ee6     MOVWF     0xe6,0x0                                                                                        
002cd8   0e02     MOVLW     0x2                                                                                             
002cda   6ee6     MOVWF     0xe6,0x0                                                                                        
002cdc   ec27     CALL      0x264e,0x0                                                                                      
002cde   f013                                                                                                               
002ce0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002ce2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           //  ***  IFI Code Starts Here***                                                 C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           //                                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           //  Serial_Driver_Initialize();                                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           //                                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           //  printf("IFI 2006 User Processor Initialized ...\r");  /* Optional - Print initialization message. */ C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
002ce4   ecae     CALL      0x255c,0x0       User_Proc_Is_Ready();         /* DO NOT CHANGE! - last line of User_Initialization */ C:\code\2008\Mnemosyne - 2008\user_routines.c
002ce6   f012                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
002ce8   0e7d     MOVLW     0x7d             printf("---TRC Robot Code 2008 Ver. 0.1.2 Initialized---\r\n");                C:\code\2008\Mnemosyne - 2008\user_routines.c
002cea   6e00     MOVWF     0x0,0x0                                                                                         
002cec   0e55     MOVLW     0x55                                                                                            
002cee   6e01     MOVWF     0x1,0x0                                                                                         
002cf0   6a02     CLRF      0x2,0x0                                                                                         
002cf2   c000     MOVFF     0x0,0xfe6                                                                                       
002cf4   ffe6                                                                                                               
002cf6   c001     MOVFF     0x1,0xfe6                                                                                       
002cf8   ffe6                                                                                                               
002cfa   c002     MOVFF     0x2,0xfe6                                                                                       
002cfc   ffe6                                                                                                               
002cfe   ec89     CALL      0x5d12,0x0                                                                                      
002d00   f02e                                                                                                               
002d02   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d04   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d06   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d08   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * FUNCTION NAME: Process_Data_From_Master_uP                                     C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * PURPOSE:       Executes every 26.2ms when it gets new data from the master     C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *                microprocessor.                                                 C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * CALLED FROM:   main.c                                                          C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * ARGUMENTS:     none                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * RETURNS:       void                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\user_routines.c
002d0a   cfd9     MOVFF     0xfd9,0xfe6    void Process_Data_From_Master_uP(void)                                           C:\code\2008\Mnemosyne - 2008\user_routines.c
002d0c   ffe6                                                                                                               
002d0e   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
002d10   ffd9                                                                                                               
002d12   0e10     MOVLW     0x10                                                                                            
002d14   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	static unsigned char count = 0;                                                 C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	static unsigned char camera_menu_active = 0;                                    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	static unsigned char tracking_menu_active = 0;                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	unsigned char terminal_char;                                                    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	unsigned char returned_value;                                                   C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		//Encoder Velocity Calculation; Oversampling                                   C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	static char samplesCount = 0;		//Samples out of 2                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                               	//PID Incremented Vars                                                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	//static int leftPwm  = 127;                                                    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	//static int rightPwm = 127;                                                    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		//Pneumatic State Machines                                                     C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	static char trigState = 0;                                                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             	static char trigChange = 0;                                                   C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	static char topState = 0;                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             	static char topChange = 0;                                                    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	static char auxState = 1;		//Raise Dislodge Assembly at start of match          C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	static char auxChange = 0;                                                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	static char aux2State = 0;		//Manual Dislodger Control                          C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	static char aux2Change = 0;                                                     C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	static char limState = 0;                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	static char limChange = 0;                                                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	static unsigned long dislodgeTmr = 0;                                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		//Compressor Mode                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	static char firstRunFlag = 1;                                                   C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	static char compMode = 0;			//Enable Compressor Mode                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		//Joystick Vars                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	int x, y, z;                                                                    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		//Some gyro bias stuff here...looks intesting                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	static unsigned int i = 0;                                                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	static unsigned int j = 0;                                                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	int temp_gyro_rate;                                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	long temp_gyro_angle;                                                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	int temp_gyro_bias;                                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	static unsigned int h = 0;                                                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// don't move this unless you know what you're doing                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		//I moved it to match the gyro code                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
002d16   0e20     MOVLW     0x20           	Getdata(&rxdata);                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
002d18   6ee6     MOVWF     0xe6,0x0                                                                                        
002d1a   0e02     MOVLW     0x2                                                                                             
002d1c   6ee6     MOVWF     0xe6,0x0                                                                                        
002d1e   ec0e     CALL      0x261c,0x0                                                                                      
002d20   f013                                                                                                               
002d22   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d24   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             //Set this to 1 to run the gyro bias calculation code. Otherwise, set it to 0  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #ifdef GYRO_CAL                                                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	i++;                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	j++; // this will rollover every ~1000 seconds                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	if(j == 10)                                                                     C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		printf("\rCalculating Gyro Bias...");                                          C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	if(j == 60)                                                                     C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		// start a gyro bias calculation                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	//	Start_Gyro_Bias_Calc();                                                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	if(j == 300)                                                                    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		// terminate the gyro bias calculation                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	//	Stop_Gyro_Bias_Calc();                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		// reset the gyro heading angle                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		//Reset_Gyro_Angle();                                                          C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	//	printf("Done\r");                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	if(i >= 30 && j >= 300)                                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		temp_gyro_bias = Get_Gyro_Bias();                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		temp_gyro_rate = Get_Gyro_Rate();                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		temp_gyro_angle = Get_Gyro_Angle();                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		                                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		//printf(" Factor:%d\r\n", GYRO_CAL_FACTOR);	                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		printf(" Gyro Bias=%d\r\n", temp_gyro_bias);                                   C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		printf(" Gyro Rate=%d\r\n", temp_gyro_rate);                                   C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		printf("Gyro Angle=%d\r\n\r\n", (int)temp_gyro_angle);		                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		i = 0;                                                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	//Set_Gyro_Bias(GYRO_BIAS);                                                     C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #ifndef GYRO_CAL                                                                 C:\code\2008\Mnemosyne - 2008\user_routines.c
002d26   0ec3     MOVLW     0xc3           	Set_Gyro_Bias(GYRO_BIAS);                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
002d28   6ee6     MOVWF     0xe6,0x0                                                                                        
002d2a   0e03     MOVLW     0x3                                                                                             
002d2c   6ee6     MOVWF     0xe6,0x0                                                                                        
002d2e   ecc3     CALL      0x4f86,0x0                                                                                      
002d30   f027                                                                                                               
002d32   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d34   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// send diagnostic information to the terminal                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		//comment me to stop spamming the serial port                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	//Tracking_Info_Terminal();                                                     C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// This function is responsable for camera initialization                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// and camera serial data interpretation. Once the camera                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// is initialized and starts sending tracking data, this                        C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// function will continuously update the global T_Packet_Data                   C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// structure with the received tracking information.                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           //	Camera_Handler();                                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// This function reads data placed in the T_Packet_Data                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// structure by the Camera_Handler() function and if new                        C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// tracking data is available, attempts to keep the center                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// of the tracked object in the center of the camera's                          C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// image using two servos that drive a pan/tilt platform.                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// If the camera doesn't have the object within it's field                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// of view, this function will execute a search algorithm                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// in an attempt to find the object.                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           //	Servo_Track();                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// Turn on the "Switch 3" LED on the operator interface if                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// the camera is pointed at the green light target. The                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// Switch3_LED variable is also used by the Default_Routine()                   C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// function below, so disable it inside Default_Routine()                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// if you want to keep this functionality.                                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           /*	if(Get_Tracking_State() == CAMERA_ON_TARGET)                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		Switch3_LED = 1;                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	else                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		Switch3_LED = 0;                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	}*/                                                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// IFI's default routine is commented out for safety reasons                    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// and because it also tries to use PWM outputs one and two,                    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// which conflicts with the default assignment for the pan                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// and tilt servos.                                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           //  Default_Routine();                                                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           ///                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           ///----------------------------------Mappings------------------------------      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           /// This is some of my (Paul) code, put here because Default_Routine() is commented out C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
002d36   ec04     CALL      0x1408,0x0       configTerminal(); //Interactive Terminal to update drive system configuration  C:\code\2008\Mnemosyne - 2008\user_routines.c
002d38   f00a                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
002d3a   0e0c     MOVLW     0xc              x = deadBandInput(RAW_X + YAW_OFFSET, YAW_DB);			//Centered at 0               C:\code\2008\Mnemosyne - 2008\user_routines.c
002d3c   6ee6     MOVWF     0xe6,0x0                                                                                        
002d3e   6ae6     CLRF      0xe6,0x0                                                                                        
002d40   0efa     MOVLW     0xfa                                                                                            
002d42   0102     MOVLB     0x2                                                                                             
002d44   252b     ADDWF     0x2b,0x0,0x1                                                                                    
002d46   6ee6     MOVWF     0xe6,0x0                                                                                        
002d48   6ae6     CLRF      0xe6,0x0                                                                                        
002d4a   ecf7     CALL      0xdee,0x0                                                                                       
002d4c   f006                                                                                                               
002d4e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d50   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d52   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d54   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d56   0e02     MOVLW     0x2                                                                                             
002d58   cff3     MOVFF     0xff3,0xfdb                                                                                     
002d5a   ffdb                                                                                                               
002d5c   0e03     MOVLW     0x3                                                                                             
002d5e   cff4     MOVFF     0xff4,0xfdb                                                                                     
002d60   ffdb                                                                                                               
002d62   0e09     MOVLW     0x9              y = deadBandInput(RAW_Y + SPEED_OFFSET, SPEED_DB);		//Centered at 0            C:\code\2008\Mnemosyne - 2008\user_routines.c
002d64   6ee6     MOVWF     0xe6,0x0                                                                                        
002d66   6ae6     CLRF      0xe6,0x0                                                                                        
002d68   0efd     MOVLW     0xfd                                                                                            
002d6a   0102     MOVLB     0x2                                                                                             
002d6c   2526     ADDWF     0x26,0x0,0x1                                                                                    
002d6e   6ee6     MOVWF     0xe6,0x0                                                                                        
002d70   6ae6     CLRF      0xe6,0x0                                                                                        
002d72   ecf7     CALL      0xdee,0x0                                                                                       
002d74   f006                                                                                                               
002d76   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d78   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d7a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d7c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d7e   0e04     MOVLW     0x4                                                                                             
002d80   cff3     MOVFF     0xff3,0xfdb                                                                                     
002d82   ffdb                                                                                                               
002d84   0e05     MOVLW     0x5                                                                                             
002d86   cff4     MOVFF     0xff4,0xfdb                                                                                     
002d88   ffdb                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
002d8a   0e02     MOVLW     0x2              x = (x*80)/100;											//Steering Potentcy                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
002d8c   cfdb     MOVFF     0xfdb,0x0                                                                                       
002d8e   f000                                                                                                               
002d90   0e03     MOVLW     0x3                                                                                             
002d92   cfdb     MOVFF     0xfdb,0x1                                                                                       
002d94   f001                                                                                                               
002d96   0e50     MOVLW     0x50                                                                                            
002d98   0201     MULWF     0x1,0x0                                                                                         
002d9a   cff3     MOVFF     0xff3,0x1                                                                                       
002d9c   f001                                                                                                               
002d9e   0200     MULWF     0x0,0x0                                                                                         
002da0   cff3     MOVFF     0xff3,0x0                                                                                       
002da2   f000                                                                                                               
002da4   50f4     MOVF      0xf4,0x0,0x0                                                                                    
002da6   2601     ADDWF     0x1,0x1,0x0                                                                                     
002da8   0e64     MOVLW     0x64                                                                                            
002daa   6e46     MOVWF     0x46,0x0                                                                                        
002dac   6a47     CLRF      0x47,0x0                                                                                        
002dae   c000     MOVFF     0x0,0x41                                                                                        
002db0   f041                                                                                                               
002db2   c001     MOVFF     0x1,0x42                                                                                        
002db4   f042                                                                                                               
002db6   eccc     CALL      0x4398,0x0                                                                                      
002db8   f021                                                                                                               
002dba   c041     MOVFF     0x41,0x0                                                                                        
002dbc   f000                                                                                                               
002dbe   c042     MOVFF     0x42,0x1                                                                                        
002dc0   f001                                                                                                               
002dc2   0e02     MOVLW     0x2                                                                                             
002dc4   c000     MOVFF     0x0,0xfdb                                                                                       
002dc6   ffdb                                                                                                               
002dc8   0e03     MOVLW     0x3                                                                                             
002dca   c001     MOVFF     0x1,0xfdb                                                                                       
002dcc   ffdb                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
002dce   0e08     MOVLW     0x8              z = deadBandInput(RAW_FORK + FORK_OFFSET, FORK_DB);	//Victor must be set to BRAKE C:\code\2008\Mnemosyne - 2008\user_routines.c
002dd0   6ee6     MOVWF     0xe6,0x0                                                                                        
002dd2   6ae6     CLRF      0xe6,0x0                                                                                        
002dd4   0efb     MOVLW     0xfb                                                                                            
002dd6   0102     MOVLB     0x2                                                                                             
002dd8   2528     ADDWF     0x28,0x0,0x1                                                                                    
002dda   6ee6     MOVWF     0xe6,0x0                                                                                        
002ddc   6ae6     CLRF      0xe6,0x0                                                                                        
002dde   ecf7     CALL      0xdee,0x0                                                                                       
002de0   f006                                                                                                               
002de2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002de4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002de6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002de8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002dea   0e06     MOVLW     0x6                                                                                             
002dec   cff3     MOVFF     0xff3,0xfdb                                                                                     
002dee   ffdb                                                                                                               
002df0   0e07     MOVLW     0x7                                                                                             
002df2   cff4     MOVFF     0xff4,0xfdb                                                                                     
002df4   ffdb                                                                                                               
002df6   0e06     MOVLW     0x6              FORK = 127 + (-z *7)/10 ;                                                      C:\code\2008\Mnemosyne - 2008\user_routines.c
002df8   cfdb     MOVFF     0xfdb,0x0                                                                                       
002dfa   f000                                                                                                               
002dfc   0e07     MOVLW     0x7                                                                                             
002dfe   cfdb     MOVFF     0xfdb,0x1                                                                                       
002e00   f001                                                                                                               
002e02   6c00     NEGF      0x0,0x0                                                                                         
002e04   1e01     COMF      0x1,0x1,0x0                                                                                     
002e06   0e00     MOVLW     0x0                                                                                             
002e08   2201     ADDWFC    0x1,0x1,0x0                                                                                     
002e0a   0e07     MOVLW     0x7                                                                                             
002e0c   0201     MULWF     0x1,0x0                                                                                         
002e0e   cff3     MOVFF     0xff3,0x1                                                                                       
002e10   f001                                                                                                               
002e12   0200     MULWF     0x0,0x0                                                                                         
002e14   cff3     MOVFF     0xff3,0x0                                                                                       
002e16   f000                                                                                                               
002e18   50f4     MOVF      0xf4,0x0,0x0                                                                                    
002e1a   2601     ADDWF     0x1,0x1,0x0                                                                                     
002e1c   0e0a     MOVLW     0xa                                                                                             
002e1e   6e46     MOVWF     0x46,0x0                                                                                        
002e20   6a47     CLRF      0x47,0x0                                                                                        
002e22   c000     MOVFF     0x0,0x41                                                                                        
002e24   f041                                                                                                               
002e26   c001     MOVFF     0x1,0x42                                                                                        
002e28   f042                                                                                                               
002e2a   eccc     CALL      0x4398,0x0                                                                                      
002e2c   f021                                                                                                               
002e2e   c041     MOVFF     0x41,0x0                                                                                        
002e30   f000                                                                                                               
002e32   c042     MOVFF     0x42,0x1                                                                                        
002e34   f001                                                                                                               
002e36   0e7f     MOVLW     0x7f                                                                                            
002e38   2400     ADDWF     0x0,0x0,0x0                                                                                     
002e3a   0102     MOVLB     0x2                                                                                             
002e3c   6f05     MOVWF     0x5,0x1                                                                                         
                                           				                                                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             //Encoder Velocity Calculation; reduced sampling                               C:\code\2008\Mnemosyne - 2008\user_routines.c
002e3e   0101     MOVLB     0x1              if(++samplesCount == 2)										                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
002e40   2bc7     INCF      0xc7,0x1,0x1                                                                                    
002e42   0e02     MOVLW     0x2                                                                                             
002e44   5dc7     SUBWF     0xc7,0x0,0x1                                                                                    
002e46   e001     BZ        0x2e4a                                                                                          
002e48   d098     BRA       0x2f7a                                                                                          
                                             {                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
002e4a   0e04     MOVLW     0x4            		Left.Vsetpoint  = (Left.velLim*(y - x))/127; 		//Velocity setting: percentage from inputs*velocity limit -> setpoint C:\code\2008\Mnemosyne - 2008\user_routines.c
002e4c   cfdb     MOVFF     0xfdb,0x2                                                                                       
002e4e   f002                                                                                                               
002e50   0e05     MOVLW     0x5                                                                                             
002e52   cfdb     MOVFF     0xfdb,0x3                                                                                       
002e54   f003                                                                                                               
002e56   0e02     MOVLW     0x2                                                                                             
002e58   50db     MOVF      0xdb,0x0,0x0                                                                                    
002e5a   5c02     SUBWF     0x2,0x0,0x0                                                                                     
002e5c   6e00     MOVWF     0x0,0x0                                                                                         
002e5e   0e03     MOVLW     0x3                                                                                             
002e60   50db     MOVF      0xdb,0x0,0x0                                                                                    
002e62   5803     SUBWFB    0x3,0x0,0x0                                                                                     
002e64   6e01     MOVWF     0x1,0x0                                                                                         
002e66   5000     MOVF      0x0,0x0,0x0                                                                                     
002e68   0394     MULWF     0x94,0x1                                                                                        
002e6a   cff3     MOVFF     0xff3,0x186                                                                                     
002e6c   f186                                                                                                               
002e6e   cff4     MOVFF     0xff4,0x187                                                                                     
002e70   f187                                                                                                               
002e72   0395     MULWF     0x95,0x1                                                                                        
002e74   50f3     MOVF      0xf3,0x0,0x0                                                                                    
002e76   2787     ADDWF     0x87,0x1,0x1                                                                                    
002e78   5001     MOVF      0x1,0x0,0x0                                                                                     
002e7a   0394     MULWF     0x94,0x1                                                                                        
002e7c   50f3     MOVF      0xf3,0x0,0x0                                                                                    
002e7e   2787     ADDWF     0x87,0x1,0x1                                                                                    
002e80   0e7f     MOVLW     0x7f                                                                                            
002e82   6e46     MOVWF     0x46,0x0                                                                                        
002e84   6a47     CLRF      0x47,0x0                                                                                        
002e86   c186     MOVFF     0x186,0x41                                                                                      
002e88   f041                                                                                                               
002e8a   c187     MOVFF     0x187,0x42                                                                                      
002e8c   f042                                                                                                               
002e8e   eccc     CALL      0x4398,0x0                                                                                      
002e90   f021                                                                                                               
002e92   c041     MOVFF     0x41,0x186                                                                                      
002e94   f186                                                                                                               
002e96   c042     MOVFF     0x42,0x187                                                                                      
002e98   f187                                                                                                               
002e9a   0e02     MOVLW     0x2            		Right.Vsetpoint = (Right.velLim*(y + x))/127; 	                                C:\code\2008\Mnemosyne - 2008\user_routines.c
002e9c   cfdb     MOVFF     0xfdb,0x2                                                                                       
002e9e   f002                                                                                                               
002ea0   0e03     MOVLW     0x3                                                                                             
002ea2   cfdb     MOVFF     0xfdb,0x3                                                                                       
002ea4   f003                                                                                                               
002ea6   0e04     MOVLW     0x4                                                                                             
002ea8   50db     MOVF      0xdb,0x0,0x0                                                                                    
002eaa   2402     ADDWF     0x2,0x0,0x0                                                                                     
002eac   6e00     MOVWF     0x0,0x0                                                                                         
002eae   0e05     MOVLW     0x5                                                                                             
002eb0   50db     MOVF      0xdb,0x0,0x0                                                                                    
002eb2   2003     ADDWFC    0x3,0x0,0x0                                                                                     
002eb4   6e01     MOVWF     0x1,0x0                                                                                         
002eb6   0101     MOVLB     0x1                                                                                             
002eb8   5000     MOVF      0x0,0x0,0x0                                                                                     
002eba   03b6     MULWF     0xb6,0x1                                                                                        
002ebc   cff3     MOVFF     0xff3,0x1a8                                                                                     
002ebe   f1a8                                                                                                               
002ec0   cff4     MOVFF     0xff4,0x1a9                                                                                     
002ec2   f1a9                                                                                                               
002ec4   03b7     MULWF     0xb7,0x1                                                                                        
002ec6   50f3     MOVF      0xf3,0x0,0x0                                                                                    
002ec8   27a9     ADDWF     0xa9,0x1,0x1                                                                                    
002eca   5001     MOVF      0x1,0x0,0x0                                                                                     
002ecc   03b6     MULWF     0xb6,0x1                                                                                        
002ece   50f3     MOVF      0xf3,0x0,0x0                                                                                    
002ed0   27a9     ADDWF     0xa9,0x1,0x1                                                                                    
002ed2   0e7f     MOVLW     0x7f                                                                                            
002ed4   6e46     MOVWF     0x46,0x0                                                                                        
002ed6   6a47     CLRF      0x47,0x0                                                                                        
002ed8   c1a8     MOVFF     0x1a8,0x41                                                                                      
002eda   f041                                                                                                               
002edc   c1a9     MOVFF     0x1a9,0x42                                                                                      
002ede   f042                                                                                                               
002ee0   eccc     CALL      0x4398,0x0                                                                                      
002ee2   f021                                                                                                               
002ee4   c041     MOVFF     0x41,0x1a8                                                                                      
002ee6   f1a8                                                                                                               
002ee8   c042     MOVFF     0x42,0x1a9                                                                                      
002eea   f1a9                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #ifdef DRIVE_POSITION_MODE                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           		Left.Psetpoint  += Left.Vsetpoint;					//Uses velocity to increment position in position mode C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             		Right.Psetpoint += Right.Vsetpoint;                                          C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           #ifndef DRIVE_DEBUG                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
002eec   68e6     SETF      0xe6,0x0       		L_CIM_1 = L_CIM_2 = doVelPid(&Left, L_ENC_COUNT, L_MOTOR_DIR);                 C:\code\2008\Mnemosyne - 2008\user_routines.c
002eee   68e6     SETF      0xe6,0x0                                                                                        
002ef0   ecc2     CALL      0x5b84,0x0                                                                                      
002ef2   f02d                                                                                                               
002ef4   c03f     MOVFF     0x3f,0x0                                                                                        
002ef6   f000                                                                                                               
002ef8   c040     MOVFF     0x40,0x1                                                                                        
002efa   f001                                                                                                               
002efc   c041     MOVFF     0x41,0x2                                                                                        
002efe   f002                                                                                                               
002f00   c042     MOVFF     0x42,0x3                                                                                        
002f02   f003                                                                                                               
002f04   c000     MOVFF     0x0,0xfe6                                                                                       
002f06   ffe6                                                                                                               
002f08   c001     MOVFF     0x1,0xfe6                                                                                       
002f0a   ffe6                                                                                                               
002f0c   c002     MOVFF     0x2,0xfe6                                                                                       
002f0e   ffe6                                                                                                               
002f10   c003     MOVFF     0x3,0xfe6                                                                                       
002f12   ffe6                                                                                                               
002f14   0e80     MOVLW     0x80                                                                                            
002f16   6ee6     MOVWF     0xe6,0x0                                                                                        
002f18   0e01     MOVLW     0x1                                                                                             
002f1a   6ee6     MOVWF     0xe6,0x0                                                                                        
002f1c   ec52     CALL      0x8a4,0x0                                                                                       
002f1e   f004                                                                                                               
002f20   6ef5     MOVWF     0xf5,0x0                                                                                        
002f22   0e08     MOVLW     0x8                                                                                             
002f24   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
002f26   50f5     MOVF      0xf5,0x0,0x0                                                                                    
002f28   cff3     MOVFF     0xff3,0x213                                                                                     
002f2a   f213                                                                                                               
002f2c   cff3     MOVFF     0xff3,0x212                                                                                     
002f2e   f212                                                                                                               
                                           #endif                                                                           C:\code\2008\Mnemosyne - 2008\user_routines.c
002f30   0e01     MOVLW     0x1                    R_CIM_1 = R_CIM_2 = doVelPid(&Right, R_ENC_COUNT, R_MOTOR_DIR);          C:\code\2008\Mnemosyne - 2008\user_routines.c
002f32   6ee6     MOVWF     0xe6,0x0                                                                                        
002f34   6ae6     CLRF      0xe6,0x0                                                                                        
002f36   ecfe     CALL      0x5bfc,0x0                                                                                      
002f38   f02d                                                                                                               
002f3a   c03f     MOVFF     0x3f,0x0                                                                                        
002f3c   f000                                                                                                               
002f3e   c040     MOVFF     0x40,0x1                                                                                        
002f40   f001                                                                                                               
002f42   c041     MOVFF     0x41,0x2                                                                                        
002f44   f002                                                                                                               
002f46   c042     MOVFF     0x42,0x3                                                                                        
002f48   f003                                                                                                               
002f4a   c000     MOVFF     0x0,0xfe6                                                                                       
002f4c   ffe6                                                                                                               
002f4e   c001     MOVFF     0x1,0xfe6                                                                                       
002f50   ffe6                                                                                                               
002f52   c002     MOVFF     0x2,0xfe6                                                                                       
002f54   ffe6                                                                                                               
002f56   c003     MOVFF     0x3,0xfe6                                                                                       
002f58   ffe6                                                                                                               
002f5a   0ea2     MOVLW     0xa2                                                                                            
002f5c   6ee6     MOVWF     0xe6,0x0                                                                                        
002f5e   0e01     MOVLW     0x1                                                                                             
002f60   6ee6     MOVWF     0xe6,0x0                                                                                        
002f62   ec52     CALL      0x8a4,0x0                                                                                       
002f64   f004                                                                                                               
002f66   6ef5     MOVWF     0xf5,0x0                                                                                        
002f68   0e08     MOVLW     0x8                                                                                             
002f6a   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
002f6c   50f5     MOVF      0xf5,0x0,0x0                                                                                    
002f6e   cff3     MOVFF     0xff3,0x211                                                                                     
002f70   f211                                                                                                               
002f72   cff3     MOVFF     0xff3,0x210                                                                                     
002f74   f210                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
002f76   0101     MOVLB     0x1            		samplesCount = 0;		                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
002f78   6bc7     CLRF      0xc7,0x1                                                                                        
                                             }                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                              //pwm10 = pwm11 = doPid(&Elev, Get_ADC_Result(2), ELEV_MOTOR_DIR);            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             ///Relays                                                                      C:\code\2008\Mnemosyne - 2008\user_routines.c
002f7a   5088     MOVF      0x88,0x0,0x0     COMP_FWD = !COMP_PRESSURE;  /* Power pump only if pressure switch is off. */   C:\code\2008\Mnemosyne - 2008\user_routines.c
002f7c   0b80     ANDLW     0x80                                                                                            
002f7e   e002     BZ        0x2f84                                                                                          
002f80   908d     BCF       0x8d,0x0,0x0                                                                                    
002f82   d001     BRA       0x2f86                                                                                          
002f84   808d     BSF       0x8d,0x0,0x0                                                                                    
002f86   908c     BCF       0x8c,0x0,0x0     COMP_REV = 0;                                                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
002f88   eccb     CALL      0xf96,0x0        Launcher_State_Machine();   //Handles the arming, firing, and disarming of the dislodger C:\code\2008\Mnemosyne - 2008\user_routines.c
002f8a   f007                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
002f8c   0102     MOVLB     0x2              Pwm1_red   = !Pwm1_green;                                                      C:\code\2008\Mnemosyne - 2008\user_routines.c
002f8e   5100     MOVF      0x0,0x0,0x1                                                                                     
002f90   0b01     ANDLW     0x1                                                                                             
002f92   e002     BZ        0x2f98                                                                                          
002f94   9300     BCF       0x0,0x1,0x1                                                                                     
002f96   d001     BRA       0x2f9a                                                                                          
002f98   8300     BSF       0x0,0x1,0x1                                                                                     
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
002f9a   0101     MOVLB     0x1              if(firstRunFlag)                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
002f9c   51d6     MOVF      0xd6,0x0,0x1                                                                                    
002f9e   e01c     BZ        0x2fd8                                                                                          
                                             {                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
002fa0   0102     MOVLB     0x2            	Pwm1_green = 0;                                                                 C:\code\2008\Mnemosyne - 2008\user_routines.c
002fa2   9100     BCF       0x0,0x0,0x1                                                                                     
002fa4   0102     MOVLB     0x2              	if(p3_sw_top)			  //Compressor Mode: disables motors if aux1 switch on port 3 joystick is held on reset C:\code\2008\Mnemosyne - 2008\user_routines.c
002fa6   ab22     BTFSS     0x22,0x5,0x1                                                                                    
002fa8   d015     BRA       0x2fd4                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
002faa   0101     MOVLB     0x1            		compMode = 1;                                                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
002fac   0e01     MOVLW     0x1                                                                                             
002fae   6fd7     MOVWF     0xd7,0x1                                                                                        
002fb0   0e4a     MOVLW     0x4a           		printf("Compressor Mode -- Motors Disabled, Charging Tanks");                  C:\code\2008\Mnemosyne - 2008\user_routines.c
002fb2   6e00     MOVWF     0x0,0x0                                                                                         
002fb4   0e55     MOVLW     0x55                                                                                            
002fb6   6e01     MOVWF     0x1,0x0                                                                                         
002fb8   6a02     CLRF      0x2,0x0                                                                                         
002fba   c000     MOVFF     0x0,0xfe6                                                                                       
002fbc   ffe6                                                                                                               
002fbe   c001     MOVFF     0x1,0xfe6                                                                                       
002fc0   ffe6                                                                                                               
002fc2   c002     MOVFF     0x2,0xfe6                                                                                       
002fc4   ffe6                                                                                                               
002fc6   ec89     CALL      0x5d12,0x0                                                                                      
002fc8   f02e                                                                                                               
002fca   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002fcc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002fce   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002fd0   0102     MOVLB     0x2            		Pwm1_green = 1;                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
002fd2   8100     BSF       0x0,0x0,0x1                                                                                     
                                               }                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
002fd4   0101     MOVLB     0x1            	firstRunFlag = 0;                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
002fd6   6bd6     CLRF      0xd6,0x1                                                                                        
                                             }                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             //Compressor Mode: disable motors                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
002fd8   51d7     MOVF      0xd7,0x0,0x1     if(compMode)                                                                   C:\code\2008\Mnemosyne - 2008\user_routines.c
002fda   e00f     BZ        0x2ffa                                                                                          
002fdc   0102     MOVLB     0x2              	pwm01 = pwm10 = pwm11 = R_CIM_1 = R_CIM_2 = L_CIM_1 = L_CIM_2 = 127;          C:\code\2008\Mnemosyne - 2008\user_routines.c
002fde   0e7f     MOVLW     0x7f                                                                                            
002fe0   6f13     MOVWF     0x13,0x1                                                                                        
002fe2   c213     MOVFF     0x213,0x212                                                                                     
002fe4   f212                                                                                                               
002fe6   c213     MOVFF     0x213,0x211                                                                                     
002fe8   f211                                                                                                               
002fea   c213     MOVFF     0x213,0x210                                                                                     
002fec   f210                                                                                                               
002fee   c213     MOVFF     0x213,0x20e                                                                                     
002ff0   f20e                                                                                                               
002ff2   c213     MOVFF     0x213,0x20d                                                                                     
002ff4   f20d                                                                                                               
002ff6   c213     MOVFF     0x213,0x204                                                                                     
002ff8   f204                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           ///                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           ///------------------------------------End Mappings-----------------------       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           ///	                                                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// IFI's software based PWM pulse generator for PMW ouputs                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// 13 through 16. This has been replaced with a hardware-                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// based solution, PWM(), below.                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           //	Generate_Pwms(pwm13,pwm14,pwm15,pwm16);                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// see pwm_readme.txt for information about PWM();                              C:\code\2008\Mnemosyne - 2008\user_routines.c
002ffa   c213     MOVFF     0x213,0xfe6    	PWM(pwm13,pwm14,pwm15,pwm16);                                                   C:\code\2008\Mnemosyne - 2008\user_routines.c
002ffc   ffe6                                                                                                               
002ffe   c212     MOVFF     0x212,0xfe6                                                                                     
003000   ffe6                                                                                                               
003002   c211     MOVFF     0x211,0xfe6                                                                                     
003004   ffe6                                                                                                               
003006   c210     MOVFF     0x210,0xfe6                                                                                     
003008   ffe6                                                                                                               
00300a   eced     CALL      0x59da,0x0                                                                                      
00300c   f02c                                                                                                               
00300e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003010   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003012   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003014   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	// don't move this unless you know what you're doing                            C:\code\2008\Mnemosyne - 2008\user_routines.c
003016   0e00     MOVLW     0x0            	Putdata(&txdata);                                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
003018   6ee6     MOVWF     0xe6,0x0                                                                                        
00301a   0e02     MOVLW     0x2                                                                                             
00301c   6ee6     MOVWF     0xe6,0x0                                                                                        
00301e   ec27     CALL      0x264e,0x0                                                                                      
003020   f013                                                                                                               
003022   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003024   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003026   cfd9     MOVFF     0xfd9,0xfe1    }                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
003028   ffe1                                                                                                               
00302a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00302c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00302e   ffd9                                                                                                               
003030   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * FUNCTION NAME: Default_Routine                                                 C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * PURPOSE:       Performs the default mappings of inputs to outputs for the      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *                Robot Controller.                                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * CALLED FROM:   this file, Process_Data_From_Master_uP routine                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * ARGUMENTS:     none                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           * RETURNS:       void                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\user_routines.c
003032   cfd9     MOVFF     0xfd9,0xfe6    void Default_Routine(void)                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
003034   ffe6                                                                                                               
003036   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003038   ffd9                                                                                                               
00303a   0e04     MOVLW     0x4                                                                                             
00303c   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             int x, y;                                                                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                            /*---------- Analog Inputs (Joysticks) to PWM Outputs-----------------------    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *--------------------------------------------------------------------------    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *   This maps the joystick axes to specific PWM outputs.                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             */                                                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             	/* We don't really need this                                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             pwm01 = p1_y;                                                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             pwm02 = p2_y;                                                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             pwm03 = p3_y;                                                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             pwm04 = p4_y;                                                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             pwm05 = p1_x;                                                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             pwm06 = p2_x;                                                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             pwm07 = p3_x;                                                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             pwm08 = p4_x;                                                                  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             pwm09 = p1_wheel;                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             pwm10 = p2_wheel;                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             pwm11 = p3_wheel;                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             pwm12 = p4_wheel; */                                                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                            /*---------- 1 Joystick Drive ----------------------------------------------    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *--------------------------------------------------------------------------    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *  This code mixes the Y and X axis on Port 1 to allow one joystick drive.     C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *  Joystick forward  = Robot forward                                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *  Joystick backward = Robot backward                                          C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *  Joystick right    = Robot rotates right                                     C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *  Joystick left     = Robot rotates left                                      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *  Connect the right drive motors to PWM13 and/or PWM14 on the RC.             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *  Connect the left  drive motors to PWM15 and/or PWM16 on the RC.             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             */                                                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	/*Let's try it my way                                                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             p1_x = 255 - p1_y;                                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             p1_y = 255 - pwm05;                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             pwm13 = pwm14 = Limit_Mix(2000 + p1_y + p1_x - 127);                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             pwm15 = pwm16 = Limit_Mix(2000 + p1_y - p1_x + 127);                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	*/                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                            /*---------- Buttons to Relays----------------------------------------------    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *--------------------------------------------------------------------------    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *  This default code maps the joystick buttons to specific relay outputs.      C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *  Relays 1 and 2 use limit switches to stop the movement in one direction.    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *  The & used below is the C symbol for AND                                    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             */                                                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                            	/* Don't need this...                                                          C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             relay1_fwd = p1_sw_trig & rc_dig_in01;  /* FWD only if switch1 is not closed.  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             relay1_rev = p1_sw_top  & rc_dig_in02;  /* REV only if switch2 is not closed.  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             relay2_fwd = p2_sw_trig & rc_dig_in03;  /* FWD only if switch3 is not closed.  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             relay2_rev = p2_sw_top  & rc_dig_in04;  /* REV only if switch4 is not closed.  C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             relay3_fwd = p3_sw_trig;                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             relay3_rev = p3_sw_top;                                                        C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             relay4_fwd = p4_sw_trig;                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             relay4_rev = p4_sw_top;                                                        C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             relay5_fwd = p1_sw_aux1;                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             relay5_rev = p1_sw_aux2;                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             relay6_fwd = p3_sw_aux1;                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             relay6_rev = p3_sw_aux2;                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             relay7_fwd = p4_sw_aux1;                                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             relay7_rev = p4_sw_aux2; */                                                    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             /*---------- PWM outputs Limited by Limit Switches  ------------------------*/ C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             	/* Don't need this                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             Limit_Switch_Max(rc_dig_in05, &pwm03);                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             Limit_Switch_Min(rc_dig_in06, &pwm03);                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             Limit_Switch_Max(rc_dig_in07, &pwm04);                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             Limit_Switch_Min(rc_dig_in08, &pwm04);                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             Limit_Switch_Max(rc_dig_in09, &pwm09);                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             Limit_Switch_Min(rc_dig_in10, &pwm09);                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             Limit_Switch_Max(rc_dig_in11, &pwm10);                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             Limit_Switch_Min(rc_dig_in12, &pwm10);                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             Limit_Switch_Max(rc_dig_in13, &pwm11);                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             Limit_Switch_Min(rc_dig_in14, &pwm11);                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             Limit_Switch_Max(rc_dig_in15, &pwm12);                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             Limit_Switch_Min(rc_dig_in16, &pwm12);                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           	*/                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                            /*---------- ROBOT FEEDBACK LEDs------------------------------------------------ C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *------------------------------------------------------------------------------ C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *   This section drives the "ROBOT FEEDBACK" lights on the Operator Interface. C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *   The lights are green for joystick forward and red for joystick reverse.    C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *   Both red and green are on when the joystick is centered.  Use the          C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *   trim tabs on the joystick to adjust the center.                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             *   These may be changed for any use that the user desires.                        C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             */	                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
00303e   0102     MOVLB     0x2              if (user_display_mode == 0) /* User Mode is Off */                             C:\code\2008\Mnemosyne - 2008\user_routines.c
003040   bb21     BTFSC     0x21,0x5,0x1                                                                                    
003042   d0a9     BRA       0x3196                                                                                          
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             { /* Check position of Port 1 Joystick */                                      C:\code\2008\Mnemosyne - 2008\user_routines.c
003044   0e00     MOVLW     0x0                if (p1_y >= 0 && p1_y <= 56)                                                 C:\code\2008\Mnemosyne - 2008\user_routines.c
003046   5d26     SUBWF     0x26,0x0,0x1                                                                                    
003048   e307     BNC       0x3058                                                                                          
00304a   5126     MOVF      0x26,0x0,0x1                                                                                    
00304c   0838     SUBLW     0x38                                                                                            
00304e   e304     BNC       0x3058                                                                                          
                                               {                     /* Joystick is in full reverse position */             C:\code\2008\Mnemosyne - 2008\user_routines.c
003050   0102     MOVLB     0x2                  Pwm1_green  = 0;    /* Turn PWM1 green LED - OFF */                        C:\code\2008\Mnemosyne - 2008\user_routines.c
003052   9100     BCF       0x0,0x0,0x1                                                                                     
003054   8300     BSF       0x0,0x1,0x1          Pwm1_red  = 1;      /* Turn PWM1 red LED   - ON  */                        C:\code\2008\Mnemosyne - 2008\user_routines.c
                                               }                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
003056   d02d     BRA       0x30b2             else if (p1_y >= 125 && p1_y <= 129)                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
003058   0e7d     MOVLW     0x7d                                                                                            
00305a   5d26     SUBWF     0x26,0x0,0x1                                                                                    
00305c   e30e     BNC       0x307a                                                                                          
00305e   5126     MOVF      0x26,0x0,0x1                                                                                    
003060   6e00     MOVWF     0x0,0x0                                                                                         
003062   6a01     CLRF      0x1,0x0                                                                                         
003064   3401     RLCF      0x1,0x0,0x0                                                                                     
003066   e204     BC        0x3070                                                                                          
003068   5000     MOVF      0x0,0x0,0x0                                                                                     
00306a   0881     SUBLW     0x81                                                                                            
00306c   0e00     MOVLW     0x0                                                                                             
00306e   5401     SUBFWB    0x1,0x0,0x0                                                                                     
003070   e304     BNC       0x307a                                                                                          
                                               {                     /* Joystick is in neutral position */                  C:\code\2008\Mnemosyne - 2008\user_routines.c
003072   0102     MOVLB     0x2                  Pwm1_green  = 1;    /* Turn PWM1 green LED - ON */                         C:\code\2008\Mnemosyne - 2008\user_routines.c
003074   8100     BSF       0x0,0x0,0x1                                                                                     
003076   8300     BSF       0x0,0x1,0x1          Pwm1_red  = 1;      /* Turn PWM1 red LED   - ON */                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                               }                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
003078   d01c     BRA       0x30b2             else if (p1_y >= 216 && p1_y <= 255)                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
00307a   5126     MOVF      0x26,0x0,0x1                                                                                    
00307c   6e00     MOVWF     0x0,0x0                                                                                         
00307e   6a01     CLRF      0x1,0x0                                                                                         
003080   90d8     BCF       0xd8,0x0,0x0                                                                                    
003082   5001     MOVF      0x1,0x0,0x0                                                                                     
003084   e604     BN        0x308e                                                                                          
003086   0ed8     MOVLW     0xd8                                                                                            
003088   5c00     SUBWF     0x0,0x0,0x0                                                                                     
00308a   0e00     MOVLW     0x0                                                                                             
00308c   5801     SUBWFB    0x1,0x0,0x0                                                                                     
00308e   e30e     BNC       0x30ac                                                                                          
003090   5126     MOVF      0x26,0x0,0x1                                                                                    
003092   6e02     MOVWF     0x2,0x0                                                                                         
003094   6a03     CLRF      0x3,0x0                                                                                         
003096   3403     RLCF      0x3,0x0,0x0                                                                                     
003098   e204     BC        0x30a2                                                                                          
00309a   5002     MOVF      0x2,0x0,0x0                                                                                     
00309c   08ff     SUBLW     0xff                                                                                            
00309e   0e00     MOVLW     0x0                                                                                             
0030a0   5403     SUBFWB    0x3,0x0,0x0                                                                                     
0030a2   e304     BNC       0x30ac                                                                                          
                                               {                     /* Joystick is in full forward position*/              C:\code\2008\Mnemosyne - 2008\user_routines.c
0030a4   0102     MOVLB     0x2                  Pwm1_green  = 1;    /* Turn PWM1 green LED - ON  */                        C:\code\2008\Mnemosyne - 2008\user_routines.c
0030a6   8100     BSF       0x0,0x0,0x1                                                                                     
0030a8   9300     BCF       0x0,0x1,0x1          Pwm1_red  = 0;      /* Turn PWM1 red LED   - OFF */                        C:\code\2008\Mnemosyne - 2008\user_routines.c
                                               }                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
0030aa   d003     BRA       0x30b2             else                                                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                               {                     /* In either forward or reverse position */            C:\code\2008\Mnemosyne - 2008\user_routines.c
0030ac   0102     MOVLB     0x2                  Pwm1_green  = 0;    /* Turn PWM1 green LED - OFF */                        C:\code\2008\Mnemosyne - 2008\user_routines.c
0030ae   9100     BCF       0x0,0x0,0x1                                                                                     
0030b0   9300     BCF       0x0,0x1,0x1          Pwm1_red  = 0;      /* Turn PWM1 red LED   - OFF */                        C:\code\2008\Mnemosyne - 2008\user_routines.c
                                               }  /*END Check position of Port 1 Joystick                                   C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                               /* Check position of Port 2 Y Joystick                                       C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                      (or Port 1 X in Single Joystick Drive Mode) */                        C:\code\2008\Mnemosyne - 2008\user_routines.c
0030b2   0e00     MOVLW     0x0                if (p2_y >= 0 && p2_y <= 56)                                                 C:\code\2008\Mnemosyne - 2008\user_routines.c
0030b4   0102     MOVLB     0x2                                                                                             
0030b6   5d27     SUBWF     0x27,0x0,0x1                                                                                    
0030b8   e307     BNC       0x30c8                                                                                          
0030ba   5127     MOVF      0x27,0x0,0x1                                                                                    
0030bc   0838     SUBLW     0x38                                                                                            
0030be   e304     BNC       0x30c8                                                                                          
                                               {                     /* Joystick is in full reverse position */             C:\code\2008\Mnemosyne - 2008\user_routines.c
0030c0   0102     MOVLB     0x2                  Pwm2_green  = 0;    /* Turn pwm2 green LED - OFF */                        C:\code\2008\Mnemosyne - 2008\user_routines.c
0030c2   9500     BCF       0x0,0x2,0x1                                                                                     
0030c4   8700     BSF       0x0,0x3,0x1          Pwm2_red  = 1;      /* Turn pwm2 red LED   - ON  */                        C:\code\2008\Mnemosyne - 2008\user_routines.c
                                               }                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
0030c6   d02d     BRA       0x3122             else if (p2_y >= 125 && p2_y <= 129)                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
0030c8   0e7d     MOVLW     0x7d                                                                                            
0030ca   5d27     SUBWF     0x27,0x0,0x1                                                                                    
0030cc   e30e     BNC       0x30ea                                                                                          
0030ce   5127     MOVF      0x27,0x0,0x1                                                                                    
0030d0   6e00     MOVWF     0x0,0x0                                                                                         
0030d2   6a01     CLRF      0x1,0x0                                                                                         
0030d4   3401     RLCF      0x1,0x0,0x0                                                                                     
0030d6   e204     BC        0x30e0                                                                                          
0030d8   5000     MOVF      0x0,0x0,0x0                                                                                     
0030da   0881     SUBLW     0x81                                                                                            
0030dc   0e00     MOVLW     0x0                                                                                             
0030de   5401     SUBFWB    0x1,0x0,0x0                                                                                     
0030e0   e304     BNC       0x30ea                                                                                          
                                               {                     /* Joystick is in neutral position */                  C:\code\2008\Mnemosyne - 2008\user_routines.c
0030e2   0102     MOVLB     0x2                  Pwm2_green  = 1;    /* Turn PWM2 green LED - ON */                         C:\code\2008\Mnemosyne - 2008\user_routines.c
0030e4   8500     BSF       0x0,0x2,0x1                                                                                     
0030e6   8700     BSF       0x0,0x3,0x1          Pwm2_red  = 1;      /* Turn PWM2 red LED   - ON */                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                               }                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
0030e8   d01c     BRA       0x3122             else if (p2_y >= 216 && p2_y <= 255)                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
0030ea   5127     MOVF      0x27,0x0,0x1                                                                                    
0030ec   6e00     MOVWF     0x0,0x0                                                                                         
0030ee   6a01     CLRF      0x1,0x0                                                                                         
0030f0   90d8     BCF       0xd8,0x0,0x0                                                                                    
0030f2   5001     MOVF      0x1,0x0,0x0                                                                                     
0030f4   e604     BN        0x30fe                                                                                          
0030f6   0ed8     MOVLW     0xd8                                                                                            
0030f8   5c00     SUBWF     0x0,0x0,0x0                                                                                     
0030fa   0e00     MOVLW     0x0                                                                                             
0030fc   5801     SUBWFB    0x1,0x0,0x0                                                                                     
0030fe   e30e     BNC       0x311c                                                                                          
003100   5127     MOVF      0x27,0x0,0x1                                                                                    
003102   6e02     MOVWF     0x2,0x0                                                                                         
003104   6a03     CLRF      0x3,0x0                                                                                         
003106   3403     RLCF      0x3,0x0,0x0                                                                                     
003108   e204     BC        0x3112                                                                                          
00310a   5002     MOVF      0x2,0x0,0x0                                                                                     
00310c   08ff     SUBLW     0xff                                                                                            
00310e   0e00     MOVLW     0x0                                                                                             
003110   5403     SUBFWB    0x3,0x0,0x0                                                                                     
003112   e304     BNC       0x311c                                                                                          
                                               {                     /* Joystick is in full forward position */             C:\code\2008\Mnemosyne - 2008\user_routines.c
003114   0102     MOVLB     0x2                  Pwm2_green  = 1;    /* Turn PWM2 green LED - ON  */                        C:\code\2008\Mnemosyne - 2008\user_routines.c
003116   8500     BSF       0x0,0x2,0x1                                                                                     
003118   9700     BCF       0x0,0x3,0x1          Pwm2_red  = 0;      /* Turn PWM2 red LED   - OFF */                        C:\code\2008\Mnemosyne - 2008\user_routines.c
                                               }                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
00311a   d003     BRA       0x3122             else                                                                         C:\code\2008\Mnemosyne - 2008\user_routines.c
                                               {                     /* In either forward or reverse position */            C:\code\2008\Mnemosyne - 2008\user_routines.c
00311c   0102     MOVLB     0x2                  Pwm2_green  = 0;    /* Turn PWM2 green LED - OFF */                        C:\code\2008\Mnemosyne - 2008\user_routines.c
00311e   9500     BCF       0x0,0x2,0x1                                                                                     
003120   9700     BCF       0x0,0x3,0x1          Pwm2_red  = 0;      /* Turn PWM2 red LED   - OFF */                        C:\code\2008\Mnemosyne - 2008\user_routines.c
                                               }  /* END Check position of Port 2 Joystick */                               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                               /* This drives the Relay 1 and Relay 2 "Robot Feedback" lights on the OI. */ C:\code\2008\Mnemosyne - 2008\user_routines.c
003122   9b00     BCF       0x0,0x5,0x1        Relay1_green = relay1_fwd;    /* LED is ON when Relay 1 is FWD */            C:\code\2008\Mnemosyne - 2008\user_routines.c
003124   508d     MOVF      0x8d,0x0,0x0                                                                                    
003126   0b01     ANDLW     0x1                                                                                             
003128   e001     BZ        0x312c                                                                                          
00312a   8b00     BSF       0x0,0x5,0x1                                                                                     
00312c   9900     BCF       0x0,0x4,0x1        Relay1_red = relay1_rev;      /* LED is ON when Relay 1 is REV */            C:\code\2008\Mnemosyne - 2008\user_routines.c
00312e   508c     MOVF      0x8c,0x0,0x0                                                                                    
003130   0b01     ANDLW     0x1                                                                                             
003132   e001     BZ        0x3136                                                                                          
003134   8900     BSF       0x0,0x4,0x1                                                                                     
003136   9f00     BCF       0x0,0x7,0x1        Relay2_green = relay2_fwd;    /* LED is ON when Relay 2 is FWD */            C:\code\2008\Mnemosyne - 2008\user_routines.c
003138   508d     MOVF      0x8d,0x0,0x0                                                                                    
00313a   0b02     ANDLW     0x2                                                                                             
00313c   e001     BZ        0x3140                                                                                          
00313e   8f00     BSF       0x0,0x7,0x1                                                                                     
003140   9d00     BCF       0x0,0x6,0x1        Relay2_red = relay2_rev;      /* LED is ON when Relay 2 is REV */            C:\code\2008\Mnemosyne - 2008\user_routines.c
003142   508c     MOVF      0x8c,0x0,0x0                                                                                    
003144   0b02     ANDLW     0x2                                                                                             
003146   e001     BZ        0x314a                                                                                          
003148   8d00     BSF       0x0,0x6,0x1                                                                                     
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
00314a   5081     MOVF      0x81,0x0,0x0       Switch1_LED = !(int)rc_dig_in01;                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
00314c   0b04     ANDLW     0x4                                                                                             
00314e   e001     BZ        0x3152                                                                                          
003150   0e01     MOVLW     0x1                                                                                             
003152   6e00     MOVWF     0x0,0x0                                                                                         
003154   6a01     CLRF      0x1,0x0                                                                                         
003156   5000     MOVF      0x0,0x0,0x0                                                                                     
003158   1001     IORWF     0x1,0x0,0x0                                                                                     
00315a   e002     BZ        0x3160                                                                                          
00315c   0e00     MOVLW     0x0                                                                                             
00315e   d001     BRA       0x3162                                                                                          
003160   0e01     MOVLW     0x1                                                                                             
003162   0b01     ANDLW     0x1                                                                                             
003164   6ef3     MOVWF     0xf3,0x0                                                                                        
003166   0efe     MOVLW     0xfe                                                                                            
003168   1501     ANDWF     0x1,0x0,0x1                                                                                     
00316a   10f3     IORWF     0xf3,0x0,0x0                                                                                    
00316c   6f01     MOVWF     0x1,0x1                                                                                         
00316e   5081     MOVF      0x81,0x0,0x0       Switch2_LED = !(int)rc_dig_in02;                                             C:\code\2008\Mnemosyne - 2008\user_routines.c
003170   0b08     ANDLW     0x8                                                                                             
003172   e001     BZ        0x3176                                                                                          
003174   0e01     MOVLW     0x1                                                                                             
003176   6e00     MOVWF     0x0,0x0                                                                                         
003178   6a01     CLRF      0x1,0x0                                                                                         
00317a   5000     MOVF      0x0,0x0,0x0                                                                                     
00317c   1001     IORWF     0x1,0x0,0x0                                                                                     
00317e   e002     BZ        0x3184                                                                                          
003180   0e00     MOVLW     0x0                                                                                             
003182   d001     BRA       0x3186                                                                                          
003184   0e01     MOVLW     0x1                                                                                             
003186   0b01     ANDLW     0x1                                                                                             
003188   6ef3     MOVWF     0xf3,0x0                                                                                        
00318a   46f3     RLNCF     0xf3,0x1,0x0                                                                                    
00318c   0efd     MOVLW     0xfd                                                                                            
00318e   1501     ANDWF     0x1,0x0,0x1                                                                                     
003190   10f3     IORWF     0xf3,0x0,0x0                                                                                    
003192   6f01     MOVWF     0x1,0x1                                                                                         
                                               //Switch3_LED = !(int)rc_dig_in03;                                           C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             } /* (user_display_mode = 0) (User Mode is Off) */                             C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
003194   d052     BRA       0x323a           else  /* User Mode is On - displays data in OI 4-digit display*/               C:\code\2008\Mnemosyne - 2008\user_routines.c
                                             {                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
003196   c237     MOVFF     0x237,0x42         User_Mode_byte = backup_voltage*10; /* so that decimal doesn't get truncated. */ C:\code\2008\Mnemosyne - 2008\user_routines.c
003198   f042                                                                                                               
00319a   ecfb     CALL      0x41f6,0x0                                                                                      
00319c   f020                                                                                                               
00319e   c040     MOVFF     0x40,0x8                                                                                        
0031a0   f008                                                                                                               
0031a2   c041     MOVFF     0x41,0x9                                                                                        
0031a4   f009                                                                                                               
0031a6   c042     MOVFF     0x42,0xa                                                                                        
0031a8   f00a                                                                                                               
0031aa   c043     MOVFF     0x43,0xb                                                                                        
0031ac   f00b                                                                                                               
0031ae   0e71     MOVLW     0x71                                                                                            
0031b0   6e45     MOVWF     0x45,0x0                                                                                        
0031b2   0e3d     MOVLW     0x3d                                                                                            
0031b4   6e46     MOVWF     0x46,0x0                                                                                        
0031b6   0e7a     MOVLW     0x7a                                                                                            
0031b8   6e47     MOVWF     0x47,0x0                                                                                        
0031ba   0e41     MOVLW     0x41                                                                                            
0031bc   6e48     MOVWF     0x48,0x0                                                                                        
0031be   c008     MOVFF     0x8,0x40                                                                                        
0031c0   f040                                                                                                               
0031c2   c009     MOVFF     0x9,0x41                                                                                        
0031c4   f041                                                                                                               
0031c6   c00a     MOVFF     0xa,0x42                                                                                        
0031c8   f042                                                                                                               
0031ca   c00b     MOVFF     0xb,0x43                                                                                        
0031cc   f043                                                                                                               
0031ce   ec5f     CALL      0x42be,0x0                                                                                      
0031d0   f021                                                                                                               
0031d2   c040     MOVFF     0x40,0x4                                                                                        
0031d4   f004                                                                                                               
0031d6   c041     MOVFF     0x41,0x5                                                                                        
0031d8   f005                                                                                                               
0031da   c042     MOVFF     0x42,0x6                                                                                        
0031dc   f006                                                                                                               
0031de   c043     MOVFF     0x43,0x7                                                                                        
0031e0   f007                                                                                                               
0031e2   6a45     CLRF      0x45,0x0                                                                                        
0031e4   6a46     CLRF      0x46,0x0                                                                                        
0031e6   0e80     MOVLW     0x80                                                                                            
0031e8   6e47     MOVWF     0x47,0x0                                                                                        
0031ea   0e43     MOVLW     0x43                                                                                            
0031ec   6e48     MOVWF     0x48,0x0                                                                                        
0031ee   c004     MOVFF     0x4,0x40                                                                                        
0031f0   f040                                                                                                               
0031f2   c005     MOVFF     0x5,0x41                                                                                        
0031f4   f041                                                                                                               
0031f6   c006     MOVFF     0x6,0x42                                                                                        
0031f8   f042                                                                                                               
0031fa   c007     MOVFF     0x7,0x43                                                                                        
0031fc   f043                                                                                                               
0031fe   ec0c     CALL      0x4218,0x0                                                                                      
003200   f021                                                                                                               
003202   c040     MOVFF     0x40,0x0                                                                                        
003204   f000                                                                                                               
003206   c041     MOVFF     0x41,0x1                                                                                        
003208   f001                                                                                                               
00320a   c042     MOVFF     0x42,0x2                                                                                        
00320c   f002                                                                                                               
00320e   c043     MOVFF     0x43,0x3                                                                                        
003210   f003                                                                                                               
003212   6a45     CLRF      0x45,0x0                                                                                        
003214   6a46     CLRF      0x46,0x0                                                                                        
003216   0e20     MOVLW     0x20                                                                                            
003218   6e47     MOVWF     0x47,0x0                                                                                        
00321a   0e41     MOVLW     0x41                                                                                            
00321c   6e48     MOVWF     0x48,0x0                                                                                        
00321e   c000     MOVFF     0x0,0x40                                                                                        
003220   f040                                                                                                               
003222   c001     MOVFF     0x1,0x41                                                                                        
003224   f041                                                                                                               
003226   c002     MOVFF     0x2,0x42                                                                                        
003228   f042                                                                                                               
00322a   c003     MOVFF     0x3,0x43                                                                                        
00322c   f043                                                                                                               
00322e   ec5f     CALL      0x42be,0x0                                                                                      
003230   f021                                                                                                               
003232   ec53     CALL      0x44a6,0x0                                                                                      
003234   f022                                                                                                               
003236   c042     MOVFF     0x42,0x200                                                                                      
003238   f200                                                                                                               
                                             }                                                                              C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
00323a   cfd9     MOVFF     0xfd9,0xfe1    } /* END Default_Routine(); */                                                   C:\code\2008\Mnemosyne - 2008\user_routines.c
00323c   ffe1                                                                                                               
00323e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003240   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003242   ffd9                                                                                                               
003244   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           /******************************************************************************/ C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           /******************************************************************************/ C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           /******************************************************************************/ C:\code\2008\Mnemosyne - 2008\user_routines.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * FILE NAME: user_routines_fast.c <FRC VERSION>                                  C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * DESCRIPTION:                                                                   C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           *  This file is where the user can add their custom code within the framework    C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           *  of the routines below.                                                        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * USAGE:                                                                         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           *  You can either modify this file to fit your needs, or remove it from your     C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           *  project and replace it with a modified copy.                                  C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * OPTIONS:  Interrupts are disabled and not used by default.                     C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           *                                                                                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           #include <stdio.h>                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           #include "ifi_aliases.h"                                                         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           #include "ifi_default.h"                                                         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           #include "ifi_utilities.h"                                                       C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           #include "user_routines.h"                                                       C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           #include "serial_ports.h"                                                        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           #include "pwm.h"                                                                 C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           // #include "user_Serialdrv.h"                                                   C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           #include "adc.h"                                                                 C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           #include "encoder.h"                                                             C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           #include "gyro.h"                                                                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           #include "TRCfunctions.h"                                                        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           extern VelServo Left, Right;                                                     C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           /*** DEFINE USER VARIABLES AND INITIALIZE THEM HERE ***/                         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           unsigned long timerTicks = 0;                                                    C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           int encoder1Vel = 0;                                                             C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           int encoder2Vel = 0;                                                             C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * FUNCTION NAME: InterruptVectorLow                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * PURPOSE:       Low priority interrupt vector                                   C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * CALLED FROM:   nowhere by default                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * ARGUMENTS:     none                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * RETURNS:       void                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * DO NOT MODIFY OR DELETE THIS FUNCTION                                          C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           #pragma code InterruptVectorLow = LOW_INT_VECTOR                                 C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           void InterruptVectorLow (void)                                                   C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                             _asm                                                                           C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
000818   efc7     GOTO      0x3d8e             goto InterruptHandlerLow  /*jump to interrupt routine*/                      C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
00081a   f01e                                                                                                               
                                             _endasm                                                                        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
00081c   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * FUNCTION NAME: InterruptHandlerLow                                             C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * PURPOSE:       Low priority interrupt handler                                  C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * If you want to use these external low priority interrupts or any of the        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * peripheral interrupts then you must enable them in your initialization         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * routine.  Innovation First, Inc. will not provide support for using these      C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * interrupts, so be careful.  There is great potential for glitchy code if good  C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * interrupt programming practices are not followed.  Especially read p. 28 of    C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * the "MPLAB(R) C18 C Compiler User's Guide" for information on context saving.  C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * CALLED FROM:   this file, InterruptVectorLow routine                           C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * ARGUMENTS:     none                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * RETURNS:       void                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           #pragma code                                                                     C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           #pragma interruptlow InterruptHandlerLow save=PROD,section(".tmpdata")           C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003d8e   cfd8     MOVFF     0xfd8,0xfe4    void InterruptHandlerLow ()                                                      C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003d90   ffe4                                                                                                               
003d92   cfe0     MOVFF     0xfe0,0xfe4                                                                                     
003d94   ffe4                                                                                                               
003d96   6ee4     MOVWF     0xe4,0x0                                                                                        
003d98   cfda     MOVFF     0xfda,0xfe4                                                                                     
003d9a   ffe4                                                                                                               
003d9c   cfe2     MOVFF     0xfe2,0xfda                                                                                     
003d9e   ffda                                                                                                               
003da0   cfe9     MOVFF     0xfe9,0xfe4                                                                                     
003da2   ffe4                                                                                                               
003da4   cfea     MOVFF     0xfea,0xfe4                                                                                     
003da6   ffe4                                                                                                               
003da8   cff3     MOVFF     0xff3,0xfe4                                                                                     
003daa   ffe4                                                                                                               
003dac   cff4     MOVFF     0xff4,0xfe4                                                                                     
003dae   ffe4                                                                                                               
003db0   ee00     LFSR      0x0,0x0                                                                                         
003db2   f000                                                                                                               
003db4   0e24     MOVLW     0x24                                                                                            
003db6   04e8     DECF      0xe8,0x0,0x0                                                                                    
003db8   e303     BNC       0x3dc0                                                                                          
003dba   cfee     MOVFF     0xfee,0xfe4                                                                                     
003dbc   ffe4                                                                                                               
003dbe   d7fb     BRA       0x3db6                                                                                          
003dc0   52e6     MOVF      0xe6,0x1,0x0                                                                                    
003dc2   cfd9     MOVFF     0xfd9,0xfe6                                                                                     
003dc4   ffe6                                                                                                               
003dc6   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003dc8   ffd9                                                                                                               
003dca   0e02     MOVLW     0x2                                                                                             
003dcc   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           	unsigned char Port_B;                                                           C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           	unsigned char Port_B_Delta;                                                     C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           	static long prevEnc1 = 0;                                                       C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           	static long prevEnc2 = 0;                                                       C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003dce   509e     MOVF      0x9e,0x0,0x0   	if (PIR1bits.RC1IF && PIE1bits.RC1IE) // rx1 interrupt?                         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003dd0   0b20     ANDLW     0x20                                                                                            
003dd2   e006     BZ        0x3de0                                                                                          
003dd4   509d     MOVF      0x9d,0x0,0x0                                                                                    
003dd6   0b20     ANDLW     0x20                                                                                            
003dd8   e003     BZ        0x3de0                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           		#ifdef ENABLE_SERIAL_PORT_ONE_RX                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003dda   ec1d     CALL      0x523a,0x0     		Rx_1_Int_Handler(); // call the rx1 interrupt handler (in serial_ports.c)      C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003ddc   f029                                                                                                               
                                           		#endif                                                                         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003dde   d0b6     BRA       0x3f4c         	else if (PIR3bits.RC2IF && PIE3bits.RC2IE) // rx2 interrupt?                    C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003de0   50a4     MOVF      0xa4,0x0,0x0                                                                                    
003de2   0b20     ANDLW     0x20                                                                                            
003de4   e006     BZ        0x3df2                                                                                          
003de6   50a3     MOVF      0xa3,0x0,0x0                                                                                    
003de8   0b20     ANDLW     0x20                                                                                            
003dea   e003     BZ        0x3df2                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           		#ifdef ENABLE_SERIAL_PORT_TWO_RX                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003dec   ec3c     CALL      0x5278,0x0     		Rx_2_Int_Handler(); // call the rx2 interrupt handler (in serial_ports.c)      C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003dee   f029                                                                                                               
                                           		#endif                                                                         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003df0   d0ad     BRA       0x3f4c         	else if (PIR1bits.TX1IF && PIE1bits.TX1IE) // tx1 interrupt?                    C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003df2   509e     MOVF      0x9e,0x0,0x0                                                                                    
003df4   0b10     ANDLW     0x10                                                                                            
003df6   e006     BZ        0x3e04                                                                                          
003df8   509d     MOVF      0x9d,0x0,0x0                                                                                    
003dfa   0b10     ANDLW     0x10                                                                                            
003dfc   e003     BZ        0x3e04                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           		#ifdef ENABLE_SERIAL_PORT_ONE_TX                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003dfe   ec5b     CALL      0x52b6,0x0     		Tx_1_Int_Handler(); // call the tx1 interrupt handler (in serial_ports.c)      C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e00   f029                                                                                                               
                                           		#endif                                                                         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e02   d0a4     BRA       0x3f4c         	else if (PIR3bits.TX2IF && PIE3bits.TX2IE) // tx2 interrupt?                    C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e04   50a4     MOVF      0xa4,0x0,0x0                                                                                    
003e06   0b10     ANDLW     0x10                                                                                            
003e08   e006     BZ        0x3e16                                                                                          
003e0a   50a3     MOVF      0xa3,0x0,0x0                                                                                    
003e0c   0b10     ANDLW     0x10                                                                                            
003e0e   e003     BZ        0x3e16                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           		#ifdef ENABLE_SERIAL_PORT_TWO_TX                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e10   ec73     CALL      0x52e6,0x0     		Tx_2_Int_Handler(); // call the tx2 interrupt handler (in serial_ports.c)      C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e12   f029                                                                                                               
                                           		#endif                                                                         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e14   d09b     BRA       0x3f4c         	else if(PIR1bits.TMR2IF && PIE1bits.TMR2IE) // timer 2 interrupt?               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e16   509e     MOVF      0x9e,0x0,0x0                                                                                    
003e18   0b02     ANDLW     0x2                                                                                             
003e1a   e007     BZ        0x3e2a                                                                                          
003e1c   509d     MOVF      0x9d,0x0,0x0                                                                                    
003e1e   0b02     ANDLW     0x2                                                                                             
003e20   e004     BZ        0x3e2a                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e22   929e     BCF       0x9e,0x1,0x0   		PIR1bits.TMR2IF = 0; // clear the timer 2 interrupt flag [92]                  C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e24   ec2d     CALL      0x485a,0x0     		Timer_2_Int_Handler(); // call the timer 2 interrupt handler (in adc.c)        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e26   f024                                                                                                               
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e28   d091     BRA       0x3f4c         	else if(PIR1bits.ADIF && PIE1bits.ADIE) // ADC interrupt                        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e2a   509e     MOVF      0x9e,0x0,0x0                                                                                    
003e2c   0b40     ANDLW     0x40                                                                                            
003e2e   e007     BZ        0x3e3e                                                                                          
003e30   509d     MOVF      0x9d,0x0,0x0                                                                                    
003e32   0b40     ANDLW     0x40                                                                                            
003e34   e004     BZ        0x3e3e                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e36   9c9e     BCF       0x9e,0x6,0x0   		PIR1bits.ADIF = 0; // clear the ADC interrupt flag                             C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e38   ec2f     CALL      0x485e,0x0     		ADC_Int_Handler(); // call the ADC interrupt handler (in adc.c)                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e3a   f024                                                                                                               
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e3c   d087     BRA       0x3f4c         	else if (INTCON3bits.INT2IF && INTCON3bits.INT2IE) // encoder 1 interrupt?      C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e3e   50f0     MOVF      0xf0,0x0,0x0                                                                                    
003e40   0b02     ANDLW     0x2                                                                                             
003e42   e007     BZ        0x3e52                                                                                          
003e44   50f0     MOVF      0xf0,0x0,0x0                                                                                    
003e46   0b10     ANDLW     0x10                                                                                            
003e48   e004     BZ        0x3e52                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e4a   92f0     BCF       0xf0,0x1,0x0   		INTCON3bits.INT2IF = 0; // clear the interrupt flag                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           		#ifdef ENABLE_ENCODER_1                                                        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e4c   ecee     CALL      0x5bdc,0x0     		Encoder_1_Int_Handler(); // call the left encoder interrupt handler (in encoder.c) C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e4e   f02d                                                                                                               
                                           		#endif                                                                         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e50   d07d     BRA       0x3f4c         	else if (INTCON3bits.INT3IF && INTCON3bits.INT3IE) // encoder 2 interrupt?      C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e52   50f0     MOVF      0xf0,0x0,0x0                                                                                    
003e54   0b04     ANDLW     0x4                                                                                             
003e56   e007     BZ        0x3e66                                                                                          
003e58   50f0     MOVF      0xf0,0x0,0x0                                                                                    
003e5a   0b20     ANDLW     0x20                                                                                            
003e5c   e004     BZ        0x3e66                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e5e   94f0     BCF       0xf0,0x2,0x0   		INTCON3bits.INT3IF = 0; // clear the interrupt flag                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           		#ifdef ENABLE_ENCODER_2                                                        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e60   ec2a     CALL      0x5c54,0x0     		Encoder_2_Int_Handler(); // call right encoder interrupt handler (in encoder.c) C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e62   f02e                                                                                                               
                                           		#endif                                                                         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e64   d073     BRA       0x3f4c         	else if (INTCONbits.RBIF && INTCONbits.RBIE) // encoder 3-6 interrupt?          C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e66   50f2     MOVF      0xf2,0x0,0x0                                                                                    
003e68   0b01     ANDLW     0x1                                                                                             
003e6a   e018     BZ        0x3e9c                                                                                          
003e6c   50f2     MOVF      0xf2,0x0,0x0                                                                                    
003e6e   0b08     ANDLW     0x8                                                                                             
003e70   e015     BZ        0x3e9c                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e72   5081     MOVF      0x81,0x0,0x0   		Port_B = PORTB; // remove the "mismatch condition" by reading port b             C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e74   6edf     MOVWF     0xdf,0x0                                                                                        
003e76   90f2     BCF       0xf2,0x0,0x0   		INTCONbits.RBIF = 0; // clear the interrupt flag                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e78   50df     MOVF      0xdf,0x0,0x0   		Port_B_Delta = Port_B ^ Old_Port_B; // determine which bits have changed       C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e7a   0101     MOVLB     0x1                                                                                             
003e7c   19ff     XORWF     0xff,0x0,0x1                                                                                    
003e7e   6ee7     MOVWF     0xe7,0x0                                                                                        
003e80   0e01     MOVLW     0x1                                                                                             
003e82   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
003e84   ffdb                                                                                                               
003e86   cfdf     MOVFF     0xfdf,0x1ff    		Old_Port_B = Port_B; // save a copy of port b for next time around             C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e88   f1ff                                                                                                               
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e8a   a8db     BTFSS     0xdb,0x4,0x0   		if(Port_B_Delta & 0x10) // did external interrupt 3 change state?              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e8c   d000     BRA       0x3e8e                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           			#ifdef ENABLE_ENCODER_3                                                       C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           			Encoder_3_Int_Handler(Port_B & 0x10 ? 1 : 0); // call the encoder 3 interrupt handler (in encoder.c) C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           			#endif                                                                        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e8e   aadb     BTFSS     0xdb,0x5,0x0   		if(Port_B_Delta & 0x20) // did external interrupt 4 change state?              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e90   d000     BRA       0x3e92                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           			#ifdef ENABLE_ENCODER_4                                                       C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           			Encoder_4_Int_Handler(Port_B & 0x20 ? 1 : 0); // call the encoder 4 interrupt handler (in encoder.c) C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           			#endif                                                                        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e92   acdb     BTFSS     0xdb,0x6,0x0   		if(Port_B_Delta & 0x40) // did external interrupt 5 change state?              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e94   d000     BRA       0x3e96                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           			#ifdef ENABLE_ENCODER_5                                                       C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           			Encoder_5_Int_Handler(Port_B & 0x40 ? 1 : 0); // call the encoder 5 interrupt handler (in encoder.c) C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           			#endif                                                                        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e96   aedb     BTFSS     0xdb,0x7,0x0   		if(Port_B_Delta & 0x80) // did external interrupt 6 change state?              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e98   d000     BRA       0x3e9a                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           			#ifdef ENABLE_ENCODER_6                                                       C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           			Encoder_6_Int_Handler(Port_B & 0x80 ? 1 : 0); // call the encoder 6 interrupt handler (in encoder.c) C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           			#endif                                                                        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e9a   d058     BRA       0x3f4c         	} else if (PIR1bits.TMR1IF)                                                     C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003e9c   a09e     BTFSS     0x9e,0x0,0x0                                                                                    
003e9e   d056     BRA       0x3f4c                                                                                          
                                           	{                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003ea0   909e     BCF       0x9e,0x0,0x0   		PIR1bits.TMR1IF = 0; // Clear the Timer1 Interrupt Flag                        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003ea2   0e7f     MOVLW     0x7f           		TMR1H = 0x7F; 		 // Reset Timer 1                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003ea4   6ecf     MOVWF     0xcf,0x0                                                                                        
003ea6   68ce     SETF      0xce,0x0       		TMR1L = 0xFF;                                                                  C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003ea8   0102     MOVLB     0x2            		timerTicks++;                                                                  C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003eaa   2b87     INCF      0x87,0x1,0x1                                                                                    
003eac   0e00     MOVLW     0x0                                                                                             
003eae   2388     ADDWFC    0x88,0x1,0x1                                                                                    
003eb0   2389     ADDWFC    0x89,0x1,0x1                                                                                    
003eb2   238a     ADDWFC    0x8a,0x1,0x1                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003eb4   c287     MOVFF     0x287,0x4f     		if(timerTicks % 2 == 0)                                                        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003eb6   f04f                                                                                                               
003eb8   c288     MOVFF     0x288,0x50                                                                                      
003eba   f050                                                                                                               
003ebc   c289     MOVFF     0x289,0x51                                                                                      
003ebe   f051                                                                                                               
003ec0   c28a     MOVFF     0x28a,0x52                                                                                      
003ec2   f052                                                                                                               
003ec4   0e01     MOVLW     0x1                                                                                             
003ec6   164f     ANDWF     0x4f,0x1,0x0                                                                                    
003ec8   6a50     CLRF      0x50,0x0                                                                                        
003eca   6a51     CLRF      0x51,0x0                                                                                        
003ecc   6a52     CLRF      0x52,0x0                                                                                        
003ece   504f     MOVF      0x4f,0x0,0x0                                                                                    
003ed0   1050     IORWF     0x50,0x0,0x0                                                                                    
003ed2   1051     IORWF     0x51,0x0,0x0                                                                                    
003ed4   1052     IORWF     0x52,0x0,0x0                                                                                    
003ed6   e13a     BNZ       0x3f4c                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003ed8   ecc2     CALL      0x5b84,0x0     			encoder1Vel = Get_Encoder_1_Count() - prevEnc1;                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003eda   f02d                                                                                                               
003edc   0102     MOVLB     0x2                                                                                             
003ede   518f     MOVF      0x8f,0x0,0x1                                                                                    
003ee0   5c3f     SUBWF     0x3f,0x0,0x0                                                                                    
003ee2   6e4f     MOVWF     0x4f,0x0                                                                                        
003ee4   5190     MOVF      0x90,0x0,0x1                                                                                    
003ee6   5840     SUBWFB    0x40,0x0,0x0                                                                                    
003ee8   6e50     MOVWF     0x50,0x0                                                                                        
003eea   5191     MOVF      0x91,0x0,0x1                                                                                    
003eec   5841     SUBWFB    0x41,0x0,0x0                                                                                    
003eee   6e51     MOVWF     0x51,0x0                                                                                        
003ef0   5192     MOVF      0x92,0x0,0x1                                                                                    
003ef2   5842     SUBWFB    0x42,0x0,0x0                                                                                    
003ef4   6e52     MOVWF     0x52,0x0                                                                                        
003ef6   c04f     MOVFF     0x4f,0x28b                                                                                      
003ef8   f28b                                                                                                               
003efa   c050     MOVFF     0x50,0x28c                                                                                      
003efc   f28c                                                                                                               
003efe   ecfe     CALL      0x5bfc,0x0     			encoder2Vel = Get_Encoder_2_Count() - prevEnc2;                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003f00   f02d                                                                                                               
003f02   0102     MOVLB     0x2                                                                                             
003f04   5193     MOVF      0x93,0x0,0x1                                                                                    
003f06   5c3f     SUBWF     0x3f,0x0,0x0                                                                                    
003f08   6e4f     MOVWF     0x4f,0x0                                                                                        
003f0a   5194     MOVF      0x94,0x0,0x1                                                                                    
003f0c   5840     SUBWFB    0x40,0x0,0x0                                                                                    
003f0e   6e50     MOVWF     0x50,0x0                                                                                        
003f10   5195     MOVF      0x95,0x0,0x1                                                                                    
003f12   5841     SUBWFB    0x41,0x0,0x0                                                                                    
003f14   6e51     MOVWF     0x51,0x0                                                                                        
003f16   5196     MOVF      0x96,0x0,0x1                                                                                    
003f18   5842     SUBWFB    0x42,0x0,0x0                                                                                    
003f1a   6e52     MOVWF     0x52,0x0                                                                                        
003f1c   c04f     MOVFF     0x4f,0x28d                                                                                      
003f1e   f28d                                                                                                               
003f20   c050     MOVFF     0x50,0x28e                                                                                      
003f22   f28e                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003f24   ecc2     CALL      0x5b84,0x0     			prevEnc1 = Get_Encoder_1_Count();                                             C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003f26   f02d                                                                                                               
003f28   c03f     MOVFF     0x3f,0x28f                                                                                      
003f2a   f28f                                                                                                               
003f2c   c040     MOVFF     0x40,0x290                                                                                      
003f2e   f290                                                                                                               
003f30   c041     MOVFF     0x41,0x291                                                                                      
003f32   f291                                                                                                               
003f34   c042     MOVFF     0x42,0x292                                                                                      
003f36   f292                                                                                                               
003f38   ecfe     CALL      0x5bfc,0x0     			prevEnc2 = Get_Encoder_2_Count();                                             C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003f3a   f02d                                                                                                               
003f3c   c03f     MOVFF     0x3f,0x293                                                                                      
003f3e   f293                                                                                                               
003f40   c040     MOVFF     0x40,0x294                                                                                      
003f42   f294                                                                                                               
003f44   c041     MOVFF     0x41,0x295                                                                                      
003f46   f295                                                                                                               
003f48   c042     MOVFF     0x42,0x296                                                                                      
003f4a   f296                                                                                                               
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           	}                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //  ***  IFI Code Starts Here***                                                 C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //                                                                               C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //  unsigned char int_byte;                                                      C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //  if (INTCON3bits.INT2IF && INTCON3bits.INT2IE)       /* The INT2 pin is RB2/DIG I/O 1. */ C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //  {                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //    INTCON3bits.INT2IF = 0;                                                    C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //  }                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //  else if (INTCON3bits.INT3IF && INTCON3bits.INT3IE)  /* The INT3 pin is RB3/DIG I/O 2. */ C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //  {                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //    INTCON3bits.INT3IF = 0;                                                    C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //  }                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //  else if (INTCONbits.RBIF && INTCONbits.RBIE)  /* DIG I/O 3-6 (RB4, RB5, RB6, or RB7) changed. */ C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //  {                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //    int_byte = PORTB;          /* You must read or write to PORTB */           C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //    INTCONbits.RBIF = 0;     /*     and clear the interrupt flag         */    C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //  }                                        /*     to clear the interrupt condition.  */ C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //  else                                                                         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //  {                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //    CheckUartInts();    /* For Dynamic Debug Tool or buffered printf features. */ C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           //  }                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003f4c   cfd9     MOVFF     0xfd9,0xfe1    }                                                                                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003f4e   ffe1                                                                                                               
003f50   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003f52   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003f54   ffd9                                                                                                               
003f56   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003f58   ee00     LFSR      0x0,0x23                                                                                        
003f5a   f023                                                                                                               
003f5c   0e24     MOVLW     0x24                                                                                            
003f5e   04e8     DECF      0xe8,0x0,0x0                                                                                    
003f60   e303     BNC       0x3f68                                                                                          
003f62   cfe5     MOVFF     0xfe5,0xfed                                                                                     
003f64   ffed                                                                                                               
003f66   d7fb     BRA       0x3f5e                                                                                          
003f68   cfe5     MOVFF     0xfe5,0xff4                                                                                     
003f6a   fff4                                                                                                               
003f6c   cfe5     MOVFF     0xfe5,0xff3                                                                                     
003f6e   fff3                                                                                                               
003f70   cfe5     MOVFF     0xfe5,0xfea                                                                                     
003f72   ffea                                                                                                               
003f74   cfe5     MOVFF     0xfe5,0xfe9                                                                                     
003f76   ffe9                                                                                                               
003f78   cfe5     MOVFF     0xfe5,0xfda                                                                                     
003f7a   ffda                                                                                                               
003f7c   50e5     MOVF      0xe5,0x0,0x0                                                                                    
003f7e   cfe5     MOVFF     0xfe5,0xfe0                                                                                     
003f80   ffe0                                                                                                               
003f82   cfe5     MOVFF     0xfe5,0xfd8                                                                                     
003f84   ffd8                                                                                                               
003f86   0010     RETFIE    0x0                                                                                             
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * FUNCTION NAME: User_Autonomous_Code                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * PURPOSE:       Execute user's code during autonomous robot operation.          C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * You should modify this routine by adding code which you wish to run in         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * autonomous mode.  It will be executed every program loop, and not              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * wait for or use any data from the Operator Interface.                          C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * CALLED FROM:   main.c file, main() routine when in Autonomous mode             C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * ARGUMENTS:     none                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * RETURNS:       void                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           void User_Autonomous_Code(void)                                                  C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                             static char state = 0;	                                                        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                             static unsigned long prevTmr = 0;                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003f88   0102     MOVLB     0x2              timerTicks = 0;                                                                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003f8a   6b87     CLRF      0x87,0x1                                                                                        
003f8c   6b88     CLRF      0x88,0x1                                                                                        
003f8e   6b89     CLRF      0x89,0x1                                                                                        
003f90   6b8a     CLRF      0x8a,0x1                                                                                        
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                             /* Initialize all PWMs and Relays when entering Autonomous mode, or else it    C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                will be stuck with the last values mapped from the joysticks.  Remember,    C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                even when Disabled it is reading inputs from the Operator Interface.        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                             */                                                                             C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003f92   0102     MOVLB     0x2              pwm01 = pwm02 = pwm03 = pwm04 = pwm05 = pwm06 = pwm07 = pwm08 = 127;           C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003f94   0e7f     MOVLW     0x7f                                                                                            
003f96   6f0b     MOVWF     0xb,0x1                                                                                         
003f98   c20b     MOVFF     0x20b,0x20a                                                                                     
003f9a   f20a                                                                                                               
003f9c   c20b     MOVFF     0x20b,0x209                                                                                     
003f9e   f209                                                                                                               
003fa0   c20b     MOVFF     0x20b,0x208                                                                                     
003fa2   f208                                                                                                               
003fa4   c20b     MOVFF     0x20b,0x207                                                                                     
003fa6   f207                                                                                                               
003fa8   c20b     MOVFF     0x20b,0x206                                                                                     
003faa   f206                                                                                                               
003fac   c20b     MOVFF     0x20b,0x205                                                                                     
003fae   f205                                                                                                               
003fb0   c20b     MOVFF     0x20b,0x204                                                                                     
003fb2   f204                                                                                                               
003fb4   6f13     MOVWF     0x13,0x1         pwm09 = pwm10 = pwm11 = pwm12 = pwm13 = pwm14 = pwm15 = pwm16 = 127;           C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003fb6   c213     MOVFF     0x213,0x212                                                                                     
003fb8   f212                                                                                                               
003fba   c213     MOVFF     0x213,0x211                                                                                     
003fbc   f211                                                                                                               
003fbe   c213     MOVFF     0x213,0x210                                                                                     
003fc0   f210                                                                                                               
003fc2   c213     MOVFF     0x213,0x20f                                                                                     
003fc4   f20f                                                                                                               
003fc6   c213     MOVFF     0x213,0x20e                                                                                     
003fc8   f20e                                                                                                               
003fca   c213     MOVFF     0x213,0x20d                                                                                     
003fcc   f20d                                                                                                               
003fce   c213     MOVFF     0x213,0x20c                                                                                     
003fd0   f20c                                                                                                               
003fd2   928c     BCF       0x8c,0x1,0x0     relay1_fwd = relay1_rev = relay2_fwd = relay2_rev = 0;                         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003fd4   928d     BCF       0x8d,0x1,0x0                                                                                    
003fd6   908c     BCF       0x8c,0x0,0x0                                                                                    
003fd8   908d     BCF       0x8d,0x0,0x0                                                                                    
003fda   968c     BCF       0x8c,0x3,0x0     relay3_fwd = relay3_rev = relay4_fwd = relay4_rev = 0;                         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003fdc   968d     BCF       0x8d,0x3,0x0                                                                                    
003fde   948c     BCF       0x8c,0x2,0x0                                                                                    
003fe0   948d     BCF       0x8d,0x2,0x0                                                                                    
003fe2   9a8c     BCF       0x8c,0x5,0x0     relay5_fwd = relay5_rev = relay6_fwd = relay6_rev = 0;                         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003fe4   9a8d     BCF       0x8d,0x5,0x0                                                                                    
003fe6   988c     BCF       0x8c,0x4,0x0                                                                                    
003fe8   988d     BCF       0x8d,0x4,0x0                                                                                    
003fea   9e8c     BCF       0x8c,0x7,0x0     relay7_fwd = relay7_rev = relay8_fwd = relay8_rev = 0;                         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003fec   9091     BCF       0x91,0x0,0x0                                                                                    
003fee   9c8c     BCF       0x8c,0x6,0x0                                                                                    
003ff0   9c8d     BCF       0x8d,0x6,0x0                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003ff2   0102     MOVLB     0x2              while (autonomous_mode)   /* DO NOT CHANGE! */                                 C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003ff4   ad21     BTFSS     0x21,0x6,0x1                                                                                    
003ff6   d0f5     BRA       0x41e2                                                                                          
0041e0   d708     BRA       0x3ff2                                                                                          
                                             {                                                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003ff8   0102     MOVLB     0x2                if (statusflag.NEW_SPI_DATA)      /* 26.2ms loop area */                     C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003ffa   a140     BTFSS     0x40,0x0,0x1                                                                                    
003ffc   d0f1     BRA       0x41e0                                                                                          
                                               {                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
003ffe   0e20     MOVLW     0x20           		Getdata(&rxdata);   /* DO NOT DELETE, or you will be stuck here forever! */    C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
004000   6ee6     MOVWF     0xe6,0x0                                                                                        
004002   0e02     MOVLW     0x2                                                                                             
004004   6ee6     MOVWF     0xe6,0x0                                                                                        
004006   ec0e     CALL      0x261c,0x0                                                                                      
004008   f013                                                                                                               
00400a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00400c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00400e   d8ea     RCALL     0x41e4         		Process_Data_From_Local_IO(); //Updates Gyro, ADC                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
004010   0102     MOVLB     0x2            		switch(state)                                                                  C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
004012   5197     MOVF      0x97,0x0,0x1                                                                                    
004014   0a02     XORLW     0x2                                                                                             
004016   e05e     BZ        0x40d4                                                                                          
004018   0a03     XORLW     0x3                                                                                             
00401a   e050     BZ        0x40bc                                                                                          
00401c   0a01     XORLW     0x1                                                                                             
00401e   e001     BZ        0x4022                                                                                          
004020   d061     BRA       0x40e4                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           			case 0:                                                                       C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
004022   0e28     MOVLW     0x28           				Left.Vsetpoint = Right.Vsetpoint = 40;                                       C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
004024   0101     MOVLB     0x1                                                                                             
004026   6fa8     MOVWF     0xa8,0x1                                                                                        
004028   6ba9     CLRF      0xa9,0x1                                                                                        
00402a   0101     MOVLB     0x1                                                                                             
00402c   6f86     MOVWF     0x86,0x1                                                                                        
00402e   6b87     CLRF      0x87,0x1                                                                                        
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
004030   ecc2     CALL      0x5b84,0x0     				if((Get_Encoder_1_Count()+ Get_Encoder_2_Count())/2 > 3000)                  C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
004032   f02d                                                                                                               
004034   c03f     MOVFF     0x3f,0x0                                                                                        
004036   f000                                                                                                               
004038   c040     MOVFF     0x40,0x1                                                                                        
00403a   f001                                                                                                               
00403c   c041     MOVFF     0x41,0x2                                                                                        
00403e   f002                                                                                                               
004040   c042     MOVFF     0x42,0x3                                                                                        
004042   f003                                                                                                               
004044   c000     MOVFF     0x0,0xfe6                                                                                       
004046   ffe6                                                                                                               
004048   c001     MOVFF     0x1,0xfe6                                                                                       
00404a   ffe6                                                                                                               
00404c   c002     MOVFF     0x2,0xfe6                                                                                       
00404e   ffe6                                                                                                               
004050   c003     MOVFF     0x3,0xfe6                                                                                       
004052   ffe6                                                                                                               
004054   ecfe     CALL      0x5bfc,0x0                                                                                      
004056   f02d                                                                                                               
004058   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00405a   cfe7     MOVFF     0xfe7,0x3                                                                                       
00405c   f003                                                                                                               
00405e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004060   cfe7     MOVFF     0xfe7,0x2                                                                                       
004062   f002                                                                                                               
004064   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004066   cfe7     MOVFF     0xfe7,0x1                                                                                       
004068   f001                                                                                                               
00406a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00406c   cfe7     MOVFF     0xfe7,0x0                                                                                       
00406e   f000                                                                                                               
004070   5000     MOVF      0x0,0x0,0x0                                                                                     
004072   243f     ADDWF     0x3f,0x0,0x0                                                                                    
004074   6e3f     MOVWF     0x3f,0x0                                                                                        
004076   5001     MOVF      0x1,0x0,0x0                                                                                     
004078   2040     ADDWFC    0x40,0x0,0x0                                                                                    
00407a   6e40     MOVWF     0x40,0x0                                                                                        
00407c   5002     MOVF      0x2,0x0,0x0                                                                                     
00407e   2041     ADDWFC    0x41,0x0,0x0                                                                                    
004080   6e41     MOVWF     0x41,0x0                                                                                        
004082   5003     MOVF      0x3,0x0,0x0                                                                                     
004084   2042     ADDWFC    0x42,0x0,0x0                                                                                    
004086   6e42     MOVWF     0x42,0x0                                                                                        
004088   0e02     MOVLW     0x2                                                                                             
00408a   6e44     MOVWF     0x44,0x0                                                                                        
00408c   6a45     CLRF      0x45,0x0                                                                                        
00408e   6a46     CLRF      0x46,0x0                                                                                        
004090   6a47     CLRF      0x47,0x0                                                                                        
004092   ecf2     CALL      0x43e4,0x0                                                                                      
004094   f021                                                                                                               
004096   0e00     MOVLW     0x0                                                                                             
004098   1842     XORWF     0x42,0x0,0x0                                                                                    
00409a   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
00409c   d002     BRA       0x40a2                                                                                          
00409e   3442     RLCF      0x42,0x0,0x0                                                                                    
0040a0   d009     BRA       0x40b4                                                                                          
0040a2   0eb8     MOVLW     0xb8                                                                                            
0040a4   80d8     BSF       0xd8,0x0,0x0                                                                                    
0040a6   543f     SUBFWB    0x3f,0x0,0x0                                                                                    
0040a8   0e0b     MOVLW     0xb                                                                                             
0040aa   5440     SUBFWB    0x40,0x0,0x0                                                                                    
0040ac   0e00     MOVLW     0x0                                                                                             
0040ae   5441     SUBFWB    0x41,0x0,0x0                                                                                    
0040b0   0e00     MOVLW     0x0                                                                                             
0040b2   5442     SUBFWB    0x42,0x0,0x0                                                                                    
0040b4   e202     BC        0x40ba                                                                                          
0040b6   0102     MOVLB     0x2            					state++;                                                                    C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0040b8   2b97     INCF      0x97,0x1,0x1                                                                                    
0040ba   d014     BRA       0x40e4         			break;                                                                        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           			case 1:                                                                       C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0040bc   ec83     CALL      0xf06,0x0      				if(turn())                                                                   C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0040be   f007                                                                                                               
0040c0   cff3     MOVFF     0xff3,0x0                                                                                       
0040c2   f000                                                                                                               
0040c4   cff4     MOVFF     0xff4,0x1                                                                                       
0040c6   f001                                                                                                               
0040c8   5000     MOVF      0x0,0x0,0x0                                                                                     
0040ca   1001     IORWF     0x1,0x0,0x0                                                                                     
0040cc   e002     BZ        0x40d2                                                                                          
0040ce   0102     MOVLB     0x2            					state++;                                                                    C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0040d0   2b97     INCF      0x97,0x1,0x1                                                                                    
0040d2   d008     BRA       0x40e4         			break;                                                                        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           			case 2:                                                                       C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0040d4   0e21     MOVLW     0x21           				Left.Vsetpoint = Right.Vsetpoint = 33;                                       C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0040d6   0101     MOVLB     0x1                                                                                             
0040d8   6fa8     MOVWF     0xa8,0x1                                                                                        
0040da   6ba9     CLRF      0xa9,0x1                                                                                        
0040dc   0101     MOVLB     0x1                                                                                             
0040de   6f86     MOVWF     0x86,0x1                                                                                        
0040e0   6b87     CLRF      0x87,0x1                                                                                        
0040e2   d000     BRA       0x40e4         			break;                                                                        C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           		}                                                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           					                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0040e4   0e98     MOVLW     0x98           		if(timerTicks - prevTmr > 1)			//52.4ms Timer aea                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0040e6   6ee9     MOVWF     0xe9,0x0                                                                                        
0040e8   0e02     MOVLW     0x2                                                                                             
0040ea   6eea     MOVWF     0xea,0x0                                                                                        
0040ec   50ee     MOVF      0xee,0x0,0x0                                                                                    
0040ee   0102     MOVLB     0x2                                                                                             
0040f0   5d87     SUBWF     0x87,0x0,0x1                                                                                    
0040f2   6e00     MOVWF     0x0,0x0                                                                                         
0040f4   50ee     MOVF      0xee,0x0,0x0                                                                                    
0040f6   5988     SUBWFB    0x88,0x0,0x1                                                                                    
0040f8   6e01     MOVWF     0x1,0x0                                                                                         
0040fa   50ee     MOVF      0xee,0x0,0x0                                                                                    
0040fc   5989     SUBWFB    0x89,0x0,0x1                                                                                    
0040fe   6e02     MOVWF     0x2,0x0                                                                                         
004100   50ee     MOVF      0xee,0x0,0x0                                                                                    
004102   598a     SUBWFB    0x8a,0x0,0x1                                                                                    
004104   6e03     MOVWF     0x3,0x0                                                                                         
004106   0e01     MOVLW     0x1                                                                                             
004108   80d8     BSF       0xd8,0x0,0x0                                                                                    
00410a   5400     SUBFWB    0x0,0x0,0x0                                                                                     
00410c   0e00     MOVLW     0x0                                                                                             
00410e   5401     SUBFWB    0x1,0x0,0x0                                                                                     
004110   0e00     MOVLW     0x0                                                                                             
004112   5402     SUBFWB    0x2,0x0,0x0                                                                                     
004114   0e00     MOVLW     0x0                                                                                             
004116   5403     SUBFWB    0x3,0x0,0x0                                                                                     
004118   e24d     BC        0x41b4                                                                                          
                                           		{                                                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
00411a   c287     MOVFF     0x287,0x298    			prevTmr = timerTicks;			                                                      C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
00411c   f298                                                                                                               
00411e   c288     MOVFF     0x288,0x299                                                                                     
004120   f299                                                                                                               
004122   c289     MOVFF     0x289,0x29a                                                                                     
004124   f29a                                                                                                               
004126   c28a     MOVFF     0x28a,0x29b                                                                                     
004128   f29b                                                                                                               
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           	#ifndef DRIVE_DEBUG                                                             C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
00412a   68e6     SETF      0xe6,0x0       			pwm15 = pwm16 = doVelPid(&Left,  Get_Encoder_1_Count(), L_MOTOR_DIR);         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
00412c   68e6     SETF      0xe6,0x0                                                                                        
00412e   ecc2     CALL      0x5b84,0x0                                                                                      
004130   f02d                                                                                                               
004132   c03f     MOVFF     0x3f,0x0                                                                                        
004134   f000                                                                                                               
004136   c040     MOVFF     0x40,0x1                                                                                        
004138   f001                                                                                                               
00413a   c041     MOVFF     0x41,0x2                                                                                        
00413c   f002                                                                                                               
00413e   c042     MOVFF     0x42,0x3                                                                                        
004140   f003                                                                                                               
004142   c000     MOVFF     0x0,0xfe6                                                                                       
004144   ffe6                                                                                                               
004146   c001     MOVFF     0x1,0xfe6                                                                                       
004148   ffe6                                                                                                               
00414a   c002     MOVFF     0x2,0xfe6                                                                                       
00414c   ffe6                                                                                                               
00414e   c003     MOVFF     0x3,0xfe6                                                                                       
004150   ffe6                                                                                                               
004152   0e80     MOVLW     0x80                                                                                            
004154   6ee6     MOVWF     0xe6,0x0                                                                                        
004156   0e01     MOVLW     0x1                                                                                             
004158   6ee6     MOVWF     0xe6,0x0                                                                                        
00415a   ec52     CALL      0x8a4,0x0                                                                                       
00415c   f004                                                                                                               
00415e   6ef5     MOVWF     0xf5,0x0                                                                                        
004160   0e08     MOVLW     0x8                                                                                             
004162   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
004164   50f5     MOVF      0xf5,0x0,0x0                                                                                    
004166   cff3     MOVFF     0xff3,0x213                                                                                     
004168   f213                                                                                                               
00416a   cff3     MOVFF     0xff3,0x212                                                                                     
00416c   f212                                                                                                               
                                           	#endif                                                                          C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
00416e   0e01     MOVLW     0x1            			pwm13 = pwm14 = doVelPid(&Right, Get_Encoder_2_Count(), R_MOTOR_DIR);         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
004170   6ee6     MOVWF     0xe6,0x0                                                                                        
004172   6ae6     CLRF      0xe6,0x0                                                                                        
004174   ecfe     CALL      0x5bfc,0x0                                                                                      
004176   f02d                                                                                                               
004178   c03f     MOVFF     0x3f,0x0                                                                                        
00417a   f000                                                                                                               
00417c   c040     MOVFF     0x40,0x1                                                                                        
00417e   f001                                                                                                               
004180   c041     MOVFF     0x41,0x2                                                                                        
004182   f002                                                                                                               
004184   c042     MOVFF     0x42,0x3                                                                                        
004186   f003                                                                                                               
004188   c000     MOVFF     0x0,0xfe6                                                                                       
00418a   ffe6                                                                                                               
00418c   c001     MOVFF     0x1,0xfe6                                                                                       
00418e   ffe6                                                                                                               
004190   c002     MOVFF     0x2,0xfe6                                                                                       
004192   ffe6                                                                                                               
004194   c003     MOVFF     0x3,0xfe6                                                                                       
004196   ffe6                                                                                                               
004198   0ea2     MOVLW     0xa2                                                                                            
00419a   6ee6     MOVWF     0xe6,0x0                                                                                        
00419c   0e01     MOVLW     0x1                                                                                             
00419e   6ee6     MOVWF     0xe6,0x0                                                                                        
0041a0   ec52     CALL      0x8a4,0x0                                                                                       
0041a2   f004                                                                                                               
0041a4   6ef5     MOVWF     0xf5,0x0                                                                                        
0041a6   0e08     MOVLW     0x8                                                                                             
0041a8   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0041aa   50f5     MOVF      0xf5,0x0,0x0                                                                                    
0041ac   cff3     MOVFF     0xff3,0x211                                                                                     
0041ae   f211                                                                                                               
0041b0   cff3     MOVFF     0xff3,0x210                                                                                     
0041b2   f210                                                                                                               
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           	     }                                                                          C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           		//Generate_Pwms(pwm13,pwm14,pwm15,pwm16);                                      C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0041b4   c213     MOVFF     0x213,0xfe6    		PWM(pwm13,pwm14,pwm15,pwm16);                                                  C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0041b6   ffe6                                                                                                               
0041b8   c212     MOVFF     0x212,0xfe6                                                                                     
0041ba   ffe6                                                                                                               
0041bc   c211     MOVFF     0x211,0xfe6                                                                                     
0041be   ffe6                                                                                                               
0041c0   c210     MOVFF     0x210,0xfe6                                                                                     
0041c2   ffe6                                                                                                               
0041c4   eced     CALL      0x59da,0x0                                                                                      
0041c6   f02c                                                                                                               
0041c8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0041ca   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0041cc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0041ce   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0041d0   0e00     MOVLW     0x0                    Putdata(&txdata);   /* DO NOT DELETE, or you will get no PWM outputs! */ C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0041d2   6ee6     MOVWF     0xe6,0x0                                                                                        
0041d4   0e02     MOVLW     0x2                                                                                             
0041d6   6ee6     MOVWF     0xe6,0x0                                                                                        
0041d8   ec27     CALL      0x264e,0x0                                                                                      
0041da   f013                                                                                                               
0041dc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0041de   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                               }                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                             }                                                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0041e2   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           /******************************************************************************* C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * FUNCTION NAME: Process_Data_From_Local_IO                                      C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * PURPOSE:       Execute user's realtime code.                                   C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * You should modify this routine by adding code which you wish to run fast.      C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * It will be executed every program loop, and not wait for fresh data            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * from the Operator Interface.                                                   C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * CALLED FROM:   main.c                                                          C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * ARGUMENTS:     none                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           * RETURNS:       void                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           *******************************************************************************/ C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           void Process_Data_From_Local_IO(void)                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           {                                                                                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                             /* Add code here that you want to be executed every program loop. */           C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                             // new ADC data available?                                                     C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0041e4   ec18     CALL      0x4830,0x0       if(Get_ADC_Result_Count())                                                     C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0041e6   f024                                                                                                               
0041e8   0900     IORLW     0x0                                                                                             
0041ea   e004     BZ        0x41f4                                                                                          
                                             {                                                                              C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0041ec   ecd7     CALL      0x4fae,0x0         Process_Gyro_Data();                                                         C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0041ee   f027                                                                                                               
                                           	                                                                                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0041f0   ec28     CALL      0x4850,0x0         Reset_ADC_Result_Count();                                                    C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0041f2   f024                                                                                                               
                                             }	                                                                             C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
0041f4   0012     RETURN    0x0            }                                                                                C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                                                                                                            C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           /******************************************************************************/ C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           /******************************************************************************/ C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           /******************************************************************************/ C:\code\2008\Mnemosyne - 2008\user_routines_fast.c
                                           ;	RCS Header $Id: aarg.asm,v 1.2 2004/10/01 19:13:22 GrosbaJ Exp $               C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           REMB3                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           AARGB7		RES 1                                                                    C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           REMB2                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           AARGB6		RES 1                                                                    C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           REMB1                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           AARGB5		RES 1                                                                    C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           REMB0                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           AARGB4		RES 1                                                                    C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           AARGB3		RES 1                                                                    C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           AARGB2		RES 1                                                                    C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           AARGB1		RES 1                                                                    C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           AARGB0		RES 1                                                                    C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           AEXP		RES 1       ; 8 bit biased exponent for argument A                         C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           	GLOBAL	AARGB0, AARGB1, AARGB2, AARGB3                                           C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                   GLOBAL  AARGB4, AARGB5, AARGB6, AARGB7                                   C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           	GLOBAL  AEXP                                                                    C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           	GLOBAL  REMB3, REMB2, REMB1, REMB0                                              C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                   LIST P=18F8722                                                           C:\MCC18\SRC\TRADIT~1\PROC\p18f8722.asm
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\PROC\p18f8722.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\PROC\p18f8722.asm
                                           ;	RCS Header $Id: barg.asm,v 1.2 2004/10/01 19:13:22 GrosbaJ Exp $               C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           BARGB3		RES 1                                                                    C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           BARGB2		RES 1                                                                    C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           BARGB1		RES 1                                                                    C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           BARGB0		RES 1       ; most significant byte of argument B                        C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           BEXP		RES 1       ; 8 bit biased exponent for argument B                         C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                   GLOBAL  BARGB3, BARGB2, BARGB1, BARGB0                                   C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                   GLOBAL  BEXP                                                             C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           /* $Id: adcbusy.c,v 1.1 2003/12/09 22:52:09 GrosbaJ Exp $ */                     C:\mcc18\src\TRADIT~1\pmc\ADC\adcbusy.c
                                           #include <p18cxxx.h>                                                             C:\mcc18\src\TRADIT~1\pmc\ADC\adcbusy.c
                                           #include <adc.h>                                                                 C:\mcc18\src\TRADIT~1\pmc\ADC\adcbusy.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcbusy.c
                                           /****************************************************************                C:\mcc18\src\TRADIT~1\pmc\ADC\adcbusy.c
                                           *    Function Name:  BusyADC                                    *                C:\mcc18\src\TRADIT~1\pmc\ADC\adcbusy.c
                                           *    Return Value:   char: 1 - A/D busy, 0 - Done converting    *                C:\mcc18\src\TRADIT~1\pmc\ADC\adcbusy.c
                                           *    Parameters:     void                                       *                C:\mcc18\src\TRADIT~1\pmc\ADC\adcbusy.c
                                           *    Description:    This routine checks the GO bit to see if   *                C:\mcc18\src\TRADIT~1\pmc\ADC\adcbusy.c
                                           *                    the A/D conversion is done.                *                C:\mcc18\src\TRADIT~1\pmc\ADC\adcbusy.c
                                           ****************************************************************/                C:\mcc18\src\TRADIT~1\pmc\ADC\adcbusy.c
                                           char BusyADC(void)                                                               C:\mcc18\src\TRADIT~1\pmc\ADC\adcbusy.c
                                           {                                                                                C:\mcc18\src\TRADIT~1\pmc\ADC\adcbusy.c
                                             /* If the GO bit is set then A/D is busy converting                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcbusy.c
                                              * Otherwise A/D is done converting                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcbusy.c
                                              */                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcbusy.c
00080e   50c2     MOVF      0xc2,0x0,0x0     return(ADCON0bits.GO);                                                         C:\mcc18\src\TRADIT~1\pmc\ADC\adcbusy.c
000810   0b02     ANDLW     0x2                                                                                             
000812   e001     BZ        0x816                                                                                           
000814   0e01     MOVLW     0x1                                                                                             
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcbusy.c
000816   0012     RETURN    0x0            }                                                                                C:\mcc18\src\TRADIT~1\pmc\ADC\adcbusy.c
                                           /* $Id: adcclose.c,v 1.1 2003/12/09 22:52:09 GrosbaJ Exp $ */                    C:\mcc18\src\TRADIT~1\pmc\ADC\adcclose.c
                                           #include <p18cxxx.h>                                                             C:\mcc18\src\TRADIT~1\pmc\ADC\adcclose.c
                                           #include <adc.h>                                                                 C:\mcc18\src\TRADIT~1\pmc\ADC\adcclose.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcclose.c
                                           /************************************************************************        C:\mcc18\src\TRADIT~1\pmc\ADC\adcclose.c
                                           *    Function Name:  CloseADC                                           *        C:\mcc18\src\TRADIT~1\pmc\ADC\adcclose.c
                                           *    Return Value:   void                                               *        C:\mcc18\src\TRADIT~1\pmc\ADC\adcclose.c
                                           *    Parameters:     void                                               *        C:\mcc18\src\TRADIT~1\pmc\ADC\adcclose.c
                                           *    Description:    This routine turns the A/D off and disables        *        C:\mcc18\src\TRADIT~1\pmc\ADC\adcclose.c
                                           *                    the A/D interrupt                                  *        C:\mcc18\src\TRADIT~1\pmc\ADC\adcclose.c
                                           ************************************************************************/        C:\mcc18\src\TRADIT~1\pmc\ADC\adcclose.c
                                           void CloseADC(void)                                                              C:\mcc18\src\TRADIT~1\pmc\ADC\adcclose.c
                                           {                                                                                C:\mcc18\src\TRADIT~1\pmc\ADC\adcclose.c
0061b4   90c2     BCF       0xc2,0x0,0x0     ADCON0bits.ADON = 0;                                                           C:\mcc18\src\TRADIT~1\pmc\ADC\adcclose.c
0061b6   9c9d     BCF       0x9d,0x6,0x0     PIE1bits.ADIE = 0;                                                             C:\mcc18\src\TRADIT~1\pmc\ADC\adcclose.c
0061b8   0012     RETURN    0x0            }                                                                                C:\mcc18\src\TRADIT~1\pmc\ADC\adcclose.c
                                           /* $Id: adcconv.c,v 1.1 2003/12/09 22:52:09 GrosbaJ Exp $ */                     C:\mcc18\src\TRADIT~1\pmc\ADC\adcconv.c
                                           #include <p18cxxx.h>                                                             C:\mcc18\src\TRADIT~1\pmc\ADC\adcconv.c
                                           #include <adc.h>                                                                 C:\mcc18\src\TRADIT~1\pmc\ADC\adcconv.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcconv.c
                                           /********************************************************************            C:\mcc18\src\TRADIT~1\pmc\ADC\adcconv.c
                                           *    Function Name:  ConvertADC                                     *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcconv.c
                                           *    Return Value:   void                                           *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcconv.c
                                           *    Parameters:     void                                           *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcconv.c
                                           *    Description:    This routine starts an A/D conversion by       *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcconv.c
                                           *                    setting the GO bit.                            *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcconv.c
                                           ********************************************************************/            C:\mcc18\src\TRADIT~1\pmc\ADC\adcconv.c
                                           void ConvertADC(void)                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcconv.c
                                           {                                                                                C:\mcc18\src\TRADIT~1\pmc\ADC\adcconv.c
0061ba   82c2     BSF       0xc2,0x1,0x0     ADCON0bits.GO = 1;  // Set the GO bit to start a conversion                    C:\mcc18\src\TRADIT~1\pmc\ADC\adcconv.c
0061bc   0012     RETURN    0x0            }                                                                                C:\mcc18\src\TRADIT~1\pmc\ADC\adcconv.c
                                           #include "p18cxxx.inc"                                                           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                   LIST                                                                     C:\MCC18\MPASM\p18cxxx.inc
                                           ; P18CXXX.INC  Standard Header File, Version 1.00   Microchip Technology, Inc.   C:\MCC18\MPASM\p18cxxx.inc
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18C242.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F242.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F248.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18C252.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F252.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F258.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18C442.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F442.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F448.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18C452.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F452.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F458.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18C601.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18C658.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18C801.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18C858.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F1220.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F1320.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2220.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2320.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4220.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4320.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6720.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8720.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2439.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2539.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4439.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4539.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6621.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8621.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2331.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2431.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4331.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4431.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2515.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2610.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4515.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4610.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6490.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8490.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2681                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2681.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4681                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4681.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2510.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4510.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2455.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2550.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4455.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4550.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2420.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4420.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2480.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2580.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4480.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4580.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6310.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6390.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8310.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8390.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6627.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6722.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8627.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8722.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F64J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F64J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F65J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F65J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F66J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F66J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F67J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F84J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F84J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F85J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F85J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F86J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F86J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F87J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;/********************************************************************           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Function Name: Delay10TCYx                                      *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Return Value:  void                                             *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Parameters:    unit:                                            *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Description:   This routine delays for multiples of 10          *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  instruction cycles that is specified in unit.    *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Special Note:  This routine provides multiples of 10 Tcy.       *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  A value of 1 to 255 provides 10 to 2550   Tcy    *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  delay.  A value of 0 will provide a delay of     *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  2560 Tcy.                                        *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;********************************************************************/           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           D10TCYXCODE CODE                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           Delay10TCYx                                                                      C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
00618c   0eff     MOVLW     0xff               movlw   0xff                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
00618e   50e3     MOVF      0xe3,0x0,0x0       movf    PLUSW1,0                                                             C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
006190   4ee8     DCFSNZ    0xe8,0x1,0x0       dcfsnz  WREG,1                                                               C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
006192   0012     RETURN    0x0                return                                                                       C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           D10x                                                                             C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
006194   0000     NOP                          nop                                                                          C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
006196   d000     BRA       0x6198             bra     $+2                                                                  C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
006198   d000     BRA       0x619a             bra     $+2                                                                  C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
00619a   d000     BRA       0x619c             bra     $+2                                                                  C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           D10_1                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
00619c   2ee8     DECFSZ    0xe8,0x1,0x0       decfsz  WREG,1                                                               C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
00619e   d7fa     BRA       0x6194             bra     D10x                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
0061a0   0012     RETURN    0x0                return                                                                       C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                               GLOBAL  Delay10TCYx                                                          C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                               END                                                                          C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           #include "p18cxxx.inc"                                                           C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                                   LIST                                                                     C:\MCC18\MPASM\p18cxxx.inc
                                           ; P18CXXX.INC  Standard Header File, Version 1.00   Microchip Technology, Inc.   C:\MCC18\MPASM\p18cxxx.inc
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18C242.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F242.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F248.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18C252.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F252.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F258.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18C442.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F442.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F448.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18C452.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F452.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F458.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18C601.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18C658.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18C801.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18C858.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F1220.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F1320.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2220.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2320.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4220.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4320.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6720.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8720.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2439.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2539.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4439.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4539.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6621.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8621.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2331.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2431.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4331.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4431.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2515.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2610.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4515.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4610.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6490.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8490.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2681                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2681.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4681                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4681.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2510.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4510.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2455.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2550.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4455.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4550.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2420.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4420.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2480.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F2580.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4480.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F4580.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6310.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6390.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8310.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8390.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6627.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F6722.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8627.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F8722.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F64J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F64J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F65J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F65J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F66J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F66J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F67J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F84J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F84J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F85J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F85J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F86J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F86J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <P18F87J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                           ;/********************************************************************           C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                           ;*   Function Name: Delay1KTCYx                                      *           C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                           ;*   Return Value:  void                                             *           C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                           ;*   Parameters:    unit:                                            *           C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                           ;*   Description:   This routine delays for multiples of 1000        *           C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                           ;*                  instruction cycles that is specified in unit.    *           C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                           ;*   Special Note:  This routine provides multiples of 1000 Tcy      *           C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                           ;*                  A value of 1 to 255 to provides 1000 to          *           C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                           ;*                  255000 Tcy delay.  A value of 0 will provide     *           C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                           ;*                  a delay of 256000 Tcy.                           *           C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                           ;********************************************************************/           C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                               EXTERN  DelayCounter1                                                        C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                           D1KTCYXCODE CODE                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                           Delay1KTCYx                                                                      C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
006150   0eff     MOVLW     0xff               movlw   0xff                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
006152   50e3     MOVF      0xe3,0x0,0x0       movf    PLUSW1,0                                                             C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
006154   6e53     MOVWF     0x53,0x0           movwf   DelayCounter1                                                        C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
006156   0e48     MOVLW     0x48               movlw   0x48                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
006158   d001     BRA       0x615c             bra     D1K_1                                                                C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                           D1Kx                                                                             C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
00615a   0e4c     MOVLW     0x4c               movlw   0x4c                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                           D1K_1                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
00615c   6ee7     MOVWF     0xe7,0x0           movwf   INDF1                                                                C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
00615e   2ee7     DECFSZ    0xe7,0x1,0x0       decfsz  INDF1,1                                                              C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
006160   d7fe     BRA       0x615e             bra     $-2                                                                  C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
006162   6ae7     CLRF      0xe7,0x0           clrf    INDF1                                                                C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
006164   2ee7     DECFSZ    0xe7,0x1,0x0       decfsz  INDF1,1                                                              C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
006166   d7fe     BRA       0x6164             bra     $-2                                                                  C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
006168   2e53     DECFSZ    0x53,0x1,0x0       decfsz  DelayCounter1,1                                                      C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
00616a   d7f7     BRA       0x615a             bra     D1Kx                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
00616c   0000     NOP                          nop                                                                          C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
00616e   0012     RETURN    0x0                return                                                                       C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                               GLOBAL  Delay1KTCYx                                                          C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                               END                                                                          C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d1ktcyx.asm
                                           DELAYDAT1      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\DELAYS\delayd1.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\delayd1.asm
                                           DelayCounter1  RES 1                                                             C:\MCC18\SRC\TRADIT~1\DELAYS\delayd1.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\delayd1.asm
                                                          GLOBAL DelayCounter1                                              C:\MCC18\SRC\TRADIT~1\DELAYS\delayd1.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\DELAYS\delayd1.asm
                                           	       END                                                                      C:\MCC18\SRC\TRADIT~1\DELAYS\delayd1.asm
                                           #include <P18CXXX.INC>           ; general Golden Gate definitions               C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Version 1.00   Microchip Technology, Inc.   C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F64J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F84J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                           #include "fpmacros.inc"                                                          C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ;******************************************************************************  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ; Macros, constants, defines and variable externs used by float routines.        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;******************************************************************************  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;        radix dec                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;; Uses traditional global names                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN FPFLAGS                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB7                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB6                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB5                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB4                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fFlg  FPFLAGS                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA3    AARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA2    AARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA1    AARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA0    AARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fAexp  AEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB3    BARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB2    BARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB1    BARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB0    BARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fBexp  BEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fT1     TEMPB3                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fT0     TEMPB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW3     TEMPB1                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW2     TEMPB0                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW1     AARGB7                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW0     AARGB6                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fWexp   AARGB5                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fWexpHi AARGB4                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA0 AARGB0   ;msb                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA1 AARGB1                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA2 AARGB2                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA3 AARGB3   ;lsb                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_BIAS        equ      127    ; exponent bias                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_SMIN        equ     -149    ; min unbiased subnormal exponent                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_EMIN        equ     -126    ; min unbiased normal exponent                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_EMAX        equ      127    ; max unbiased normal exponent                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;; Flags for both A and B arguments                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_ZERO_A    0  ; A: is zero                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_INF_A     1  ; A: is infinity                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_SIGN_A    2  ; A: is negative                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_NaN_AorB  3  ; A or B is a NaN  (A or B)                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_ZERO_B    4  ; B: is zero                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_INF_B     5  ; B: is infinity                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_SIGN_B    6  ; B: is negative                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_SIGN_ABW  7  ; ABW: Sign (A xor B) or W                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Exchange macro Var0, Var1                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var0,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movff   Var1,Var0                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movwf   Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Clear4 macro Var0, Var1, Var2, Var3                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    Var2                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    Var3                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var << 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftL3C macro Var0,Var1,Var2                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var << 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftL4C macro Var0,Var1,Var2,Var3                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var << 1;      Logical shift                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftL4 macro Var0,Var1,Var2,Var3                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bcf     STATUS,C                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var >> 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftR2C macro Var0,Var1                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var >> 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftR3C macro Var0,Var1,Var2                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var >> 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftR4C macro Var0,Var1,Var2,Var3                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var++, C invalid                                                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Inc2 macro Var0,Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   infsnz  Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   incf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var++, C valid                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Inc3 macro Var0,Var1,Var2                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   incf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var++, C valid                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Inc4 macro Var0,Var1,Var2,Var3                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   incf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Decrement 2 bytes. WREG unchanged.                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Dec2 macro Var0, Var1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   decf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss   STATUS,C                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   decf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg2 macro Var0,Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg3 macro Var0,Var1,Var2                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg4 macro Var0,Var1,Var2,Var3                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg5 macro Var0,Var1,Var2,Var3,Var4                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var4,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var4,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add32 macro AVar0,AVar1,AVar2, BVar0,BVar1                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add41 macro AVar0,AVar1,AVar2,AVar3, BVar0                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add42 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add43 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add4 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2,BVar3                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar3,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub2 macro AVar0,AVar1, BVar0,BVar1                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub3 macro AVar0,AVar1,AVar2, BVar0,BVar1,BVar2                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub4 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2,BVar3                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar3,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub43 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; (PRODL,PRODH) = AVar*Bvar                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Mul2 macro AVar,BVar                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   mulwf   AVar                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;=============== R E L  B R A N C H E S ===================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if bit set                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braSet macro Var, Bit, jLabel                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfsc   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if bit clear                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braClr macro Var, Bit, jLabel                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0041fc   ae42     BTFSS     0x42,0x7,0x0           btfss   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0041fe   d002     BRA       0x4204                 bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var == 0.  WREG unchanged.                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFeqZ macro Var,jZero                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var,F                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bz      jZero                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var != 0.  WREG unchanged.                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFneZ macro Var,jNotZero                                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var,F                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bnz     jNotZero                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var == Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFeqL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var,W                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bz      jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var != Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFneL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var,W                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bnz     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var <= Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFleL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfsgt  Var                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var >= Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFgeL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfslt  Var                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var1 == Var2                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFeqF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var1,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bz      jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var1 != Var2                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFneF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var1,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bnz     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFgeF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfslt  Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFleF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfsgt  Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFltF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var1,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss   STATUS,Z                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bc      jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;=============== A B S O L U T E    B R A N C H E S =======================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Go to if bit set                                                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoSet macro Var, Bit, jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfsc   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto     jLabel                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Go to if bit clear                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoClr macro Var, Bit, jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto     jLabel                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Go to if F == Lit                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFeqL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw     Lit                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf     Var,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfsc     _Z                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto      jLabel                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;Go to if F != Lit                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFneL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw     Lit                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf     Var,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss     _Z                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto      jLabel                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;Go to if F >= Lit                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFgeL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     movlw     Lit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     cpfslt    Var                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     goto      jLabel                                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;Go to if F <= Lit                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFleL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     movlw     Lit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     cpfsgt    Var                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     goto      jLabel                                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ; FLO0832U:                                                                      C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ; FLO0832S:                                                                      C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ; Description:                                                                   C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ;         One byte integer to Float conversion                                   C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ; Input:                                                                         C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ;         FLO0832U: One byte unsigned integer in iA0                             C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ;         FLO0832S: One byte signed integer in iA0                               C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ; Output:                                                                        C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ;         IEEE 754 format float fA                                               C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ;---------------------------------------------------------------------------------------------- C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                     GLOBAL FLO0832U                                                        C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                     GLOBAL FLO0832S                                                        C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                     EXTERN __FpPack                                                        C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           PROG    CODE                                                                     C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           FLO0832U:                                                                        C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
0041f6   9e4a     BCF       0x4a,0x7,0x0             bcf       fFlg,FLG_SIGN_ABW   ;; Flag as unsigned                      C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
0041f8   d005     BRA       0x4204                   bra       jI2F08Beg                                                    C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           FLO0832S:                                                                        C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
0041fa   9e4a     BCF       0x4a,0x7,0x0             bcf       fFlg,FLG_SIGN_ABW                                            C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                     braClr    iA0,7,jI2F08Beg                                              C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                     ;; Negate                                                              C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
004200   6c42     NEGF      0x42,0x0                 negf      iA0                                                          C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
004202   8e4a     BSF       0x4a,0x7,0x0             bsf       fFlg,FLG_SIGN_ABW                                            C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           jI2F08Beg:                                                                       C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                     ;; Copy integer to fW                                                  C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
004204   c042     MOVFF     0x42,0x3c                movff     iA0,fW0                                                      C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
004206   f03c                                                                                                               
004208   6a3b     CLRF      0x3b,0x0                 clrf      fW1                                                          C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
00420a   6a4e     CLRF      0x4e,0x0                 clrf      fW2                                                          C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
00420c   6a4d     CLRF      0x4d,0x0                 clrf      fW3                                                          C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
00420e   0e86     MOVLW     0x86                     movlw     0x86                                                         C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
004210   6e3d     MOVWF     0x3d,0x0                 movwf     fWexp                                                        C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
004212   6a3e     CLRF      0x3e,0x0                 clrf      fWexpHi                                                      C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           ;; Sign is Flg.FLG_SIGN_ABW                                                      C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
004214   ef96     GOTO      0x452c                   goto      __FpPack                                                     C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
004216   f022                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                                     END                                                                    C:\MCC18\SRC\TRADIT~1\MATH\cast08FP.asm
                                           #include <P18CXXX.INC>           ; general Golden Gate definitions               C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Version 1.00   Microchip Technology, Inc.   C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F64J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F84J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                           #include "fpmacros.inc"                                                          C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;******************************************************************************  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ; Macros, constants, defines and variable externs used by float routines.        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;******************************************************************************  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;        radix dec                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;; Uses traditional global names                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN FPFLAGS                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB7                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB6                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB5                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB4                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fFlg  FPFLAGS                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA3    AARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA2    AARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA1    AARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA0    AARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fAexp  AEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB3    BARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB2    BARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB1    BARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB0    BARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fBexp  BEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fT1     TEMPB3                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fT0     TEMPB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW3     TEMPB1                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW2     TEMPB0                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW1     AARGB7                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW0     AARGB6                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fWexp   AARGB5                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fWexpHi AARGB4                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA0 AARGB0   ;msb                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA1 AARGB1                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA2 AARGB2                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA3 AARGB3   ;lsb                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_BIAS        equ      127    ; exponent bias                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_SMIN        equ     -149    ; min unbiased subnormal exponent                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_EMIN        equ     -126    ; min unbiased normal exponent                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_EMAX        equ      127    ; max unbiased normal exponent                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;; Flags for both A and B arguments                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_ZERO_A    0  ; A: is zero                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_INF_A     1  ; A: is infinity                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_SIGN_A    2  ; A: is negative                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_NaN_AorB  3  ; A or B is a NaN  (A or B)                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_ZERO_B    4  ; B: is zero                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_INF_B     5  ; B: is infinity                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_SIGN_B    6  ; B: is negative                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_SIGN_ABW  7  ; ABW: Sign (A xor B) or W                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Exchange macro Var0, Var1                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var0,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movff   Var1,Var0                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movwf   Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Clear4 macro Var0, Var1, Var2, Var3                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00426a   6a4d     CLRF      0x4d,0x0               clrf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00426c   6a4e     CLRF      0x4e,0x0               clrf    Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00426e   6a3b     CLRF      0x3b,0x0               clrf    Var2                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004270   6a3c     CLRF      0x3c,0x0               clrf    Var3                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var << 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftL3C macro Var0,Var1,Var2                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var << 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftL4C macro Var0,Var1,Var2,Var3                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var << 1;      Logical shift                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftL4 macro Var0,Var1,Var2,Var3                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004298   90d8     BCF       0xd8,0x0,0x0           bcf     STATUS,C                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0042a2   90d8     BCF       0xd8,0x0,0x0                                                                                    
00429a   3640     RLCF      0x40,0x1,0x0           rlcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0042a4   364d     RLCF      0x4d,0x1,0x0                                                                                    
00429c   3641     RLCF      0x41,0x1,0x0           rlcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0042a6   364e     RLCF      0x4e,0x1,0x0                                                                                    
00429e   3642     RLCF      0x42,0x1,0x0           rlcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0042a8   363b     RLCF      0x3b,0x1,0x0                                                                                    
0042a0   3643     RLCF      0x43,0x1,0x0           rlcf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0042aa   363c     RLCF      0x3c,0x1,0x0                                                                                    
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var >> 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftR2C macro Var0,Var1                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var >> 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftR3C macro Var0,Var1,Var2                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var >> 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftR4C macro Var0,Var1,Var2,Var3                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var++, C invalid                                                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Inc2 macro Var0,Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   infsnz  Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   incf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var++, C valid                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Inc3 macro Var0,Var1,Var2                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   incf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var++, C valid                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Inc4 macro Var0,Var1,Var2,Var3                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   incf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Decrement 2 bytes. WREG unchanged.                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Dec2 macro Var0, Var1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   decf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss   STATUS,C                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   decf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg2 macro Var0,Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg3 macro Var0,Var1,Var2                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg4 macro Var0,Var1,Var2,Var3                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg5 macro Var0,Var1,Var2,Var3,Var4                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var4,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var4,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add32 macro AVar0,AVar1,AVar2, BVar0,BVar1                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add41 macro AVar0,AVar1,AVar2,AVar3, BVar0                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add42 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add43 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004284   5045     MOVF      0x45,0x0,0x0           movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004286   2640     ADDWF     0x40,0x1,0x0           addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004288   5046     MOVF      0x46,0x0,0x0           movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00428a   2241     ADDWFC    0x41,0x1,0x0           addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00428c   5047     MOVF      0x47,0x0,0x0           movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00428e   2242     ADDWFC    0x42,0x1,0x0           addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004290   0e00     MOVLW     0x0                    movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004292   2243     ADDWFC    0x43,0x1,0x0           addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add4 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2,BVar3                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar3,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub2 macro AVar0,AVar1, BVar0,BVar1                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub3 macro AVar0,AVar1,AVar2, BVar0,BVar1,BVar2                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub4 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2,BVar3                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar3,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub43 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004272   5045     MOVF      0x45,0x0,0x0           movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004274   5e40     SUBWF     0x40,0x1,0x0           subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004276   5046     MOVF      0x46,0x0,0x0           movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004278   5a41     SUBWFB    0x41,0x1,0x0           subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00427a   5047     MOVF      0x47,0x0,0x0           movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00427c   5a42     SUBWFB    0x42,0x1,0x0           subwfb  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00427e   0e00     MOVLW     0x0                    movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004280   5a43     SUBWFB    0x43,0x1,0x0           subwfb  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; (PRODL,PRODH) = AVar*Bvar                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Mul2 macro AVar,BVar                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   mulwf   AVar                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;=============== R E L  B R A N C H E S ===================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if bit set                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braSet macro Var, Bit, jLabel                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfsc   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if bit clear                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braClr macro Var, Bit, jLabel                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004228   a24a     BTFSS     0x4a,0x1,0x0           btfss   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00423c   a04a     BTFSS     0x4a,0x0,0x0                                                                                    
00422a   d005     BRA       0x4236                 bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00423e   d005     BRA       0x424a                                                                                          
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var == 0.  WREG unchanged.                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFeqZ macro Var,jZero                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var,F                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bz      jZero                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var != 0.  WREG unchanged.                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFneZ macro Var,jNotZero                                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var,F                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bnz     jNotZero                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var == Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFeqL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var,W                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bz      jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var != Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFneL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var,W                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bnz     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var <= Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFleL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfsgt  Var                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var >= Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFgeL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfslt  Var                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var1 == Var2                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFeqF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var1,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bz      jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var1 != Var2                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFneF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var1,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bnz     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFgeF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfslt  Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFleF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfsgt  Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFltF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var1,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss   STATUS,Z                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bc      jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;=============== A B S O L U T E    B R A N C H E S =======================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Go to if bit set                                                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoSet macro Var, Bit, jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004222   b64a     BTFSC     0x4a,0x3,0x0           btfsc   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00422c   ba4a     BTFSC     0x4a,0x5,0x0                                                                                    
004236   ba4a     BTFSC     0x4a,0x5,0x0                                                                                    
004240   b84a     BTFSC     0x4a,0x4,0x0                                                                                    
00424a   b84a     BTFSC     0x4a,0x4,0x0                                                                                    
004224   ef7a     GOTO      0x44f4                 goto     jLabel                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004226   f022                                                                                                               
00422e   ef7a     GOTO      0x44f4                                                                                          
004230   f022                                                                                                               
004238   ef8d     GOTO      0x451a                                                                                          
00423a   f022                                                                                                               
004242   ef7a     GOTO      0x44f4                                                                                          
004244   f022                                                                                                               
00424c   ef81     GOTO      0x4502                                                                                          
00424e   f022                                                                                                               
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Go to if bit clear                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoClr macro Var, Bit, jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto     jLabel                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Go to if F == Lit                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFeqL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw     Lit                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf     Var,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfsc     _Z                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto      jLabel                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;Go to if F != Lit                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFneL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw     Lit                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf     Var,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss     _Z                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto      jLabel                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;Go to if F >= Lit                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFgeL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     movlw     Lit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     cpfslt    Var                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     goto      jLabel                                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;Go to if F <= Lit                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFleL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     movlw     Lit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     cpfsgt    Var                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     goto      jLabel                                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ; FPD32                                                                          C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ; Description:                                                                   C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;         Division  fA/fB for floats fA and fB                                   C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ; Input:                                                                         C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;         IEEE 754 format floats fAexp...fA2, fBexp...fB2.                       C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ; Output:                                                                        C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;         IEEE 754 format float fA = fA/fB                                       C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;---------------------------------------------------------------------------------------------- C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     GLOBAL FPD32                                                           C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     EXTERN __FpUnPackA, __FpUnPackB, __FpPack                              C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     EXTERN __FpReturnNaN                                                   C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     EXTERN __FpReturnPosZero,__FpReturnNegZero,__FpReturnSignZero          C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     EXTERN __FpReturnPosInf, __FpReturnNegInf, __FpReturnSignInf           C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           PROG    CODE                                                                     C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           FPD32                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;------ Unpack the operands                                                      C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
004218   6a4a     CLRF      0x4a,0x0                 clrf      fFlg                                                         C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
00421a   ecd2     CALL      0x45a4,0x0               call      __FpUnPackA                                                  C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
00421c   f022                                                                                                               
00421e   ecea     CALL      0x45d4,0x0               call      __FpUnPackB                                                  C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
004220   f022                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     gotoSet   fFlg,FLG_NaN_AorB,__FpReturnNaN                              C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     braClr    fFlg,FLG_INF_A,jANotInf                                      C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;------ A is Infinity                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     ;; Is b also infinite?                                                 C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     gotoSet   fFlg,FLG_INF_B,__FpReturnNaN                                 C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     ;; B finite, A infinite => return infinite with FLG_SIGN_ABW sign      C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
004232   ef81     GOTO      0x4502                   goto      __FpReturnSignInf                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
004234   f022                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           jANotInf                                                                         C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     ;; B infinite, A finite => return Zero                                 C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     gotoSet   fFlg,FLG_INF_B,__FpReturnSignZero                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;------ Both operands are finite: check for zeros                                C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     braClr    fFlg,FLG_ZERO_A,jANotZero                                    C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           jSignedZero:                                                                     C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     ;; A == 0                                                              C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     gotoSet   fFlg,FLG_ZERO_B,__FpReturnNaN     ; B == 0 => 0/0            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
004246   ef8d     GOTO      0x451a                   goto      __FpReturnSignZero                                           C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
004248   f022                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           jANotZero                                                                        C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     gotoSet   fFlg,FLG_ZERO_B,__FpReturnSignInf ; B == 0 => Finite/0       C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;-----------------------------------------------------------------------;        C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;       Both operands are finite and non-zero                                    C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;-----------------------------------------------------------------------;        C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     ;; Calculate resulting exponent (two byte resultant)                   C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     ;; ExpW = (ExpA+127) - (ExpB+127) + 127                                C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
004250   6a3e     CLRF      0x3e,0x0                 clrf      fWexpHi                                                      C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
004252   0e7f     MOVLW     0x7f                     movlw     FLT_BIAS                                                     C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
004254   2443     ADDWF     0x43,0x0,0x0             addwf     fAexp,W                                                      C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
004256   6e3d     MOVWF     0x3d,0x0                 movwf     fWexp                                                        C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
004258   6ae8     CLRF      0xe8,0x0                 clrf      WREG                                                         C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
00425a   223e     ADDWFC    0x3e,0x1,0x0             addwfc    fWexpHi,F                                                    C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
00425c   5048     MOVF      0x48,0x0,0x0             movf      fBexp,W                                                      C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
00425e   5e3d     SUBWF     0x3d,0x1,0x0             subwf     fWexp,F                                                      C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
004260   6ae8     CLRF      0xe8,0x0                 clrf      WREG                                                         C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
004262   5a3e     SUBWFB    0x3e,0x1,0x0             subwfb    fWexpHi,F                                                    C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;------ Form the quotient and remainder                                          C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
004264   0e1a     MOVLW     0x1a                     movlw     26                  ; quotient width                         C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
004266   6e4b     MOVWF     0x4b,0x0                 movwf     fT1                 ; loop counter                           C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
004268   6a43     CLRF      0x43,0x0                 clrf      fAexp                                                        C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     ;; Init quotient                                                       C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     Clear4    fW3, fW2, fW1, fW0                                           C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           jLoop:                                                                           C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     ;; fAsig -= fBsig                                                      C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     Sub43     fA2,fA1,fA0,fAexp, fB2,fB1,fB0                               C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
004282   e709     BNN       0x4296                   bnn       jNoAdjust           ; fAsig >= 0                             C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     ;; fAsig += fBsig                                                      C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     Add43     fA2,fA1,fA0,fAexp, fB2,fB1,fB0                               C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
004294   d001     BRA       0x4298                   bra       jNext            ; Next quotient bit is zero ...             C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           jNoAdjust:                                                                       C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     ;; Insert quotient bit. Location picked so quotient will be            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     ;; left-justified in fW0                                               C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
004296   8a4d     BSF       0x4d,0x5,0x0             bsf       fW3,5                                                        C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           jNext:                                                                           C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     ShiftL4   fA2,fA1,fA0,fAexp                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     ShiftL4   fW3,fW2,fW1,fW0                                              C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
0042ac   2e4b     DECFSZ    0x4b,0x1,0x0             decfsz    fT1,F                                                        C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
0042ae   d7e1     BRA       0x4272                   bra       jLoop                                                        C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;;------- Sticky bits                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;;                                                                               C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;; Quotient consists of 26 bits left-justified in fW0->fW3                       C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;; Add sticky bit in position bit 5 of fW3 which is just to right of the         C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;; Round bit.                                                                    C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
0042b0   5042     MOVF      0x42,0x0,0x0             movf      fA0,W                                                        C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
0042b2   1041     IORWF     0x41,0x0,0x0             iorwf     fA1,W                                                        C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
0042b4   1040     IORWF     0x40,0x0,0x0             iorwf     fA2,W                                                        C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
0042b6   a4d8     BTFSS     0xd8,0x2,0x0             btfss     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
0042b8   8a4d     BSF       0x4d,0x5,0x0             bsf       fW3,5                                                        C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;; Sign is Flg.FLG_SIGN_ABW                                                      C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
0042ba   ef96     GOTO      0x452c                   goto      __FpPack                                                     C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
0042bc   f022                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                                     END                                                                    C:\MCC18\SRC\TRADIT~1\MATH\divFP.asm
                                           ;	RCS Header $Id: cmath18.asm,v 1.4 2004/10/01 19:13:22 GrosbaJ Exp $            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           SIGN		RES 1       ; save location for sign in MSB                                C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           FPFLAGSbits                                                                      C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           FPFLAGS		RES 1       ; floating point library exception flags                    C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                   GLOBAL  SIGN, FPFLAGS, FPFLAGSbits                                       C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           #include <P18CXXX.INC>           ; general Golden Gate definitions               C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Version 1.00   Microchip Technology, Inc.   C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F64J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F84J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                           #include "fpmacros.inc"                                                          C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;******************************************************************************  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ; Macros, constants, defines and variable externs used by float routines.        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;******************************************************************************  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;        radix dec                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;; Uses traditional global names                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN FPFLAGS                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB7                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB6                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB5                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB4                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fFlg  FPFLAGS                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA3    AARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA2    AARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA1    AARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA0    AARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fAexp  AEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB3    BARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB2    BARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB1    BARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB0    BARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fBexp  BEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fT1     TEMPB3                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fT0     TEMPB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW3     TEMPB1                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW2     TEMPB0                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW1     AARGB7                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW0     AARGB6                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fWexp   AARGB5                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fWexpHi AARGB4                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA0 AARGB0   ;msb                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA1 AARGB1                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA2 AARGB2                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA3 AARGB3   ;lsb                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_BIAS        equ      127    ; exponent bias                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_SMIN        equ     -149    ; min unbiased subnormal exponent                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_EMIN        equ     -126    ; min unbiased normal exponent                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_EMAX        equ      127    ; max unbiased normal exponent                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;; Flags for both A and B arguments                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_ZERO_A    0  ; A: is zero                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_INF_A     1  ; A: is infinity                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_SIGN_A    2  ; A: is negative                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_NaN_AorB  3  ; A or B is a NaN  (A or B)                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_ZERO_B    4  ; B: is zero                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_INF_B     5  ; B: is infinity                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_SIGN_B    6  ; B: is negative                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_SIGN_ABW  7  ; ABW: Sign (A xor B) or W                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Exchange macro Var0, Var1                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var0,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movff   Var1,Var0                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movwf   Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Clear4 macro Var0, Var1, Var2, Var3                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00430a   6a4d     CLRF      0x4d,0x0               clrf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00430c   6a4e     CLRF      0x4e,0x0               clrf    Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00430e   6a3b     CLRF      0x3b,0x0               clrf    Var2                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004310   6a3c     CLRF      0x3c,0x0               clrf    Var3                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var << 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftL3C macro Var0,Var1,Var2                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var << 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftL4C macro Var0,Var1,Var2,Var3                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var << 1;      Logical shift                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftL4 macro Var0,Var1,Var2,Var3                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bcf     STATUS,C                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var >> 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftR2C macro Var0,Var1                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var >> 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftR3C macro Var0,Var1,Var2                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var >> 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftR4C macro Var0,Var1,Var2,Var3                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var++, C invalid                                                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Inc2 macro Var0,Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   infsnz  Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   incf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var++, C valid                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Inc3 macro Var0,Var1,Var2                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   incf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var++, C valid                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Inc4 macro Var0,Var1,Var2,Var3                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   incf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Decrement 2 bytes. WREG unchanged.                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Dec2 macro Var0, Var1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   decf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss   STATUS,C                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   decf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg2 macro Var0,Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg3 macro Var0,Var1,Var2                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg4 macro Var0,Var1,Var2,Var3                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg5 macro Var0,Var1,Var2,Var3,Var4                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var4,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var4,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add32 macro AVar0,AVar1,AVar2, BVar0,BVar1                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004322   50f3     MOVF      0xf3,0x0,0x0           movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004332   50f3     MOVF      0xf3,0x0,0x0                                                                                    
004324   264e     ADDWF     0x4e,0x1,0x0           addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004334   264e     ADDWF     0x4e,0x1,0x0                                                                                    
004326   50f4     MOVF      0xf4,0x0,0x0           movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004336   50f4     MOVF      0xf4,0x0,0x0                                                                                    
004328   223b     ADDWFC    0x3b,0x1,0x0           addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004338   223b     ADDWFC    0x3b,0x1,0x0                                                                                    
00432a   0e00     MOVLW     0x0                    movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00433a   0e00     MOVLW     0x0                                                                                             
00432c   223c     ADDWFC    0x3c,0x1,0x0           addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00433c   223c     ADDWFC    0x3c,0x1,0x0                                                                                    
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add41 macro AVar0,AVar1,AVar2,AVar3, BVar0                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004378   50f4     MOVF      0xf4,0x0,0x0           movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004388   50f4     MOVF      0xf4,0x0,0x0                                                                                    
00437a   264d     ADDWF     0x4d,0x1,0x0           addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00438a   264d     ADDWF     0x4d,0x1,0x0                                                                                    
00437c   0e00     MOVLW     0x0                    movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00438c   0e00     MOVLW     0x0                                                                                             
00437e   224e     ADDWFC    0x4e,0x1,0x0           addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00438e   224e     ADDWFC    0x4e,0x1,0x0                                                                                    
004380   223b     ADDWFC    0x3b,0x1,0x0           addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004390   223b     ADDWFC    0x3b,0x1,0x0                                                                                    
004382   223c     ADDWFC    0x3c,0x1,0x0           addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004392   223c     ADDWFC    0x3c,0x1,0x0                                                                                    
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add42 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004342   50f3     MOVF      0xf3,0x0,0x0           movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004354   50f3     MOVF      0xf3,0x0,0x0                                                                                    
004366   50f3     MOVF      0xf3,0x0,0x0                                                                                    
004344   264d     ADDWF     0x4d,0x1,0x0           addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004356   264d     ADDWF     0x4d,0x1,0x0                                                                                    
004368   264d     ADDWF     0x4d,0x1,0x0                                                                                    
004346   50f4     MOVF      0xf4,0x0,0x0           movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004358   50f4     MOVF      0xf4,0x0,0x0                                                                                    
00436a   50f4     MOVF      0xf4,0x0,0x0                                                                                    
004348   224e     ADDWFC    0x4e,0x1,0x0           addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00435a   224e     ADDWFC    0x4e,0x1,0x0                                                                                    
00436c   224e     ADDWFC    0x4e,0x1,0x0                                                                                    
00434a   0e00     MOVLW     0x0                    movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00435c   0e00     MOVLW     0x0                                                                                             
00436e   0e00     MOVLW     0x0                                                                                             
00434c   223b     ADDWFC    0x3b,0x1,0x0           addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00435e   223b     ADDWFC    0x3b,0x1,0x0                                                                                    
004370   223b     ADDWFC    0x3b,0x1,0x0                                                                                    
00434e   223c     ADDWFC    0x3c,0x1,0x0           addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004360   223c     ADDWFC    0x3c,0x1,0x0                                                                                    
004372   223c     ADDWFC    0x3c,0x1,0x0                                                                                    
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add43 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add4 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2,BVar3                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar3,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub2 macro AVar0,AVar1, BVar0,BVar1                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub3 macro AVar0,AVar1,AVar2, BVar0,BVar1,BVar2                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub4 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2,BVar3                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar3,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub43 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; (PRODL,PRODH) = AVar*Bvar                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Mul2 macro AVar,BVar                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004312   5047     MOVF      0x47,0x0,0x0           movf    BVar,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00431e   5046     MOVF      0x46,0x0,0x0                                                                                    
00432e   5047     MOVF      0x47,0x0,0x0                                                                                    
00433e   5045     MOVF      0x45,0x0,0x0                                                                                    
004350   5046     MOVF      0x46,0x0,0x0                                                                                    
004362   5047     MOVF      0x47,0x0,0x0                                                                                    
004374   5045     MOVF      0x45,0x0,0x0                                                                                    
004384   5046     MOVF      0x46,0x0,0x0                                                                                    
004314   0242     MULWF     0x42,0x0               mulwf   AVar                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004320   0242     MULWF     0x42,0x0                                                                                        
004330   0241     MULWF     0x41,0x0                                                                                        
004340   0242     MULWF     0x42,0x0                                                                                        
004352   0241     MULWF     0x41,0x0                                                                                        
004364   0240     MULWF     0x40,0x0                                                                                        
004376   0241     MULWF     0x41,0x0                                                                                        
004386   0240     MULWF     0x40,0x0                                                                                        
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;=============== R E L  B R A N C H E S ===================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if bit set                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braSet macro Var, Bit, jLabel                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0042ea   b04a     BTFSC     0x4a,0x0,0x0           btfsc   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0042ec   d002     BRA       0x42f2                 bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if bit clear                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braClr macro Var, Bit, jLabel                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0042ce   a24a     BTFSS     0x4a,0x1,0x0           btfss   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0042dc   aa4a     BTFSS     0x4a,0x5,0x0                                                                                    
0042ee   a84a     BTFSS     0x4a,0x4,0x0                                                                                    
0042d0   d005     BRA       0x42dc                 bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0042de   d005     BRA       0x42ea                                                                                          
0042f0   d002     BRA       0x42f6                                                                                          
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var == 0.  WREG unchanged.                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFeqZ macro Var,jZero                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var,F                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bz      jZero                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var != 0.  WREG unchanged.                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFneZ macro Var,jNotZero                                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var,F                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bnz     jNotZero                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var == Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFeqL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var,W                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bz      jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var != Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFneL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var,W                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bnz     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var <= Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFleL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfsgt  Var                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var >= Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFgeL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfslt  Var                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var1 == Var2                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFeqF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var1,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bz      jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var1 != Var2                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFneF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var1,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bnz     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFgeF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfslt  Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFleF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfsgt  Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFltF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var1,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss   STATUS,Z                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bc      jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;=============== A B S O L U T E    B R A N C H E S =======================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Go to if bit set                                                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoSet macro Var, Bit, jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0042c8   b64a     BTFSC     0x4a,0x3,0x0           btfsc   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0042d2   b84a     BTFSC     0x4a,0x4,0x0                                                                                    
0042e0   b04a     BTFSC     0x4a,0x0,0x0                                                                                    
0042ca   ef7a     GOTO      0x44f4                 goto     jLabel                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0042cc   f022                                                                                                               
0042d4   ef7a     GOTO      0x44f4                                                                                          
0042d6   f022                                                                                                               
0042e2   ef7a     GOTO      0x44f4                                                                                          
0042e4   f022                                                                                                               
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Go to if bit clear                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoClr macro Var, Bit, jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto     jLabel                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Go to if F == Lit                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFeqL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw     Lit                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf     Var,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfsc     _Z                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto      jLabel                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;Go to if F != Lit                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFneL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw     Lit                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf     Var,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss     _Z                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto      jLabel                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;Go to if F >= Lit                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFgeL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     movlw     Lit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     cpfslt    Var                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     goto      jLabel                                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;Go to if F <= Lit                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFleL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     movlw     Lit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     cpfsgt    Var                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     goto      jLabel                                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;******************************************************************************  C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;******************************************************************************  C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ; FPM32                                                                          C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ; Description:                                                                   C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;         Mutiplication  fA*fB for floats fA and fB                              C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ; Input:                                                                         C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;         IEEE 754 format floats fAexp...fA2, fBexp...fB2.                       C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ; Output:                                                                        C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;         IEEE 754 format float fA = fA*fB                                       C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;------------------------------------------------------------------------------  C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     GLOBAL FPM32                                                           C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     EXTERN __FpUnPackA, __FpUnPackB, __FpPack                              C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     EXTERN __FpReturnNaN                                                   C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     EXTERN __FpReturnPosZero,__FpReturnNegZero,__FpReturnSignZero          C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     EXTERN __FpReturnPosInf, __FpReturnNegInf, __FpReturnSignInf           C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           PROG    CODE                                                                     C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;******************************************************************************  C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;******************************************************************************  C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           FPM32                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;------ Unpack the operands                                                      C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
0042be   6a4a     CLRF      0x4a,0x0                 clrf      fFlg                                                         C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
0042c0   ecd2     CALL      0x45a4,0x0               call      __FpUnPackA                                                  C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
0042c2   f022                                                                                                               
0042c4   ecea     CALL      0x45d4,0x0               call      __FpUnPackB                                                  C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
0042c6   f022                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     gotoSet   fFlg,FLG_NaN_AorB,__FpReturnNaN                              C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     braClr    fFlg,FLG_INF_A,jANotInf                                      C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;------ A is Infinity                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     ;; Is b zero                                                           C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     gotoSet   fFlg,FLG_ZERO_B,__FpReturnNaN  ; Inf * Zero => return NaN    C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     ;; B finite, A infinite => return infinite with FLG_SIGN_ABW sign      C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
0042d8   ef81     GOTO      0x4502                   goto      __FpReturnSignInf                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
0042da   f022                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           jANotInf:                                                                        C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     ;; A not infinite                                                      C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     braClr    fFlg,FLG_INF_B,jBothFinite                                   C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     ;; A finite, B infinite                                                C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     gotoSet   fFlg,FLG_ZERO_A,__FpReturnNaN  ; Zero * Inf => return NaN    C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
0042e6   ef81     GOTO      0x4502                   goto      __FpReturnSignInf                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
0042e8   f022                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           jBothFinite:                                                                     C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;------ Both operands are finite: check for zeros                                C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     braSet    fFlg,FLG_ZERO_A,jHaveZero                                    C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     braClr    fFlg,FLG_ZERO_B,jBothNotZero                                 C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           jHaveZero:                                                                       C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     ;; A or B is zero                                                      C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     ;; Return zero with sign of product                                    C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
0042f2   ef8d     GOTO      0x451a                   goto      __FpReturnSignZero                                           C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
0042f4   f022                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           jBothNotZero:                                                                    C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;-----------------------------------------------------------------------;        C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;       Both operands are finite and non-zero                                    C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;-----------------------------------------------------------------------;        C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     ;; Calculate resulting exponent (two byte resultant)                   C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     ;; ExpW = (ExpA+127) + (ExpB+127) - 127 + 1                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
0042f6   6a3e     CLRF      0x3e,0x0                 clrf      fWexpHi                                                      C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
0042f8   5048     MOVF      0x48,0x0,0x0             movf      fBexp,W                                                      C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
0042fa   2443     ADDWF     0x43,0x0,0x0             addwf     fAexp,W                                                      C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
0042fc   6e3d     MOVWF     0x3d,0x0                 movwf     fWexp                                                        C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
0042fe   6ae8     CLRF      0xe8,0x0                 clrf      WREG                                                         C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
004300   223e     ADDWFC    0x3e,0x1,0x0             addwfc    fWexpHi,F                                                    C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
004302   0e7e     MOVLW     0x7e                     movlw     FLT_BIAS-1                                                   C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
004304   5e3d     SUBWF     0x3d,0x1,0x0             subwf     fWexp,F                                                      C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
004306   6ae8     CLRF      0xe8,0x0                 clrf      WREG                                                         C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
004308   5a3e     SUBWFB    0x3e,0x1,0x0             subwfb    fWexpHi,F                                                    C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; Not all products are calculated and not all products are included             C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; This will have a slight effect on the rounding and could cause                C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; a round toward zero when a round up is required by IEEE754                    C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; round to nearest mode.  Effectively the round up threshold is changed         C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; from 0.5 to about 0.5001                                                      C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;;                                                                               C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; a0b0    a0b0                    not     not                                   C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;;         a1b0    a1b0            added   added                                 C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;;         a0b1    a0b1             |       |                                    C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;;                 a2b0    a2b0     V       V                                    C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;;                 a1b1    a1b1                                                  C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;;                 a0b2    a0b2                                                  C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;;                         a1b2    a1b2                                          C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;;                         a2b1    a2b1                                          C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;;                                 a2b2    a2b2                                  C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; added to get                                                                  C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;;                                                                               C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; fW0      fW1     fW2     fW3    NA      NA                                    C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;;                                                                               C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; If msb of fW0   is 0 then the results will have to be left shifted            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; which will move the msb of fA3 into fA2. After this is done then              C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; the msb of fW3 becomes the Round bit and the rest of the less significant     C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; bits combine to form the Sticky bit.  Since the full product is not           C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; calculated fW3 could be a maximum of 2 too small. Since bits 0 -> 6 of        C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; fW3 are used only for rounding the effect is a very small failure to          C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; round up.                                                                     C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     Clear4    fW3, fW2, fW1, fW0                                           C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     Mul2      fA0,fB0                                                      C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
004316   cff4     MOVFF     0xff4,0x3c               movff     PRODH,fW0                                                    C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
004318   f03c                                                                                                               
00431a   cff3     MOVFF     0xff3,0x3b               movff     PRODL,fW1                                                    C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
00431c   f03b                                                                                                               
                                                     Mul2      fA0,fB1                                                      C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     Add32     fW2,fW1,fW0, PRODL, PRODH                                    C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     Mul2      fA1,fB0                                                      C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     Add32     fW2,fW1,fW0, PRODL, PRODH                                    C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     Mul2      fA0,fB2                                                      C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     Add42     fW3,fW2,fW1,fW0, PRODL, PRODH                                C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     Mul2      fA1,fB1                                                      C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     Add42     fW3,fW2,fW1,fW0, PRODL, PRODH                                C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     Mul2      fA2,fB0                                                      C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     Add42     fW3,fW2,fW1,fW0, PRODL, PRODH                                C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     Mul2      fA1,fB2                                                      C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     Add41     fW3,fW2,fW1,fW0, PRODH                                       C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     Mul2      fA2,fB1                                                      C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     Add41     fW3,fW2,fW1,fW0, PRODH                                       C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; Start with form 0.f * 0.f                                                     C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; Results can be fW0 = 11xxxxxx -> 01xxxxxx                                     C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; Round and partial Sticky bits in fW3.                                         C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; One bit of signficant in fW3 in the 01xxxxxx case                             C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;; Sign is Flg.FLG_SIGN_ABW                                                      C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
004394   ef96     GOTO      0x452c                   goto      __FpPack                                                     C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
004396   f022                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                                     END                                                                    C:\MCC18\SRC\TRADIT~1\MATH\mulFP.asm
                                           ;	RCS Header $Id: fxd1616s.asm,v 1.2 2004/10/01 19:13:22 GrosbaJ Exp $           C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           ;	$Revision: 1.2 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           	include <P18CXXX.INC>		; general Golden Gate definitions                        C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Version 1.00   Microchip Technology, Inc.   C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F64J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F84J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           	include <CMATH18.INC>		; Math library definitions                               C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           ;	RCS Header $Id: cmath18.inc,v 1.2 2004/10/01 19:13:22 GrosbaJ Exp $            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ;	$Revision: 1.2 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                               LIST                                                                         C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ; CMATH18.INC  v1.0  Microchip Technology, Inc. / F.J. Testa                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           	include <AARG.INC>		; AARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           ;	RCS Header $Id: aarg.inc,v 1.2 2004/10/01 19:13:22 GrosbaJ Exp $               C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN	AARGB0, AARGB1, AARGB2, AARGB3                                           C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                   EXTERN  AARGB4, AARGB5, AARGB6, AARGB7                                   C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  AEXP                                                                    C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  REMB3, REMB2, REMB1, REMB0                                              C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           	include <BARG.INC>		; BARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           ;	RCS Header $Id: barg.inc,v 1.2 2004/10/01 19:13:22 GrosbaJ Exp $               C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  BARGB3, BARGB2, BARGB1, BARGB0                                   C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  BEXP                                                             C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           ;       16/16 Bit Signed Fixed Point Divide 16/16 -> 16.16                       C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           ;       Input:  16 bit fixed point dividend in AARGB0, AARGB1                    C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           ;               16 bit fixed point divisor in BARGB0, BARGB1                     C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           ;       Use:    CALL    FXD1616S                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           ;       Output: 16 bit fixed point quotient in AARGB0, AARGB1                    C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           ;               16 bit fixed point remainder in REMB0, REMB1                     C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           ;       Result: AARG, REM  <--  AARG / BARG                                      C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           ;	Testing from 100000 trials:                                                    C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           ;		min	max	mean                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           ;	Timing:	28	149	85.17	clks                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           ;       PM: 33            DM: 8                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           ;---------------------------------------------------------------------------------------------- C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           PROG	CODE                                                                        C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           		EXTERN	FXD1616U                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           FXD1616S                                                                         C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           		GLOBAL		FXD1616S                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
004398   6a49     CLRF      0x49,0x0       		CLRF		SIGN		; clear sign                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
00439a   ae47     BTFSS     0x47,0x7,0x0           BTFSS   	BARGB0,MSB                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
00439c   efd5     GOTO      0x43aa                 GOTO    	DA1616S                                                         C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
00439e   f021                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043a0   6c46     NEGF      0x46,0x0               NEGF    	BARGB1		; if BARG<0, negate and toggle sign                     C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043a2   1e47     COMF      0x47,0x1,0x0           COMF    	BARGB0,F                                                        C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043a4   6ae8     CLRF      0xe8,0x0               CLRF		WREG                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043a6   2247     ADDWFC    0x47,0x1,0x0   		ADDWFC		BARGB0,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043a8   1e49     COMF      0x49,0x1,0x0   		COMF		SIGN,F                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           DA1616S                                                                          C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043aa   ae42     BTFSS     0x42,0x7,0x0   		BTFSS       AARGB0,MSB                                                         C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043ac   efdd     GOTO      0x43ba                 GOTO        D1616S                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043ae   f021                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043b0   6c41     NEGF      0x41,0x0               NEGF        AARGB1		; if AARG<0, negate and toggle sign                  C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043b2   1e42     COMF      0x42,0x1,0x0           COMF        AARGB0,F                                                     C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043b4   6ae8     CLRF      0xe8,0x0               CLRF		WREG                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043b6   2242     ADDWFC    0x42,0x1,0x0   		ADDWFC		AARGB0,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043b8   1e49     COMF      0x49,0x1,0x0   		COMF		SIGN,F                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           D1616S                                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043ba   ec5c     CALL      0x60b8,0x0     		CALL		FXD1616U                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043bc   f030                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043be   be42     BTFSC     0x42,0x7,0x0   		BTFSC		AARGB0,MSB	; test for exception                                         C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043c0   efed     GOTO      0x43da         		GOTO		D1616SX                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043c2   f021                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           D1616SOK                                                                         C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043c4   ae49     BTFSS     0x49,0x7,0x0   		BTFSS       SIGN,MSB                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043c6   0c00     RETLW     0x0            		RETLW		0x00                                                                    C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           D1616SNEG                                                                        C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043c8   6c41     NEGF      0x41,0x0               NEGF        AARGB1		; negate if result negative                          C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043ca   1e42     COMF      0x42,0x1,0x0           COMF        AARGB0,F                                                     C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043cc   6ae8     CLRF      0xe8,0x0               CLRF		WREG                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043ce   2242     ADDWFC    0x42,0x1,0x0   		ADDWFC		AARGB0,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043d0   6c3d     NEGF      0x3d,0x0       		NEGF        REMB1                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043d2   1e3e     COMF      0x3e,0x1,0x0           COMF        REMB0,F                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043d4   6ae8     CLRF      0xe8,0x0               CLRF		WREG                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043d6   223e     ADDWFC    0x3e,0x1,0x0   		ADDWFC		REMB0,F                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043d8   0c00     RETLW     0x0                    RETLW       0x00                                                         C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           D1616SX                                                                          C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043da   be49     BTFSC     0x49,0x7,0x0   		BTFSC		SIGN,MSB                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043dc   efe4     GOTO      0x43c8         		GOTO		D1616SNEG                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043de   f021                                                                                                               
0043e0   884a     BSF       0x4a,0x4,0x0   		BSF			FPFLAGS,NAN	; NAN exception if AARG=0x8000                               C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           								; with positive sign                                                     C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
0043e2   0cff     RETLW     0xff           		RETLW		0xFF                                                                    C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           		END                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd1616s.asm
                                           /*** Unsigned Integer Division: 16-bit by 16-bit                                 C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                            ***                                                                             C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                            *** Optimized: Dec. 21, 2000                                                    C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                            ***        by: Daniel R. Madill, Quanser Consulting Inc.                        C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                            ***       for: Saved (for the worst case) at least 5*16 = 80 instruction cycles C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                            ***            over the code supplied with MCC18 v1.00.12                       C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                            ***/                                                                            C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                           void FXD1616U (/*unsigned arg0, unsigned arg1*/)                                 C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                           {                                                                                C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                             // use INDF1 for the counter...                                                C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                                 _asm                                                                       C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                               // REM = 0                                                                   C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060b8   6a3e     CLRF      0x3e,0x0           clrf REMB0, 0                                                                C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060ba   6a3d     CLRF      0x3d,0x0           clrf REMB1, 0                                                                C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                               // INDF1 = 16                                                                C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060bc   0e10     MOVLW     0x10               movlw 16                                                                     C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060be   6ee7     MOVWF     0xe7,0x0           movwf INDF1, 0                                                               C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                               // Clear the carry                                                           C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060c0   90d8     BCF       0xd8,0x0,0x0   	bcf STATUS, 0, 0                                                                C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                           loop:                                                                            C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                           	//AARG16 <<= 1; Carry is always clear at this point.                            C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060c2   3641     RLCF      0x41,0x1,0x0   	rlcf AARGB1, 1, 0                                                               C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060c4   3642     RLCF      0x42,0x1,0x0   	rlcf AARGB0, 1, 0                                                               C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                           	//PROD = (PROD << 1) | (AARG16 >> 16)                                           C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060c6   363d     RLCF      0x3d,0x1,0x0   	rlcf REMB1, 1, 0                                                                C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060c8   363e     RLCF      0x3e,0x1,0x0   	rlcf REMB0, 1, 0                                                                C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                           	                                                                                C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                           	//if (PROD >= BARG16)                                                           C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060ca   5046     MOVF      0x46,0x0,0x0   	movf BARGB1, 0, 0                                                               C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060cc   5c3d     SUBWF     0x3d,0x0,0x0   	subwf REMB1, 0, 0                                                               C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060ce   5047     MOVF      0x47,0x0,0x0   	movf BARGB0, 0, 0                                                               C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060d0   583e     SUBWFB    0x3e,0x0,0x0   	subwfb REMB0, 0, 0                                                              C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060d2   e305     BNC       0x60de         	bnc endloop                                                                     C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                               //{                                                                          C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                           	    //PROD -= BARG16;                                                           C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060d4   5046     MOVF      0x46,0x0,0x0   	    movf BARGB1, 0, 0                                                           C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060d6   5e3d     SUBWF     0x3d,0x1,0x0   	    subwf REMB1, 1, 0                                                           C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060d8   5047     MOVF      0x47,0x0,0x0   	    movf BARGB0, 0, 0                                                           C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060da   5a3e     SUBWFB    0x3e,0x1,0x0   	    subwfb REMB0, 1, 0                                                          C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                           	    //++AARG16; Since AARG16 was shift to the left above, the increment will    C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                                   //          simply set the LSbit. Using incf also clears the carry, which C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                                   //          means we don't have to clear the carry at the top of the loop. C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060dc   2a41     INCF      0x41,0x1,0x0           incf AARGB1, 1, 0                                                        C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                               //}                                                                          C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                           endloop:                                                                         C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060de   2ee7     DECFSZ    0xe7,0x1,0x0       decfsz INDF1, 1, 0    // does not affect the carry bit                       C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060e0   d7f0     BRA       0x60c2             bra loop                                                                     C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                             _endasm                                                                        C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                             /* result in AARG already... */                                                C:\mcc18\src\TRADIT~1\math\fxd1616u.c
0060e2   0012     RETURN    0x0            }                                                                                C:\mcc18\src\TRADIT~1\math\fxd1616u.c
                                           ;	RCS Header $Id: fxd3232s.asm,v 1.2 2004/10/01 19:13:23 GrosbaJ Exp $           C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           ;	$Revision: 1.2 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           	include <P18CXXX.INC>		; general Golden Gate definitions                        C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Version 1.00   Microchip Technology, Inc.   C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F64J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F84J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           	include <CMATH18.INC>		; Math library definitions                               C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           ;	RCS Header $Id: cmath18.inc,v 1.2 2004/10/01 19:13:22 GrosbaJ Exp $            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ;	$Revision: 1.2 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                               LIST                                                                         C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ; CMATH18.INC  v1.0  Microchip Technology, Inc. / F.J. Testa                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           	include <AARG.INC>		; AARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           ;	RCS Header $Id: aarg.inc,v 1.2 2004/10/01 19:13:22 GrosbaJ Exp $               C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN	AARGB0, AARGB1, AARGB2, AARGB3                                           C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                   EXTERN  AARGB4, AARGB5, AARGB6, AARGB7                                   C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  AEXP                                                                    C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  REMB3, REMB2, REMB1, REMB0                                              C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           	include <BARG.INC>		; BARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           ;	RCS Header $Id: barg.inc,v 1.2 2004/10/01 19:13:22 GrosbaJ Exp $               C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  BARGB3, BARGB2, BARGB1, BARGB0                                   C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  BEXP                                                             C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           ;       32/32 Bit Signed Fixed Point Divide 32/32 -> 32.32                       C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           ;       Input:  32 bit fixed point dividend in AARGB0, AARGB1, AARGB2            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           ;               32 bit fixed point divisor in BARGB0, BARGB1                     C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           ;       Use:    CALL    FXD3232S                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           ;       Output: 32 bit fixed point quotient in AARGB0, AARGB1, AARGB2            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           ;               32 bit fixed point remainder in REMB0, REMB1                     C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           ;       Result: AARG, REM  <--  AARG / BARG                                      C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           ;	Testing from 100000 trials:                                                    C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           ;		min	max	mean                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           ;	Timing:	32	410	127.22	clks                                                     C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           ;       PM: 50             DM: 12                                                C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           ;---------------------------------------------------------------------------------------------- C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           PROG	CODE                                                                        C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           		EXTERN		FXD3232U                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           FXD3232S                                                                         C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           		GLOBAL		FXD3232S                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
0043e4   6a49     CLRF      0x49,0x0       		CLRF		SIGN		; clear sign                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
0043e6   6ae8     CLRF      0xe8,0x0       		CLRF		WREG                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
0043e8   ae47     BTFSS     0x47,0x7,0x0   		BTFSS		BARGB0,MSB                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
0043ea   efff     GOTO      0x43fe         		GOTO 		DA3232S                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
0043ec   f021                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
0043ee   6c44     NEGF      0x44,0x0       		NEGF 		BARGB3		; if BARG<0, negate and toggle sign                             C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
0043f0   1e45     COMF      0x45,0x1,0x0   		COMF 		BARGB2,F                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
0043f2   1e46     COMF      0x46,0x1,0x0   		COMF 		BARGB1,F                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
0043f4   1e47     COMF      0x47,0x1,0x0   		COMF 		BARGB0,F                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
0043f6   2245     ADDWFC    0x45,0x1,0x0   		ADDWFC		BARGB2,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
0043f8   2246     ADDWFC    0x46,0x1,0x0   		ADDWFC		BARGB1,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
0043fa   2247     ADDWFC    0x47,0x1,0x0   		ADDWFC		BARGB0,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
0043fc   1e49     COMF      0x49,0x1,0x0   		COMF		SIGN,F                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           DA3232S                                                                          C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
0043fe   ae42     BTFSS     0x42,0x7,0x0   		BTFSS       AARGB0,MSB                                                         C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004400   ef0a     GOTO      0x4414         		GOTO        D3232S                                                             C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004402   f022                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004404   6c3f     NEGF      0x3f,0x0       		NEGF        AARGB3		; if AARG<0, negate and toggle sign                        C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004406   1e40     COMF      0x40,0x1,0x0   		COMF        AARGB2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004408   1e41     COMF      0x41,0x1,0x0   		COMF        AARGB1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
00440a   1e42     COMF      0x42,0x1,0x0   		COMF        AARGB0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
00440c   2240     ADDWFC    0x40,0x1,0x0   		ADDWFC      AARGB2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
00440e   2241     ADDWFC    0x41,0x1,0x0   		ADDWFC      AARGB1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004410   2242     ADDWFC    0x42,0x1,0x0   		ADDWFC      AARGB0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004412   1e49     COMF      0x49,0x1,0x0   		COMF		SIGN,F                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           D3232S                                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004414   ec19     CALL      0x6032,0x0     		CALL		FXD3232U                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004416   f030                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004418   be42     BTFSC     0x42,0x7,0x0   		BTFSC		AARGB0,MSB	; test for exception                                         C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
00441a   ef21     GOTO      0x4442         		GOTO		D3232SX                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
00441c   f022                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           D3232SOK                                                                         C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
00441e   ae49     BTFSS     0x49,0x7,0x0   		BTFSS       SIGN,MSB                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004420   0c00     RETLW     0x0                    RETLW       0x00                                                         C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           D3232SNEG                                                                        C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004422   6c3f     NEGF      0x3f,0x0       		NEGF  		AARGB3		; negate if result negative                                    C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004424   1e40     COMF      0x40,0x1,0x0   		COMF  		AARGB2,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004426   1e41     COMF      0x41,0x1,0x0   		COMF  		AARGB1,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004428   1e42     COMF      0x42,0x1,0x0   		COMF  		AARGB0,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
00442a   6ae8     CLRF      0xe8,0x0       		CLRF  		WREG                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
00442c   2240     ADDWFC    0x40,0x1,0x0   		ADDWFC		AARGB2,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
00442e   2241     ADDWFC    0x41,0x1,0x0   		ADDWFC		AARGB1,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004430   2242     ADDWFC    0x42,0x1,0x0   		ADDWFC		AARGB0,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004432   6c3b     NEGF      0x3b,0x0       		NEGF  		REMB3                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004434   1e3c     COMF      0x3c,0x1,0x0   		COMF  		REMB2,F                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004436   1e3d     COMF      0x3d,0x1,0x0   		COMF  		REMB1,F                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004438   1e3e     COMF      0x3e,0x1,0x0   		COMF  		REMB0,F                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
00443a   223c     ADDWFC    0x3c,0x1,0x0   		ADDWFC		REMB2,F                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
00443c   223d     ADDWFC    0x3d,0x1,0x0   		ADDWFC		REMB1,F                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
00443e   223e     ADDWFC    0x3e,0x1,0x0   		ADDWFC		REMB0,F                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004440   0c00     RETLW     0x0            		RETLW 		0x00                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           D3232SX                                                                          C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004442   be49     BTFSC     0x49,0x7,0x0   		BTFSC		SIGN,MSB                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004444   ef11     GOTO      0x4422         		GOTO		D3232SNEG                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
004446   f022                                                                                                               
004448   884a     BSF       0x4a,0x4,0x0   		BSF			FPFLAGS,NAN	; NAN exception if AARG=0x800000                             C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
00444a   0cff     RETLW     0xff           		RETLW		0xFF		; with positive sign                                              C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           		END                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxd3232s.asm
                                           /*** Unsigned Integer Division: 32-bit by 32-bit                                 C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                            ***                                                                             C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                            *** Optimized: Dec. 21, 2000                                                    C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                            ***        by: Daniel R. Madill, Quanser Consulting Inc.                        C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                            ***       for: Saved (for the worst case) at least 8*32 = 256 instruction cycles C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                            ***            over the code supplied with MCC18 v1.00.12                       C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                            ***/                                                                            C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                           void  FXD3232U(void/* ulong aarg, ulong barg */)                                 C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                           {                                                                                C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                             // use INDF1 for the counter...                                                C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                               _asm                                                                         C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                               // REM = 0                                                                   C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006032   6a3e     CLRF      0x3e,0x0           clrf REMB0, 0                                                                C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006034   6a3d     CLRF      0x3d,0x0           clrf REMB1, 0                                                                C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006036   6a3c     CLRF      0x3c,0x0           clrf REMB2, 0                                                                C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006038   6a3b     CLRF      0x3b,0x0           clrf REMB3, 0                                                                C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                               // INDF1 = 32                                                                C:\mcc18\src\TRADIT~1\math\fxd3232u.c
00603a   0e20     MOVLW     0x20               movlw 32                                                                     C:\mcc18\src\TRADIT~1\math\fxd3232u.c
00603c   6ee7     MOVWF     0xe7,0x0           movwf INDF1, 0                                                               C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                               // Clear the carry                                                           C:\mcc18\src\TRADIT~1\math\fxd3232u.c
00603e   90d8     BCF       0xd8,0x0,0x0       bcf STATUS, 0, 0                                                             C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                           loop:                                                                            C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                           	//AARG32 <<= 1; The carry is always clear at the top of the loop.               C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006040   363f     RLCF      0x3f,0x1,0x0   	rlcf AARGB3, 1, 0                                                               C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006042   3640     RLCF      0x40,0x1,0x0   	rlcf AARGB2, 1, 0                                                               C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006044   3641     RLCF      0x41,0x1,0x0   	rlcf AARGB1, 1, 0                                                               C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006046   3642     RLCF      0x42,0x1,0x0   	rlcf AARGB0, 1, 0                                                               C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                           	//REM32 = (REM32 << 1) | (AARG32 >> 32)                                         C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006048   363b     RLCF      0x3b,0x1,0x0   	rlcf REMB3, 1, 0                                                                C:\mcc18\src\TRADIT~1\math\fxd3232u.c
00604a   363c     RLCF      0x3c,0x1,0x0   	rlcf REMB2, 1, 0                                                                C:\mcc18\src\TRADIT~1\math\fxd3232u.c
00604c   363d     RLCF      0x3d,0x1,0x0   	rlcf REMB1, 1, 0                                                                C:\mcc18\src\TRADIT~1\math\fxd3232u.c
00604e   363e     RLCF      0x3e,0x1,0x0   	rlcf REMB0, 1, 0                                                                C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                           	                                                                                C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                           	//if (PROD >= BARG32)                                                           C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006050   5044     MOVF      0x44,0x0,0x0   	movf BARGB3, 0, 0                                                               C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006052   5c3b     SUBWF     0x3b,0x0,0x0   	subwf REMB3, 0, 0                                                               C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006054   5045     MOVF      0x45,0x0,0x0   	movf BARGB2, 0, 0                                                               C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006056   583c     SUBWFB    0x3c,0x0,0x0   	subwfb REMB2, 0, 0                                                              C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006058   5046     MOVF      0x46,0x0,0x0   	movf BARGB1, 0, 0                                                               C:\mcc18\src\TRADIT~1\math\fxd3232u.c
00605a   583d     SUBWFB    0x3d,0x0,0x0   	subwfb REMB1, 0, 0                                                              C:\mcc18\src\TRADIT~1\math\fxd3232u.c
00605c   5047     MOVF      0x47,0x0,0x0   	movf BARGB0, 0, 0                                                               C:\mcc18\src\TRADIT~1\math\fxd3232u.c
00605e   583e     SUBWFB    0x3e,0x0,0x0   	subwfb REMB0, 0, 0                                                              C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006060   e309     BNC       0x6074         	bnc _false                                                                      C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                               //{                                                                          C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                           	    //REM32-= BARG32;                                                           C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006062   5044     MOVF      0x44,0x0,0x0   	    movf BARGB3, 0, 0                                                           C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006064   5e3b     SUBWF     0x3b,0x1,0x0   	    subwf REMB3, 1, 0                                                           C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006066   5045     MOVF      0x45,0x0,0x0   	    movf BARGB2, 0, 0                                                           C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006068   5a3c     SUBWFB    0x3c,0x1,0x0   	    subwfb REMB2, 1, 0                                                          C:\mcc18\src\TRADIT~1\math\fxd3232u.c
00606a   5046     MOVF      0x46,0x0,0x0   	    movf BARGB1, 0, 0                                                           C:\mcc18\src\TRADIT~1\math\fxd3232u.c
00606c   5a3d     SUBWFB    0x3d,0x1,0x0   	    subwfb REMB1, 1, 0                                                          C:\mcc18\src\TRADIT~1\math\fxd3232u.c
00606e   5047     MOVF      0x47,0x0,0x0   	    movf BARGB0, 0, 0                                                           C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006070   5a3e     SUBWFB    0x3e,0x1,0x0   	    subwfb REMB0, 1, 0                                                          C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                           	    //++AARG32; Since AARG32 was shift to the left above, we only need to set   C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                                   //          the lowest bit. Use incf so that the carry flag will also be cleared. C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                                   //          Thus, the carry will always be clear at the top of the loop. C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006072   2a3f     INCF      0x3f,0x1,0x0   	    incf AARGB3, 1, 0                                                           C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                               //}                                                                          C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                           _false:                                                                          C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006074   2ee7     DECFSZ    0xe7,0x1,0x0       decfsz INDF1, 1, 0    // does not affect the carry bit                       C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006076   d7e4     BRA       0x6040             bra loop                                                                     C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                             /* result in AARG already... */                                                C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                             _endasm                                                                        C:\mcc18\src\TRADIT~1\math\fxd3232u.c
006078   0012     RETURN    0x0            }                                                                                C:\mcc18\src\TRADIT~1\math\fxd3232u.c
                                           ;	RCS Header $Id: fxm1616s.asm,v 1.2 2004/10/01 19:13:23 GrosbaJ Exp $           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	$Revision: 1.2 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <P18CXXX.INC>		; general Golden Gate definitions                        C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Version 1.00   Microchip Technology, Inc.   C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F64J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F84J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <CMATH18.INC>		; Math library definitions                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: cmath18.inc,v 1.2 2004/10/01 19:13:22 GrosbaJ Exp $            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ;	$Revision: 1.2 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                               LIST                                                                         C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ; CMATH18.INC  v1.0  Microchip Technology, Inc. / F.J. Testa                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <AARG.INC>		; AARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: aarg.inc,v 1.2 2004/10/01 19:13:22 GrosbaJ Exp $               C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN	AARGB0, AARGB1, AARGB2, AARGB3                                           C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                   EXTERN  AARGB4, AARGB5, AARGB6, AARGB7                                   C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  AEXP                                                                    C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  REMB3, REMB2, REMB1, REMB0                                              C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <BARG.INC>		; BARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: barg.inc,v 1.2 2004/10/01 19:13:22 GrosbaJ Exp $               C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  BARGB3, BARGB2, BARGB1, BARGB0                                   C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  BEXP                                                             C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <TEMPARG.INC>		; TEMPARG declarations                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: temparg.inc,v 1.2 2004/10/01 19:13:23 GrosbaJ Exp $            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                   EXTERN  TEMPB3, TEMPB2, TEMPB1, TEMPB0, TEMP                             C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       16x16 Bit Signed Fixed Point Multiply 16 x 16 -> 32                      C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Input:  16 bit signed fixed point multiplicand in AARGB0, AARGB1         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;               16 bit signed fixed point multiplier in BARGB0, BARGB1           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Use:    CALL    FXM1616S                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Output: 32 bit signed fixed point product in AARGB0, AARGB1,             C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;               AARGB2, AARGB3                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Result: AARG  <--  AARG * BARG                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Max Timing:     39 clks                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Min Timing:     31 clks                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       PM: 38              DM: 8                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           PROG	CODE                                                                        C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           FXM1616S                                                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           		GLOBAL	FXM1616S                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00444c   c042     MOVFF     0x42,0x4e      		MOVFF	AARGB0,TEMPB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00444e   f04e                                                                                                               
004450   c041     MOVFF     0x41,0x4d      		MOVFF	AARGB1,TEMPB1	                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004452   f04d                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004454   5041     MOVF      0x41,0x0,0x0   		MOVF	AARGB1,W                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004456   0246     MULWF     0x46,0x0       		MULWF	BARGB1                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004458   cff4     MOVFF     0xff4,0x40     		MOVFF	PRODH,AARGB2                                                             C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00445a   f040                                                                                                               
00445c   cff3     MOVFF     0xff3,0x3f     		MOVFF	PRODL,AARGB3                                                             C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00445e   f03f                                                                                                               
                                           		                                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004460   5042     MOVF      0x42,0x0,0x0   		MOVF	AARGB0,W                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004462   0247     MULWF     0x47,0x0       		MULWF	BARGB0                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004464   cff4     MOVFF     0xff4,0x42     		MOVFF	PRODH,AARGB0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004466   f042                                                                                                               
004468   cff3     MOVFF     0xff3,0x41     		MOVFF	PRODL,AARGB1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00446a   f041                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00446c   0246     MULWF     0x46,0x0       		MULWF	BARGB1                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00446e   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004470   2640     ADDWF     0x40,0x1,0x0   		ADDWF	AARGB2,F                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004472   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004474   2241     ADDWFC    0x41,0x1,0x0   		ADDWFC	AARGB1,F                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004476   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004478   2242     ADDWFC    0x42,0x1,0x0   		ADDWFC	AARGB0,F                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00447a   504d     MOVF      0x4d,0x0,0x0   		MOVF	TEMPB1,W                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00447c   0247     MULWF     0x47,0x0       		MULWF	BARGB0                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00447e   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004480   2640     ADDWF     0x40,0x1,0x0   		ADDWF	AARGB2,F                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004482   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004484   2241     ADDWFC    0x41,0x1,0x0   		ADDWFC	AARGB1,F                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004486   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004488   2242     ADDWFC    0x42,0x1,0x0   		ADDWFC	AARGB0,F                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00448a   ae47     BTFSS     0x47,0x7,0x0   		BTFSS	BARGB0,MSB                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00448c   ef4c     GOTO      0x4498         		GOTO	TSIGN1616A                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00448e   f022                                                                                                               
004490   504d     MOVF      0x4d,0x0,0x0   		MOVF	TEMPB1,W                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004492   5e41     SUBWF     0x41,0x1,0x0   		SUBWF	AARGB1,F                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004494   504e     MOVF      0x4e,0x0,0x0   		MOVF	TEMPB0,W                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004496   5a42     SUBWFB    0x42,0x1,0x0   		SUBWFB	AARGB0,F                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           TSIGN1616A                                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004498   ae4e     BTFSS     0x4e,0x7,0x0   		BTFSS	TEMPB0,MSB                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00449a   0c00     RETLW     0x0            		RETLW	0x00                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00449c   5046     MOVF      0x46,0x0,0x0   		MOVF	BARGB1,W                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00449e   5e41     SUBWF     0x41,0x1,0x0   		SUBWF	AARGB1,F                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0044a0   5047     MOVF      0x47,0x0,0x0   		MOVF	BARGB0,W                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0044a2   5a42     SUBWFB    0x42,0x1,0x0   		SUBWFB	AARGB0,F                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           		                                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0044a4   0c00     RETLW     0x0            		RETLW	0x00                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           		END                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           /* a signed multiply is only different from an unsigned multiply                 C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                            * if the upper bytes of the result matter, which for us they                    C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                            * don't.                                                                        C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                            */                                                                              C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                           #define PRODH	(PRODL + 1)                                                        C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                           extern near unsigned char AARGB3, BARGB3;                                        C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                           extern near unsigned char AARGB7;                                                C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                           void FXM3232 (void)                                                              C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                           {                                                                                C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                             _asm                                                                           C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e2a   503f     MOVF      0x3f,0x0,0x0       movf AARGB3, 0, 0                                                            C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e2c   0244     MULWF     0x44,0x0           mulwf BARGB3, 0                                                              C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // low byte of both operands, so result adds into the low order              C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // result bytes                                                              C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e2e   cff3     MOVFF     0xff3,0x3b         movff PRODL, AARGB7                                                          C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e30   f03b                                                                                                               
005e32   cff4     MOVFF     0xff4,0x3c         movff PRODH, AARGB7 + 1                                                      C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e34   f03c                                                                                                               
                                               // W still contains AARGB3                                                   C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e36   0245     MULWF     0x45,0x0           mulwf BARGB3 + 1, 0                                                          C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // BARGB3[1], so result adds into AARGB7[1,2]                                C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e38   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e3a   263c     ADDWF     0x3c,0x1,0x0       addwf AARGB7 + 1, 1, 0                                                       C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e3c   0e00     MOVLW     0x0                movlw 0                                                                      C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e3e   20f4     ADDWFC    0xf4,0x0,0x0       addwfc PRODH, 0, 0                                                           C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e40   6e3d     MOVWF     0x3d,0x0           movwf AARGB7 + 2, 0                                                          C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3 to continue                                                 C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e42   503f     MOVF      0x3f,0x0,0x0       movf AARGB3, 0, 0                                                            C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e44   0246     MULWF     0x46,0x0           mulwf BARGB3 + 2, 0                                                          C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // BARGB3[2], so result adds into AARGB7[2,3]                                C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e46   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e48   263d     ADDWF     0x3d,0x1,0x0       addwf AARGB7 + 2, 1, 0                                                       C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e4a   0e00     MOVLW     0x0                movlw 0                                                                      C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e4c   20f4     ADDWFC    0xf4,0x0,0x0       addwfc PRODH, 0, 0                                                           C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e4e   6e3e     MOVWF     0x3e,0x0           movwf AARGB7 + 3, 0                                                          C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3 to continue                                                 C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e50   503f     MOVF      0x3f,0x0,0x0       movf AARGB3, 0, 0                                                            C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e52   0247     MULWF     0x47,0x0           mulwf BARGB3 + 3, 0                                                          C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // BARGB3[3], so result adds into AARGB7[3].                                 C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // we don't care about result bytes above AARGB7[3], ignore prodh here.      C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e54   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e56   263e     ADDWF     0x3e,0x1,0x0       addwf AARGB7 + 3, 1, 0                                                       C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // that's the end of all terms involving AARGB3[0].                          C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // load AARGB3[1] to continue                                                C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e58   5040     MOVF      0x40,0x0,0x0       movf AARGB3 + 1, 0, 0                                                        C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e5a   0244     MULWF     0x44,0x0           mulwf BARGB3, 0                                                              C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[1], so result adds into AARGB7[1,2]                                C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e5c   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e5e   263c     ADDWF     0x3c,0x1,0x0       addwf AARGB7 + 1, 1, 0                                                       C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e60   50f4     MOVF      0xf4,0x0,0x0       movf PRODH, 0, 0                                                             C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e62   223d     ADDWFC    0x3d,0x1,0x0       addwfc AARGB7 + 2, 1, 0                                                      C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e64   0e00     MOVLW     0x0                movlw 0                                                                      C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e66   223e     ADDWFC    0x3e,0x1,0x0       addwfc AARGB7 + 3, 1, 0                                                      C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3[1] to continue                                              C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e68   5040     MOVF      0x40,0x0,0x0       movf AARGB3 + 1, 0, 0                                                        C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e6a   0245     MULWF     0x45,0x0           mulwf BARGB3 + 1, 0                                                          C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[1] and BARGB3[1], so result adds into AARGB7[2,3]                  C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e6c   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e6e   263d     ADDWF     0x3d,0x1,0x0       addwf AARGB7 + 2, 1, 0                                                       C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e70   50f4     MOVF      0xf4,0x0,0x0       movf PRODH, 0, 0                                                             C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e72   223e     ADDWFC    0x3e,0x1,0x0       addwfc AARGB7 + 3, 1, 0                                                      C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3[1] to continue                                              C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e74   5040     MOVF      0x40,0x0,0x0       movf AARGB3 + 1, 0, 0                                                        C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e76   0246     MULWF     0x46,0x0           mulwf BARGB3 + 2, 0                                                          C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[1] and BARGB3[2], so result adds into AARGB7[3]                    C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // we don't care about result bytes above AARGB7[3], ignore prodh here.      C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e78   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e7a   263e     ADDWF     0x3e,0x1,0x0       addwf AARGB7 + 3, 1, 0                                                       C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // all bytes of the term from the product of AARGB3[1] and BARGB3[3] are     C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // above our 32-bit result, don't even need to bother calculating            C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // that term.                                                                C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // load AARGB3[2] to continue                                                C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e7c   5041     MOVF      0x41,0x0,0x0       movf AARGB3 + 2, 0, 0                                                        C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e7e   0244     MULWF     0x44,0x0           mulwf BARGB3, 0                                                              C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[2] and BARGB3[0], so result adds into AARGB7[2,3]                  C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e80   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e82   263d     ADDWF     0x3d,0x1,0x0       addwf AARGB7 + 2, 1, 0                                                       C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e84   50f4     MOVF      0xf4,0x0,0x0       movf PRODH, 0, 0                                                             C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e86   223e     ADDWFC    0x3e,0x1,0x0       addwfc AARGB7 + 3, 1, 0                                                      C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3[2] to continue                                              C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e88   5041     MOVF      0x41,0x0,0x0       movf AARGB3 + 2, 0, 0                                                        C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e8a   0245     MULWF     0x45,0x0           mulwf BARGB3 + 1, 0                                                          C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[2] and BARGB3[1], so result adds into AARGB7[3]                    C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // we don't care about result bytes above AARGB7[3], ignore prodh here.      C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e8c   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e8e   263e     ADDWF     0x3e,0x1,0x0       addwf AARGB7 + 3, 1, 0                                                       C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // all bytes of the termsfrom the products of AARGB3[2] and BARGB3[2,3] are  C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // above our 32-bit result, don't even need to bother calculating            C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // those terms.                                                              C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // load AARGB3[3] to continue                                                C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e90   5042     MOVF      0x42,0x0,0x0       movf AARGB3 + 3, 0, 0                                                        C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e92   0244     MULWF     0x44,0x0           mulwf BARGB3, 0                                                              C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[3] and BARGB3[0], so result adds into AARGB7[3]                    C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e94   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e96   263e     ADDWF     0x3e,0x1,0x0       addwf AARGB7 + 3, 1, 0                                                       C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                                                                                                            C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                               _endasm;                                                                     C:\mcc18\src\TRADIT~1\math\fxm3232.c
005e98   0012     RETURN    0x0            }                                                                                C:\mcc18\src\TRADIT~1\math\fxm3232.c
                                           #include <P18CXXX.INC>           ; general Golden Gate definitions               C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Version 1.00   Microchip Technology, Inc.   C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F64J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F84J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                           #include "fpmacros.inc"                                                          C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;******************************************************************************  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ; Macros, constants, defines and variable externs used by float routines.        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;******************************************************************************  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;        radix dec                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;; Uses traditional global names                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN FPFLAGS                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB7                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB6                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB5                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB4                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fFlg  FPFLAGS                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA3    AARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA2    AARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA1    AARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA0    AARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fAexp  AEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB3    BARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB2    BARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB1    BARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB0    BARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fBexp  BEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fT1     TEMPB3                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fT0     TEMPB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW3     TEMPB1                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW2     TEMPB0                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW1     AARGB7                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW0     AARGB6                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fWexp   AARGB5                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fWexpHi AARGB4                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA0 AARGB0   ;msb                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA1 AARGB1                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA2 AARGB2                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA3 AARGB3   ;lsb                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_BIAS        equ      127    ; exponent bias                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_SMIN        equ     -149    ; min unbiased subnormal exponent                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_EMIN        equ     -126    ; min unbiased normal exponent                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_EMAX        equ      127    ; max unbiased normal exponent                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;; Flags for both A and B arguments                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_ZERO_A    0  ; A: is zero                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_INF_A     1  ; A: is infinity                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_SIGN_A    2  ; A: is negative                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_NaN_AorB  3  ; A or B is a NaN  (A or B)                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_ZERO_B    4  ; B: is zero                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_INF_B     5  ; B: is infinity                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_SIGN_B    6  ; B: is negative                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_SIGN_ABW  7  ; ABW: Sign (A xor B) or W                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Exchange macro Var0, Var1                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var0,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movff   Var1,Var0                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movwf   Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Clear4 macro Var0, Var1, Var2, Var3                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    Var2                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    Var3                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var << 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftL3C macro Var0,Var1,Var2                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var << 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftL4C macro Var0,Var1,Var2,Var3                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var << 1;      Logical shift                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftL4 macro Var0,Var1,Var2,Var3                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bcf     STATUS,C                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var >> 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftR2C macro Var0,Var1                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var >> 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftR3C macro Var0,Var1,Var2                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var >> 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftR4C macro Var0,Var1,Var2,Var3                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var++, C invalid                                                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Inc2 macro Var0,Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   infsnz  Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   incf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var++, C valid                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Inc3 macro Var0,Var1,Var2                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   incf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var++, C valid                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Inc4 macro Var0,Var1,Var2,Var3                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   incf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Decrement 2 bytes. WREG unchanged.                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Dec2 macro Var0, Var1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   decf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss   STATUS,C                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   decf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg2 macro Var0,Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg3 macro Var0,Var1,Var2                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg4 macro Var0,Var1,Var2,Var3                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg5 macro Var0,Var1,Var2,Var3,Var4                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var4,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var4,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add32 macro AVar0,AVar1,AVar2, BVar0,BVar1                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add41 macro AVar0,AVar1,AVar2,AVar3, BVar0                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add42 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add43 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add4 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2,BVar3                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar3,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub2 macro AVar0,AVar1, BVar0,BVar1                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub3 macro AVar0,AVar1,AVar2, BVar0,BVar1,BVar2                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub4 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2,BVar3                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar3,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub43 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; (PRODL,PRODH) = AVar*Bvar                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Mul2 macro AVar,BVar                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   mulwf   AVar                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;=============== R E L  B R A N C H E S ===================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if bit set                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braSet macro Var, Bit, jLabel                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0044b6   b44a     BTFSC     0x4a,0x2,0x0           btfsc   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0044ca   b04a     BTFSC     0x4a,0x0,0x0                                                                                    
0044b8   d003     BRA       0x44c0                 bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0044cc   d7fc     BRA       0x44c6                                                                                          
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if bit clear                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braClr macro Var, Bit, jLabel                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0044b2   a24a     BTFSS     0x4a,0x1,0x0           btfss   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0044e8   a44a     BTFSS     0x4a,0x2,0x0                                                                                    
0044ee   ae42     BTFSS     0x42,0x7,0x0                                                                                    
0044b4   d00a     BRA       0x44ca                 bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0044ea   d003     BRA       0x44f2                                                                                          
0044f0   d7ea     BRA       0x44c6                                                                                          
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var == 0.  WREG unchanged.                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFeqZ macro Var,jZero                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var,F                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bz      jZero                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var != 0.  WREG unchanged.                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFneZ macro Var,jNotZero                                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var,F                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bnz     jNotZero                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var == Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFeqL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0044da   0e86     MOVLW     0x86                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0044dc   5c43     SUBWF     0x43,0x0,0x0           subwf   Var,W                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0044de   e004     BZ        0x44e8                 bz      jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var != Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFneL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var,W                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bnz     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var <= Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFleL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0044d4   0e7e     MOVLW     0x7e                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0044d6   6443     CPFSGT    0x43,0x0               cpfsgt  Var                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0044d8   d7f6     BRA       0x44c6                 bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var >= Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFgeL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0044ce   0e87     MOVLW     0x87                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0044d0   6043     CPFSLT    0x43,0x0               cpfslt  Var                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0044d2   d7f1     BRA       0x44b6                 bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var1 == Var2                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFeqF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var1,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bz      jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var1 != Var2                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFneF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var1,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bnz     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFgeF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfslt  Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFleF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfsgt  Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFltF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var1,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss   STATUS,Z                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bc      jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;=============== A B S O L U T E    B R A N C H E S =======================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Go to if bit set                                                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoSet macro Var, Bit, jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0044ac   b64a     BTFSC     0x4a,0x3,0x0           btfsc   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0044ae   ef5d     GOTO      0x44ba                 goto     jLabel                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
0044b0   f022                                                                                                               
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Go to if bit clear                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoClr macro Var, Bit, jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto     jLabel                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Go to if F == Lit                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFeqL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw     Lit                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf     Var,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfsc     _Z                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto      jLabel                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;Go to if F != Lit                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFneL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw     Lit                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf     Var,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss     _Z                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto      jLabel                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;Go to if F >= Lit                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFgeL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     movlw     Lit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     cpfslt    Var                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     goto      jLabel                                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;Go to if F <= Lit                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFleL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     movlw     Lit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     cpfsgt    Var                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     goto      jLabel                                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ; INT3208:                                                                       C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ; Description:                                                                   C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;         Float to one byte integer conversion. Designed for both signed         C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;         and unsigned use.                                                      C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;         Results for special cases:                                             C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;         In                  Out                                                C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;         NaN                 0x7F                                               C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;         +Infinity           0x7F                                               C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;         -Infinity           0x80                                               C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;         255->128            0xFF=>0x80                                         C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;         <-128               0                                                  C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ; Input:                                                                         C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;         IEEE 754 format float fA                                               C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ; Output:                                                                        C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;         INT3208U: One byte signed integer in iA0                               C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;---------------------------------------------------------------------------------------------- C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                     GLOBAL INT3208                                                         C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                     EXTERN __FpUnPackA                                                     C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           PROG    CODE                                                                     C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           INT3208:                                                                         C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           ;------ Unpack the operand                                                       C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
0044a6   6a4a     CLRF      0x4a,0x0                 clrf      fFlg                                                         C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
0044a8   ecd2     CALL      0x45a4,0x0               call      __FpUnPackA                                                  C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
0044aa   f022                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                     gotoSet   fFlg,FLG_NaN_AorB,jMaxPos                                    C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                     braClr    fFlg,FLG_INF_A,jNotInf                                       C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           jMax:                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                     braSet    fFlg,FLG_SIGN_A,jMaxNeg                                      C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           jMaxPos:                                                                         C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
0044ba   0e7f     MOVLW     0x7f                     movlw     0x7F                                                         C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
0044bc   6e42     MOVWF     0x42,0x0                 movwf     fA0                                                          C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
0044be   d019     BRA       0x44f2                   bra       jExit                                                        C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           jMaxNeg:                                                                         C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
0044c0   0e80     MOVLW     0x80                     movlw     0x80                                                         C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
0044c2   6e42     MOVWF     0x42,0x0                 movwf     fA0                                                          C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
0044c4   d016     BRA       0x44f2                   bra       jExit                                                        C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           jZero:                                                                           C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
0044c6   6a42     CLRF      0x42,0x0                 clrf      fA0                                                          C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
0044c8   d014     BRA       0x44f2                   bra       jExit                                                        C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           jNotInf:                                                                         C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                     braSet    fFlg,FLG_ZERO_A,jZero                                        C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                     braFgeL   fAexp,0x87,jMax         ;; exponent too large                C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                     braFleL   fAexp,0x7E,jZero        ;; exponent too small                C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           jLoop:                                                                           C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                     braFeqL   fAexp,0x86,jLoopExit    ;; shift complete                    C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
0044e0   90d8     BCF       0xd8,0x0,0x0             bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
0044e2   3242     RRCF      0x42,0x1,0x0             rrcf      fA0,F                                                        C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
0044e4   2a43     INCF      0x43,0x1,0x0             incf      fAexp,F                                                      C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
0044e6   d7f9     BRA       0x44da                   bra       jLoop                                                        C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           jLoopExit:                                                                       C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                     braClr    fFlg,FLG_SIGN_A,jExit                                        C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
0044ec   6c42     NEGF      0x42,0x0                 negf      fA0                                                          C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                     braClr    fA0,7,jZero             ;; too large                         C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           jExit:                                                                           C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
0044f2   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                                     END                                                                    C:\MCC18\SRC\TRADIT~1\MATH\castFP08.asm
                                           #include <p18cxxx.h>                                                             C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                           #include <usart.h>                                                               C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                           #if defined(__18F6525) || defined(__18F6621) || \                                C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                               defined(__18F8525) || defined(__18F8621)                                     C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                           #define RC1IE RCIE                                                               C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                           #define TX1IE TXIE                                                               C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                           #endif                                                                           C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                           // USART1 Status Structure                                                       C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                           extern union USART1 USART1_Status;                                               C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                           /********************************************************************            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                           *    Function Name:  Open1USART                                      *           C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                           *    Return Value:   void                                           *            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                           *    Parameters:     config: bit definitions to configure USART1     *           C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                           *                    spbrg: baudrate value for register SPBRG1      *            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                           *    Description:    This routine first resets the USART1 regs       *           C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                           *                    to the POR state. It then configures the       *            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                           *                    USART1 for interrupts, synch/async, 8/9-bit,    *           C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                           *                    sync slave/master and single/cont. rx.         *            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                           *    Notes:          The bit definitions for config can be found    *            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                           *                    in the usart.h file.                           *            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                           ********************************************************************/            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
005fce   cfd9     MOVFF     0xfd9,0xfe6    void Open1USART( unsigned char config, char spbrg)                               C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
005fd0   ffe6                                                                                                               
005fd2   cfda     MOVFF     0xfda,0xfe6                                                                                     
005fd4   ffe6                                                                                                               
005fd6   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
005fd8   ffd9                                                                                                               
005fda   cfe2     MOVFF     0xfe2,0xfda                                                                                     
005fdc   ffda                                                                                                               
                                           {                                                                                C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
005fde   6aac     CLRF      0xac,0x0         TXSTA1 = 0;           // Reset USART registers to POR state                    C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
005fe0   6aab     CLRF      0xab,0x0         RCSTA1 = 0;                                                                    C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
005fe2   0efd     MOVLW     0xfd             if(config&0x01)      // Sync or async operation                                C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
005fe4   b0db     BTFSC     0xdb,0x0,0x0                                                                                    
005fe6   88ac     BSF       0xac,0x4,0x0       TXSTA1bits.SYNC = 1;                                                         C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
005fe8   a2db     BTFSS     0xdb,0x1,0x0     if(config&0x02)      // 8- or 9-bit mode                                       C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
005fea   d002     BRA       0x5ff0                                                                                          
                                             {                                                                              C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
005fec   8cac     BSF       0xac,0x6,0x0       TXSTA1bits.TX9 = 1;                                                          C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
005fee   8cab     BSF       0xab,0x6,0x0       RCSTA1bits.RX9 = 1;                                                          C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                             }                                                                              C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
005ff0   b4db     BTFSC     0xdb,0x2,0x0     if(config&0x04)      // Master or Slave (sync only)                            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
005ff2   8eac     BSF       0xac,0x7,0x0       TXSTA1bits.CSRC = 1;                                                         C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
005ff4   a6db     BTFSS     0xdb,0x3,0x0     if(config&0x08)      // Continuous or single reception                         C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
005ff6   d002     BRA       0x5ffc                                                                                          
005ff8   88ab     BSF       0xab,0x4,0x0       RCSTA1bits.CREN = 1;                                                         C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
005ffa   d001     BRA       0x5ffe           else                                                                           C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
005ffc   8aab     BSF       0xab,0x5,0x0       RCSTA1bits.SREN = 1;                                                         C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
005ffe   a8db     BTFSS     0xdb,0x4,0x0     if(config&0x10)      // Baud rate select (asychronous mode only)               C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
006000   d002     BRA       0x6006                                                                                          
006002   84ac     BSF       0xac,0x2,0x0       TXSTA1bits.BRGH = 1;                                                         C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
006004   d001     BRA       0x6008           else                                                                           C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
006006   94ac     BCF       0xac,0x2,0x0       TXSTA1bits.BRGH = 0;                                                         C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
006008   acdb     BTFSS     0xdb,0x6,0x0     if(config&0x40)      // Interrupt on receipt                                   C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
00600a   d002     BRA       0x6010                                                                                          
00600c   8a9d     BSF       0x9d,0x5,0x0       PIE1bits.RC1IE = 1;                                                          C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
00600e   d001     BRA       0x6012           else                                                                           C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
006010   9a9d     BCF       0x9d,0x5,0x0       PIE1bits.RC1IE = 0;                                                          C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
006012   aedb     BTFSS     0xdb,0x7,0x0     if(config&0x80)      // Interrupt on transmission                              C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
006014   d002     BRA       0x601a                                                                                          
006016   889d     BSF       0x9d,0x4,0x0       PIE1bits.TX1IE = 1;                                                          C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
006018   d001     BRA       0x601c           else                                                                           C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
00601a   989d     BCF       0x9d,0x4,0x0       PIE1bits.TX1IE = 0;                                                          C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
00601c   0efc     MOVLW     0xfc             SPBRG1 = spbrg;       // Write baudrate to SPBRG1                              C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
00601e   50db     MOVF      0xdb,0x0,0x0                                                                                    
006020   6eaf     MOVWF     0xaf,0x0                                                                                        
006022   8aac     BSF       0xac,0x5,0x0     TXSTA1bits.TXEN = 1;  // Enable transmitter                                    C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
006024   8eab     BSF       0xab,0x7,0x0     RCSTA1bits.SPEN = 1;  // Enable receiver                                       C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
006026   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\mcc18\src\TRADIT~1\pmc\USART\u1open.c
006028   cfe5     MOVFF     0xfe5,0xfda                                                                                     
00602a   ffda                                                                                                               
00602c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00602e   ffd9                                                                                                               
006030   0012     RETURN    0x0                                                                                             
                                           /* $Id: adcopen.c,v 1.2 2004/02/10 22:11:33 sealep Exp $ */                      C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           #include <p18cxxx.h>                                                             C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           #include <adc.h>                                                                 C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           /********************************************************************            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           *    Function Name:  OpenADC                                        *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           *    Return Value:   void                                           *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           *    Parameters:     config: bit definitions to configure A/D       *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           *                    channel: channel selection                     *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           *    Description:    This routine first resets the A/D registers    *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           *                    to the POR state and then configures the       *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           *                    A/D clock, interrupt, justification, vref      *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           *                    source, and I/O.  It also sets the channel.    *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           *    Notes:          The bit definitions for config and channel     *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           *                    can be found in the adc16.h file.              *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           ********************************************************************/            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           #if !defined(ADC_INTERFACE_OLD) && \                                             C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                               !defined(__18C601)  && !defined(__18C801)  && \                              C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                               !defined(__18C658)  && !defined(__18C858)  && \                              C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                               !defined(__18F6520) && !defined(__18F6620) && !defined(__18F6720) && \       C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                               !defined(__18F8520) && !defined(__18F8620) && !defined(__18F8720)            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005e9a   cfd9     MOVFF     0xfd9,0xfe6    void OpenADC( unsigned char config,                                              C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005e9c   ffe6                                                                                                               
005e9e   cfda     MOVFF     0xfda,0xfe6                                                                                     
005ea0   ffe6                                                                                                               
005ea2   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
005ea4   ffd9                                                                                                               
005ea6   cfe2     MOVFF     0xfe2,0xfda                                                                                     
005ea8   ffda                                                                                                               
                                                         unsigned char config2,                                             C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                                         unsigned char portconfig)                                          C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           {                                                                                C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                               // Reset A/D Registers to POR state                                          C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005eaa   6ac2     CLRF      0xc2,0x0           ADCON0 = 0;                                                                  C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005eac   6ac1     CLRF      0xc1,0x0           ADCON1 = 0;                                                                  C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005eae   6ac0     CLRF      0xc0,0x0           ADCON2 = 0;                                                                  C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005eb0   0efc     MOVLW     0xfc               ADCON0 = (config2 >> 1) & 0b00111100;     // Analog channel selection        C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005eb2   40db     RRNCF     0xdb,0x0,0x0                                                                                    
005eb4   0b7f     ANDLW     0x7f                                                                                            
005eb6   0b3c     ANDLW     0x3c                                                                                            
005eb8   6ec2     MOVWF     0xc2,0x0                                                                                        
005eba   0efb     MOVLW     0xfb               ADCON1 = portconfig;                      // Port configuration              C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005ebc   50db     MOVF      0xdb,0x0,0x0                                                                                    
005ebe   6ec1     MOVWF     0xc1,0x0                                                                                        
                                           #if defined(__18F1220) || defined(__18F1320)                                     C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                               ADCON0 |= (config2 << 6) & 0b11000000;    // Voltage reference configuration C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           #else                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005ec0   0efc     MOVLW     0xfc               ADCON1 |= (config2 << 4) & 0b00110000;    // Voltage reference configuration C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005ec2   38db     SWAPF     0xdb,0x0,0x0                                                                                    
005ec4   0bf0     ANDLW     0xf0                                                                                            
005ec6   0b30     ANDLW     0x30                                                                                            
005ec8   12c1     IORWF     0xc1,0x1,0x0                                                                                    
                                           #endif                                                                           C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005eca   0efd     MOVLW     0xfd               ADCON2 = config & 0b10000000;             // Result format                   C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005ecc   50db     MOVF      0xdb,0x0,0x0                                                                                    
005ece   0b80     ANDLW     0x80                                                                                            
005ed0   6ec0     MOVWF     0xc0,0x0                                                                                        
005ed2   0efd     MOVLW     0xfd               ADCON2 |= (config >> 4) & 0b00000111;     // Conversion clock select         C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005ed4   38db     SWAPF     0xdb,0x0,0x0                                                                                    
005ed6   0b0f     ANDLW     0xf                                                                                             
005ed8   0b07     ANDLW     0x7                                                                                             
005eda   12c0     IORWF     0xc0,0x1,0x0                                                                                    
005edc   0efd     MOVLW     0xfd               ADCON2 |= (config << 2) & 0b00111000;     // Acquisition time select         C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005ede   50db     MOVF      0xdb,0x0,0x0                                                                                    
005ee0   0d04     MULLW     0x4                                                                                             
005ee2   50f3     MOVF      0xf3,0x0,0x0                                                                                    
005ee4   0b38     ANDLW     0x38                                                                                            
005ee6   12c0     IORWF     0xc0,0x1,0x0                                                                                    
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005ee8   0efc     MOVLW     0xfc               if( config2 & 0b10000000 )   // Test the interrupt on/off                    C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005eea   aedb     BTFSS     0xdb,0x7,0x0                                                                                    
005eec   d003     BRA       0x5ef4                                                                                          
                                               {                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005eee   9c9e     BCF       0x9e,0x6,0x0         PIR1bits.ADIF = 0;         // Clear the A/D interrupt flag                 C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005ef0   8c9d     BSF       0x9d,0x6,0x0         PIE1bits.ADIE = 1;         // Enable the A/D interrupt                     C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005ef2   8cf2     BSF       0xf2,0x6,0x0         INTCONbits.PEIE = 1;       // Enable peripheral interrupts                 C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                               }                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005ef4   80c2     BSF       0xc2,0x0,0x0       ADCON0bits.ADON = 1;         // Enable the A/D                               C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005ef6   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
005ef8   cfe5     MOVFF     0xfe5,0xfda                                                                                     
005efa   ffda                                                                                                               
005efc   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
005efe   ffd9                                                                                                               
005f00   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           #else                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           void OpenADC( unsigned char config, unsigned char config2)                       C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           {                                                                                C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                             // Reset A/D Registers to POR state                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                             ADCON0 = 0;                                                                    C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                             ADCON1 = 0;                                                                    C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           #ifndef ADC_INTERFACE_OLD                                                        C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                             ADCON2 = 0;                                                                    C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           #endif                                                                           C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                             // Configure ADCON registers as per config selections                          C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           #ifdef ADC_INTERFACE_OLD                                                         C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                             ADCON1 = config;             // Set the A/D clock source                       C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                             ADCON0 = (config<<2) & 0xC0; // Set the I/O selection                          C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                             ADCON0 |= config2 &0x3f;     // Set the channel mask out the interrupt bit.    C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           #else // New ADC interface                                                       C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                             ADCON0 = (config2 >> 1) & 0b00111100;    // Analog channel selection           C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                             ADCON1 = ((config2 << 4) & 0b00110000) | // Voltage reference configuration    C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                                      (config & 0b00001111);          // Port configuration                 C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                             ADCON2 = (config & 0b10000000) |         // Result format                      C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                                      ((config >> 4) & 0b00000111);   // Conversion clock select            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           #endif                                                                           C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                             if( config2 & 0b10000000 )   // Test the interrupt on/off                      C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                             {                                                                              C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                               PIR1bits.ADIF = 0;         // Clear the A/D interrupt flag                   C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                               PIE1bits.ADIE = 1;         // Enable the A/D interrupt                       C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                               INTCONbits.PEIE = 1;       // Enable peripheral interrupts                   C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                             }                                                                              C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                             ADCON0bits.ADON = 1;         // Enable the A/D                                 C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           }                                                                                C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           #endif                                                                           C:\mcc18\src\TRADIT~1\pmc\ADC\adcopen.c
                                           /* $Id:  */                                                                      C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                           #include <p18cxxx.h>                                                             C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                           #include <spi.h>                                                                 C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                           /********************************************************************            C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                           *   Function Name:  OpenSPI1                                        *            C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                           *   Return Value:   void                                            *            C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                           *   Parameters:     SSP1 peripheral setup bytes                     *            C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                           *   Description:    This function sets up the SSP1 module on a      *            C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                           *                   PIC18Cxxx device for use with a Microchip SPI   *            C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                           *                   EEPROM device or SPI bus device.                *            C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                           ********************************************************************/            C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005f68   cfd9     MOVFF     0xfd9,0xfe6    void OpenSPI1( unsigned char sync_mode, unsigned char bus_mode, unsigned char smp_phase) C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005f6a   ffe6                                                                                                               
005f6c   cfda     MOVFF     0xfda,0xfe6                                                                                     
005f6e   ffe6                                                                                                               
005f70   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
005f72   ffd9                                                                                                               
005f74   cfe2     MOVFF     0xfe2,0xfda                                                                                     
005f76   ffda                                                                                                               
                                           {                                                                                C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005f78   0e3f     MOVLW     0x3f             SSP1STAT &= 0x3F;               // power on state                              C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005f7a   16c7     ANDWF     0xc7,0x1,0x0                                                                                    
005f7c   6ac6     CLRF      0xc6,0x0         SSP1CON1 = 0x00;                // power on state                              C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005f7e   0efd     MOVLW     0xfd             SSP1CON1 |= sync_mode;          // select serial mode                          C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005f80   50db     MOVF      0xdb,0x0,0x0                                                                                    
005f82   12c6     IORWF     0xc6,0x1,0x0                                                                                    
005f84   0efb     MOVLW     0xfb             SSP1STAT |= smp_phase;          // select data input sample phase              C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005f86   50db     MOVF      0xdb,0x0,0x0                                                                                    
005f88   12c7     IORWF     0xc7,0x1,0x0                                                                                    
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005f8a   0efc     MOVLW     0xfc             switch( bus_mode )                                                             C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005f8c   50db     MOVF      0xdb,0x0,0x0                                                                                    
005f8e   0a03     XORLW     0x3                                                                                             
005f90   e009     BZ        0x5fa4                                                                                          
005f92   0a01     XORLW     0x1                                                                                             
005f94   e004     BZ        0x5f9e                                                                                          
005f96   0a02     XORLW     0x2                                                                                             
005f98   e106     BNZ       0x5fa6                                                                                          
                                             {                                                                              C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                               case 0:                       // SPI1 bus mode 0,0                           C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005f9a   8cc7     BSF       0xc7,0x6,0x0         SSP1STATbits.CKE = 1;       // data transmitted on rising edge             C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005f9c   d004     BRA       0x5fa6               break;                                                                     C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                               case 2:                       // SPI1 bus mode 1,0                           C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005f9e   8cc7     BSF       0xc7,0x6,0x0         SSP1STATbits.CKE = 1;       // data transmitted on falling edge            C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005fa0   88c6     BSF       0xc6,0x4,0x0         SSP1CON1bits.CKP = 1;       // clock idle state high                       C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005fa2   d001     BRA       0x5fa6               break;                                                                     C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                               case 3:                       // SPI1 bus mode 1,1                           C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005fa4   88c6     BSF       0xc6,0x4,0x0         SSP1CON1bits.CKP = 1;       // clock idle state high                       C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                                 break;                                                                     C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                               default:                      // default SPI1 bus mode 0,1                   C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                                 break;                                                                     C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                             }                                                                              C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005fa6   0efd     MOVLW     0xfd             switch( sync_mode )                                                            C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005fa8   50db     MOVF      0xdb,0x0,0x0                                                                                    
005faa   0a05     XORLW     0x5                                                                                             
005fac   e003     BZ        0x5fb4                                                                                          
005fae   0a01     XORLW     0x1                                                                                             
005fb0   e104     BNZ       0x5fba                                                                                          
                                             {                                                                              C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                               case 4:                       // slave mode w /SS enable                     C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005fb2   8e97     BSF       0x97,0x7,0x0         TRISFbits.TRISF7 = 1;       // define /SS pin as input                     C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                               case 5:                       // slave mode w/o /SS enable                   C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005fb4   8694     BSF       0x94,0x3,0x0         TRISCbits.TRISC3 = 1;       // define clock pin as input                   C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005fb6   9ec7     BCF       0xc7,0x7,0x0         SSP1STATbits.SMP = 0;       // must be cleared in slave SPI mode           C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005fb8   d001     BRA       0x5fbc               break;                                                                     C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                               default:                      // master mode, define clock pin as output     C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005fba   9694     BCF       0x94,0x3,0x0         TRISCbits.TRISC3 = 0;       // define clock pin as output                  C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                                 break;                                                                     C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                             }                                                                              C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005fbc   9a94     BCF       0x94,0x5,0x0     TRISC &= 0xDF;                  // define SDO as output (master or slave)      C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005fbe   8894     BSF       0x94,0x4,0x0     TRISC |= 0x10;                  // define SDI as input (master or slave)       C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005fc0   8ac6     BSF       0xc6,0x5,0x0     SSP1CON1 |= SSPENB;             // enable synchronous serial port              C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005fc2   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\mcc18\src\TRADIT~1\pmc\SPI\spi1open.c
005fc4   cfe5     MOVFF     0xfe5,0xfda                                                                                     
005fc6   ffda                                                                                                               
005fc8   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
005fca   ffd9                                                                                                               
005fcc   0012     RETURN    0x0                                                                                             
                                           /* $Id: adcread.c,v 1.1 2003/12/09 22:52:09 GrosbaJ Exp $ */                     C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
                                           #include <p18cxxx.h>                                                             C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
                                           #include <adc.h>                                                                 C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
                                           /********************************************************************            C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
                                           *    Function Name:  ReadADC                                        *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
                                           *    Return Value:   int, A/D result                                *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
                                           *    Parameters:     void                                           *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
                                           *    Description:    This routine reads the ADRESL and ADRESH       *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
                                           *                    and returns these as a long.                   *            C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
                                           ********************************************************************/            C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
00607a   cfd9     MOVFF     0xfd9,0xfe6    int ReadADC(void)                                                                C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
00607c   ffe6                                                                                                               
00607e   cfda     MOVFF     0xfda,0xfe6                                                                                     
006080   ffe6                                                                                                               
006082   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
006084   ffd9                                                                                                               
006086   cfe2     MOVFF     0xfe2,0xfda                                                                                     
006088   ffda                                                                                                               
00608a   52e6     MOVF      0xe6,0x1,0x0                                                                                    
00608c   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
                                             union ADCResult i; // A union is used to read the                              C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
                                                                // A/D result due to issues with                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
                                                                // handling long variables                                  C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
00608e   50c3     MOVF      0xc3,0x0,0x0     i.br[0] = ADRESL;  // Read ADRESL into the lower byte                          C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
006090   6edf     MOVWF     0xdf,0x0                                                                                        
006092   0e01     MOVLW     0x1              i.br[1] = ADRESH;  // Read ADRESH into the high byte                           C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
006094   cfc4     MOVFF     0xfc4,0xfdb                                                                                     
006096   ffdb                                                                                                               
                                                                                                                            C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
006098   cfde     MOVFF     0xfde,0x0        return (i.lr);     // Return the long variable                                 C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
00609a   f000                                                                                                               
00609c   cfdd     MOVFF     0xfdd,0x1                                                                                       
00609e   f001                                                                                                               
0060a0   c000     MOVFF     0x0,0xff3                                                                                       
0060a2   fff3                                                                                                               
0060a4   c001     MOVFF     0x1,0xff4                                                                                       
0060a6   fff4                                                                                                               
0060a8   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\mcc18\src\TRADIT~1\pmc\ADC\adcread.c
0060aa   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0060ac   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0060ae   cfe5     MOVFF     0xfe5,0xfda                                                                                     
0060b0   ffda                                                                                                               
0060b2   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0060b4   ffd9                                                                                                               
0060b6   0012     RETURN    0x0                                                                                             
                                           ;	RCS Header $Id: temparg.asm,v 1.2 2004/10/01 19:13:23 GrosbaJ Exp $            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           TEMPB3		RES 1                                                                    C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           TEMPB2		RES 1                                                                    C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           TEMPB1		RES 1                                                                    C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           TEMP                                                                             C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           TEMPB0		RES 1       ; temporary storage                                          C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                   GLOBAL  TEMPB3, TEMPB2, TEMPB1, TEMPB0, TEMP                             C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           #include <P18CXXX.INC>           ; general Golden Gate definitions               C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Version 1.00   Microchip Technology, Inc.   C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F64J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F84J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                           #include "fpmacros.inc"                                                          C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;******************************************************************************  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ; Macros, constants, defines and variable externs used by float routines.        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;******************************************************************************  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;        radix dec                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;; Uses traditional global names                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN FPFLAGS                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB7                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB6                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB5                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB4                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fFlg  FPFLAGS                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA3    AARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA2    AARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA1    AARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA0    AARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fAexp  AEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB3    BARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB2    BARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB1    BARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB0    BARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fBexp  BEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fT1     TEMPB3                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fT0     TEMPB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW3     TEMPB1                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW2     TEMPB0                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW1     AARGB7                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW0     AARGB6                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fWexp   AARGB5                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fWexpHi AARGB4                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA0 AARGB0   ;msb                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA1 AARGB1                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA2 AARGB2                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA3 AARGB3   ;lsb                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_BIAS        equ      127    ; exponent bias                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_SMIN        equ     -149    ; min unbiased subnormal exponent                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_EMIN        equ     -126    ; min unbiased normal exponent                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_EMAX        equ      127    ; max unbiased normal exponent                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;; Flags for both A and B arguments                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_ZERO_A    0  ; A: is zero                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_INF_A     1  ; A: is infinity                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_SIGN_A    2  ; A: is negative                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_NaN_AorB  3  ; A or B is a NaN  (A or B)                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_ZERO_B    4  ; B: is zero                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_INF_B     5  ; B: is infinity                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_SIGN_B    6  ; B: is negative                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_SIGN_ABW  7  ; ABW: Sign (A xor B) or W                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Exchange macro Var0, Var1                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var0,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movff   Var1,Var0                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movwf   Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Clear4 macro Var0, Var1, Var2, Var3                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    Var2                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    Var3                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var << 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftL3C macro Var0,Var1,Var2                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var << 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftL4C macro Var0,Var1,Var2,Var3                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004546   364d     RLCF      0x4d,0x1,0x0           rlcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004548   364e     RLCF      0x4e,0x1,0x0           rlcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00454a   363b     RLCF      0x3b,0x1,0x0           rlcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00454c   363c     RLCF      0x3c,0x1,0x0           rlcf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var << 1;      Logical shift                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftL4 macro Var0,Var1,Var2,Var3                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bcf     STATUS,C                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var >> 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftR2C macro Var0,Var1                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var >> 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftR3C macro Var0,Var1,Var2                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004578   323c     RRCF      0x3c,0x1,0x0           rrcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00457a   323b     RRCF      0x3b,0x1,0x0           rrcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00457c   324e     RRCF      0x4e,0x1,0x0           rrcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var >> 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftR4C macro Var0,Var1,Var2,Var3                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var++, C invalid                                                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Inc2 macro Var0,Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   infsnz  Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   incf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var++, C valid                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Inc3 macro Var0,Var1,Var2                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00456c   2a4e     INCF      0x4e,0x1,0x0           incf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00456e   6ae8     CLRF      0xe8,0x0               clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004570   223b     ADDWFC    0x3b,0x1,0x0           addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004572   223c     ADDWFC    0x3c,0x1,0x0           addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var++, C valid                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Inc4 macro Var0,Var1,Var2,Var3                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   incf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Decrement 2 bytes. WREG unchanged.                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Dec2 macro Var0, Var1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00454e   063d     DECF      0x3d,0x1,0x0           decf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004550   a0d8     BTFSS     0xd8,0x0,0x0           btfss   STATUS,C                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004552   063e     DECF      0x3e,0x1,0x0           decf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg2 macro Var0,Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg3 macro Var0,Var1,Var2                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg4 macro Var0,Var1,Var2,Var3                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg5 macro Var0,Var1,Var2,Var3,Var4                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var4,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var4,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add32 macro AVar0,AVar1,AVar2, BVar0,BVar1                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add41 macro AVar0,AVar1,AVar2,AVar3, BVar0                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add42 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add43 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add4 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2,BVar3                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar3,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub2 macro AVar0,AVar1, BVar0,BVar1                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub3 macro AVar0,AVar1,AVar2, BVar0,BVar1,BVar2                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub4 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2,BVar3                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar3,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub43 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; (PRODL,PRODH) = AVar*Bvar                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Mul2 macro AVar,BVar                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   mulwf   AVar                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;=============== R E L  B R A N C H E S ===================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if bit set                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braSet macro Var, Bit, jLabel                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004536   be3e     BTFSC     0x3e,0x7,0x0           btfsc   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00453a   be3c     BTFSC     0x3c,0x7,0x0                                                                                    
004538   d7f0     BRA       0x451a                 bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00453c   d00c     BRA       0x4556                                                                                          
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if bit clear                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braClr macro Var, Bit, jLabel                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00451a   ae4a     BTFSS     0x4a,0x7,0x0           btfss   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
00455e   ae4d     BTFSS     0x4d,0x7,0x0                                                                                    
004568   a04e     BTFSS     0x4e,0x0,0x0                                                                                    
00451c   d004     BRA       0x4526                 bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
004560   d011     BRA       0x4584                                                                                          
00456a   d00c     BRA       0x4584                                                                                          
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var == 0.  WREG unchanged.                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFeqZ macro Var,jZero                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var,F                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bz      jZero                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var != 0.  WREG unchanged.                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFneZ macro Var,jNotZero                                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var,F                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bnz     jNotZero                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var == Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFeqL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var,W                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bz      jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var != Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFneL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var,W                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bnz     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var <= Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFleL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfsgt  Var                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var >= Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFgeL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfslt  Var                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var1 == Var2                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFeqF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var1,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bz      jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var1 != Var2                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFneF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var1,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bnz     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFgeF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfslt  Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFleF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfsgt  Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFltF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var1,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss   STATUS,Z                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bc      jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;=============== A B S O L U T E    B R A N C H E S =======================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Go to if bit set                                                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoSet macro Var, Bit, jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfsc   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto     jLabel                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Go to if bit clear                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoClr macro Var, Bit, jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto     jLabel                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Go to if F == Lit                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFeqL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw     Lit                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf     Var,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfsc     _Z                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto      jLabel                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;Go to if F != Lit                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFneL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw     Lit                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf     Var,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss     _Z                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto      jLabel                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;Go to if F >= Lit                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFgeL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     movlw     Lit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     cpfslt    Var                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     goto      jLabel                                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;Go to if F <= Lit                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFleL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     movlw     Lit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     cpfsgt    Var                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     goto      jLabel                                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     GLOBAL __FpPack                                                        C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     GLOBAL __FpReturnW                                                     C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     GLOBAL __FpReturnNaN                                                   C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     GLOBAL __FpReturnPosZero,__FpReturnNegZero,__FpReturnSignZero          C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     GLOBAL __FpReturnPosInf, __FpReturnNegInf, __FpReturnSignInf           C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     GLOBAL __FpExit                                                        C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           PROG    CODE                                                                     C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;***********************************************************************         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;************ C O M M O M    E N T R I E S *****************************         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;***********************************************************************         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           __FpReturnNaN:                                                                   C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     ;; return NaN                                                          C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
0044f4   0e7f     MOVLW     0x7f                     movlw     0x7F                                                         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
0044f6   6e43     MOVWF     0x43,0x0                 movwf     fAexp                                                        C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
0044f8   0eff     MOVLW     0xff                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
0044fa   6e42     MOVWF     0x42,0x0                 movwf     fA0                                                          C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
0044fc   6e41     MOVWF     0x41,0x0                 movwf     fA1                                                          C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
0044fe   6e40     MOVWF     0x40,0x0                 movwf     fA2                                                          C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           __FpExit:                                                                        C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004500   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           __FpReturnSignInf:                                                               C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     ;; return infinite with sign in FLG_SIGN_ABW                           C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004502   0e7f     MOVLW     0x7f                     movlw     0x7F                                                         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004504   be4a     BTFSC     0x4a,0x7,0x0             btfsc     fFlg,FLG_SIGN_ABW                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           __FpReturnNegInf:            ;; return negative infinite                         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004506   0eff     MOVLW     0xff                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004508   6e43     MOVWF     0x43,0x0                 movwf     fAexp                                                        C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
00450a   d002     BRA       0x4510                   bra       jReturnPosInf0                                               C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           __FpReturnPosInf:                                                                C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     ;; return positive infinite                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
00450c   0e7f     MOVLW     0x7f                     movlw     0x7F                                                         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
00450e   6e43     MOVWF     0x43,0x0                 movwf     fAexp                                                        C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           jReturnPosInf0:                                                                  C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004510   0e80     MOVLW     0x80                     movlw     0x80                                                         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004512   6e42     MOVWF     0x42,0x0                 movwf     fA0                                                          C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           jZero1and2:                                                                      C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004514   6a41     CLRF      0x41,0x0                 clrf      fA1                                                          C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004516   6a40     CLRF      0x40,0x0                 clrf      fA2                                                          C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004518   d7f3     BRA       0x4500                   bra       __FpExit                                                     C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           __FpReturnSignZero:                                                              C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     ;; return Zero with sign in FLG_SIGN_ABW                               C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     braClr    fFlg,FLG_SIGN_ABW,__FpReturnPosZero                          C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           __FpReturnNegZero:                                                               C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
00451e   0e80     MOVLW     0x80                     movlw     0x80                                                         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004520   6e43     MOVWF     0x43,0x0                 movwf     fAexp                                                        C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004522   6a42     CLRF      0x42,0x0                 clrf      fA0                                                          C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004524   d7f7     BRA       0x4514                   bra       jZero1and2                                                   C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           __FpReturnPosZero:                                                               C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     ;; return zero                                                         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004526   6a43     CLRF      0x43,0x0                 clrf      fAexp                                                        C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004528   6a42     CLRF      0x42,0x0                 clrf      fA0                                                          C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
00452a   d7f4     BRA       0x4514                   bra       jZero1and2                                                   C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;***********************************************************************         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;***********************************************************************         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;-----------------------------------------------------------------------;        C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ; __Fppack:                                                                      C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ; Description:                                                                   C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;       Rounds and packs a float                                                 C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ; Input:                                                                         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;       Assumes significant, round bit and sticky bits in fW0 -> fW3.            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;       Biased exponent in fWexp,fWexpHi.                                        C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;       Exponent must be adjusted for significant left-justified in fW0.         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;       Sign in FLAG_SIGN_ABW.                                                   C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ; Output:                                                                        C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;       Packed, signed float in fAexp...fA2                                      C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ; Notes:                                                                         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           ;---------------------------------------------------------------------------------------------- C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           __FpPack                                                                         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
00452c   503c     MOVF      0x3c,0x0,0x0             movf      fW0,W                                                        C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
00452e   103b     IORWF     0x3b,0x0,0x0             iorwf     fW1,W                                                        C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004530   104e     IORWF     0x4e,0x0,0x0             iorwf     fW2,W                                                        C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004532   104d     IORWF     0x4d,0x0,0x0             iorwf     fW3,W                                                        C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004534   e0f8     BZ        0x4526                   bz        __FpReturnPosZero             ;; Pure zero                   C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     braSet    fWexpHi,7,__FpReturnSignZero  ;; Subnormal. Treat as signed zero C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           jPkLoop:                                                                         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     braSet    fW0,7,jPkShiftDone            ;; Significant left-justified  C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     ;; if( fWexp == 0 && fWexpHi == 0 )goto __FpReturnZero;                C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
00453e   503d     MOVF      0x3d,0x0,0x0             movf      fWexp,W                                                      C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004540   103e     IORWF     0x3e,0x0,0x0             iorwf     fWexpHi,W                                                    C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004542   e0eb     BZ        0x451a                   bz        __FpReturnSignZero            ;; Subnormal                   C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004544   90d8     BCF       0xd8,0x0,0x0             bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     ShiftL4C  fW3,fW2,fW1,fW0                                              C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     Dec2      fWexp,fWexpHi                 ;; corrected exponent          C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004554   d7f2     BRA       0x453a                   bra       jPkLoop                                                      C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           jPkShiftDone:                                                                    C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     ;; if( fWexpHi ) goto __FpReturnSignInf                                C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004556   503e     MOVF      0x3e,0x0,0x0             movf      fWexpHi,W                                                    C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004558   e1d4     BNZ       0x4502                   bnz       __FpReturnSignInf                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     ;; if( fWexp == 0xFF ) goto __FpReturnSignInf                          C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
00455a   283d     INCF      0x3d,0x0,0x0             incf      fWexp,W                                                      C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
00455c   e0d2     BZ        0x4502                   bz        __FpReturnSignInf                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     ;;------ Round up if (round && (sticky || (significand & 1)))          C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     ;; if( !(fW3 & 0x80)) goto jPkRoundDone;                               C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     braClr    fW3,7,jPkRoundDone  ;; No rounding required ...              C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     ;; if(  fW3 & 0x7F)   goto jPkRoundIt;                                 C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004562   0e7f     MOVLW     0x7f                     movlw     0x7F                                                         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004564   144d     ANDWF     0x4d,0x0,0x0             andwf     fW3,W                                                        C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004566   e102     BNZ       0x456c                   bnz       jPkRoundIt          ;; Rounding required ...                 C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     ;; if( !(fW2 & 0x01)) goto jPkRoundDone;                               C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     braClr    fW2,0,jPkRoundDone  ;; No rounding required ...              C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           jPkRoundIt:                                                                      C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     ;; ---------- Do Rounding ----------------                             C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     Inc3      fW2,fW1,fW0         ;; Significand++                         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004574   e307     BNC       0x4584                   bnc       jPkRoundDone        ;; No need to adjust exponent            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     ;; Renormalize                                                         C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004576   80d8     BSF       0xd8,0x0,0x0             bsf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     ShiftR3C  fW2,fW1,fW0                                                  C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
00457e   2a3d     INCF      0x3d,0x1,0x0             incf      fWexp,F                                                      C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     ;; if( fWexp == 0xFF ) goto __FpReturnSignInf                          C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004580   283d     INCF      0x3d,0x0,0x0             incf      fWexp,W                                                      C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004582   e0bf     BZ        0x4502                   bz        __FpReturnSignInf                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           jPkRoundDone:                                                                    C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           __FpReturnW:                                                                     C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004584   503d     MOVF      0x3d,0x0,0x0             movf      fWexp,W                                                      C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004586   e0c9     BZ        0x451a                   bz        __FpReturnSignZero            ;; Subnormal                   C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004588   c04e     MOVFF     0x4e,0x40                movff     fW2,fA2                                                      C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
00458a   f040                                                                                                               
00458c   c03b     MOVFF     0x3b,0x41                movff     fW1,fA1                                                      C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
00458e   f041                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004590   343c     RLCF      0x3c,0x0,0x0             rlcf      fW0,W                                                        C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004592   6e42     MOVWF     0x42,0x0                 movwf     fA0                                                          C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004594   303d     RRCF      0x3d,0x0,0x0             rrcf      fWexp,W                                                      C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004596   6e43     MOVWF     0x43,0x0                 movwf     fAexp                                                        C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
004598   3242     RRCF      0x42,0x1,0x0             rrcf      fA0,F                                                        C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
00459a   9e43     BCF       0x43,0x7,0x0             bcf       fAexp,7                                                      C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
00459c   be4a     BTFSC     0x4a,0x7,0x0             btfsc     fFlg,FLG_SIGN_ABW                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
00459e   8e43     BSF       0x43,0x7,0x0             bsf       fAexp,7                                                      C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
0045a0   ef80     GOTO      0x4500                   goto      __FpExit                                                     C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
0045a2   f022                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                     END                                                                    C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\packFP.asm
                                           #include <P18CXXX.INC>           ; general Golden Gate definitions               C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Version 1.00   Microchip Technology, Inc.   C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F64J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F84J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                           #include "fpmacros.inc"                                                          C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;******************************************************************************  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ; Macros, constants, defines and variable externs used by float routines.        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;******************************************************************************  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;        radix dec                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;; Uses traditional global names                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN FPFLAGS                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN BEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN TEMPB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB7                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB6                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB5                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   EXTERN AARGB4                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fFlg  FPFLAGS                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA3    AARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA2    AARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA1    AARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fA0    AARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fAexp  AEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB3    BARGB3                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB2    BARGB2                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB1    BARGB1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fB0    BARGB0                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fBexp  BEXP                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fT1     TEMPB3                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fT0     TEMPB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW3     TEMPB1                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW2     TEMPB0                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW1     AARGB7                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fW0     AARGB6                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fWexp   AARGB5                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define fWexpHi AARGB4                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA0 AARGB0   ;msb                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA1 AARGB1                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA2 AARGB2                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define iA3 AARGB3   ;lsb                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_BIAS        equ      127    ; exponent bias                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_SMIN        equ     -149    ; min unbiased subnormal exponent                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_EMIN        equ     -126    ; min unbiased normal exponent                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           FLT_EMAX        equ      127    ; max unbiased normal exponent                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;; Flags for both A and B arguments                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_ZERO_A    0  ; A: is zero                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_INF_A     1  ; A: is infinity                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_SIGN_A    2  ; A: is negative                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_NaN_AorB  3  ; A or B is a NaN  (A or B)                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_ZERO_B    4  ; B: is zero                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_INF_B     5  ; B: is infinity                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_SIGN_B    6  ; B: is negative                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           #define FLG_SIGN_ABW  7  ; ABW: Sign (A xor B) or W                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Exchange macro Var0, Var1                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var0,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movff   Var1,Var0                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movwf   Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Clear4 macro Var0, Var1, Var2, Var3                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    Var2                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    Var3                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var << 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftL3C macro Var0,Var1,Var2                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var << 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftL4C macro Var0,Var1,Var2,Var3                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var << 1;      Logical shift                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftL4 macro Var0,Var1,Var2,Var3                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bcf     STATUS,C                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rlcf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var >> 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftR2C macro Var0,Var1                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var >> 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftR3C macro Var0,Var1,Var2                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = Var >> 1;      Must initialize _C                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ShiftR4C macro Var0,Var1,Var2,Var3                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   rrcf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var++, C invalid                                                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Inc2 macro Var0,Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   infsnz  Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   incf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var++, C valid                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Inc3 macro Var0,Var1,Var2                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   incf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var++, C valid                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Inc4 macro Var0,Var1,Var2,Var3                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   incf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Decrement 2 bytes. WREG unchanged.                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Dec2 macro Var0, Var1                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   decf    Var0,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss   STATUS,C                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   decf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg2 macro Var0,Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg3 macro Var0,Var1,Var2                                                        C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg4 macro Var0,Var1,Var2,Var3                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Var = -Var                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Neg5 macro Var0,Var1,Var2,Var3,Var4                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   negf    Var0                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   comf    Var4,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   clrf    WREG                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var1,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var2,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var3,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  Var4,F                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add32 macro AVar0,AVar1,AVar2, BVar0,BVar1                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add41 macro AVar0,AVar1,AVar2,AVar3, BVar0                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add42 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add43 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar += BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Add4 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2,BVar3                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar3,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   addwfc  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub2 macro AVar0,AVar1, BVar0,BVar1                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub3 macro AVar0,AVar1,AVar2, BVar0,BVar1,BVar2                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub4 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2,BVar3                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar3,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; AVar -= BVar                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Sub43 macro AVar0,AVar1,AVar2,AVar3, BVar0,BVar1,BVar2                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar0,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   AVar0,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar1,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar1,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar2,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar2,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   0                                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwfb  AVar3,F                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; (PRODL,PRODH) = AVar*Bvar                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           Mul2 macro AVar,BVar                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    BVar,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   mulwf   AVar                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;=============== R E L  B R A N C H E S ===================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if bit set                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braSet macro Var, Bit, jLabel                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfsc   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if bit clear                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braClr macro Var, Bit, jLabel                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var == 0.  WREG unchanged.                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFeqZ macro Var,jZero                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var,F                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bz      jZero                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var != 0.  WREG unchanged.                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFneZ macro Var,jNotZero                                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var,F                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bnz     jNotZero                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var == Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFeqL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var,W                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bz      jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var != Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFneL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var,W                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bnz     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var <= Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFleL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfsgt  Var                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var >= Lit.                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFgeL macro   Var,Lit,jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw   Lit                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfslt  Var                                                              C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var1 == Var2                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFeqF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var1,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bz      jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Branch if Var1 != Var2                                                C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFneF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var1,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bnz     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFgeF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfslt  Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFleF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   cpfsgt  Var1                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bra     jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           braFltF macro   Var1,Var2,jLabel                                                 C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movf    Var1,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf   Var2,W                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss   STATUS,Z                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   bc      jLabel                                                           C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;=============== A B S O L U T E    B R A N C H E S =======================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Go to if bit set                                                      C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoSet macro Var, Bit, jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfsc   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto     jLabel                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Go to if bit clear                                                    C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoClr macro Var, Bit, jLabel                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss   Var,Bit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto     jLabel                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   ;; Go to if F == Lit                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFeqL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw     Lit                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf     Var,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfsc     _Z                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto      jLabel                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;Go to if F != Lit                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFneL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   movlw     Lit                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   subwf     Var,W                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   btfss     _Z                                                             C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   goto      jLabel                                                         C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;Go to if F >= Lit                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFgeL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     movlw     Lit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     cpfslt    Var                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     goto      jLabel                                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           ;Go to if F <= Lit                                                               C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                           gotoFleL macro   Var,Lit,jLabel                                                  C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     movlw     Lit                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     cpfsgt    Var                                                          C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     goto      jLabel                                                       C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fpmacros.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ; __FpUnPackA                                                                    C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ; __FpUnPackB                                                                    C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ; Description:                                                                   C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;         Unpack floats fA and fB                                                C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ; Input:                                                                         C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;         IEEE 754 format float in fAexp...fA2.                                  C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;         Same for fBexp...fB2.                                                  C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;         Requires flags to be zero on entry.                                    C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ; Output:                                                                        C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;         Unpacks exponent into fAexp and Significant into fA0,fA1,fA2.          C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;         Sets .0f => .1f, i.e. makes msb of Significant explict                 C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;         Sets Zero, Infinite and NaN flags.                                     C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ; On entry: IEEE 754 format                   Address increasing down            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;       f2     D7  D6  D5  D4  D3  D2  D1  D0              |                     C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;       f1     D15 D14 D13 D12 D11 D10 D9  D8              |                     C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;       f0     E0  D22 D21 D20 D19 D18 D17 D16             |                     C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;       fexp   Sn  E7  E6  E5  E4  E3  E2  E1              V                     C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ; On exit                                                                        C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;       f2     D7  D6  D5  D4  D3  D2  D1  D0                                    C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;       f1     D15 D14 D13 D12 D11 D10 D9  D8                                    C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;       f0     1   D22 D21 D20 D19 D18 D17 D16                                   C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;       fexp   E7  E6  E5  E4  E3  E2  E1  E0                                    C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;---------------------------------------------------------------------------------------------- C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                     GLOBAL __FpUnPackA, __FpUnPackB                                        C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           PROG    CODE                                                                     C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           __FpUnPackA:                                                                     C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045a4   3642     RLCF      0x42,0x1,0x0             rlcf      fA0,F                                                        C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045a6   3643     RLCF      0x43,0x1,0x0             rlcf      fAexp,F                                                      C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045a8   e302     BNC       0x45ae                   bnc       jUnpkA1                                                      C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                     ;; Negative                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045aa   844a     BSF       0x4a,0x2,0x0             bsf       fFlg,FLG_SIGN_A    ; Signal negative                         C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045ac   7e4a     BTG       0x4a,0x7,0x0             btg       fFlg,FLG_SIGN_ABW  ; Toggle combined sign                    C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           jUnpkA1:                                                                         C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045ae   e106     BNZ       0x45bc                   bnz       jUnpkANZ                                                     C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                     ;; Zero exponent => Zero value or subnormal                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045b0   804a     BSF       0x4a,0x0,0x0             bsf       fFlg,FLG_ZERO_A    ; Signal Zero                             C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                     ;; for safety force all bytes to zero since subnormals not supported   C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045b2   6a43     CLRF      0x43,0x0                 clrf      fAexp                                                        C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045b4   6a42     CLRF      0x42,0x0                 clrf      fA0                                                          C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045b6   6a41     CLRF      0x41,0x0                 clrf      fA1                                                          C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045b8   6a40     CLRF      0x40,0x0                 clrf      fA2                                                          C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045ba   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           jUnpkANZ:                                                                        C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                     ;; Test for NaN or infinity                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045bc   2843     INCF      0x43,0x0,0x0             incf      fAexp,W                                                      C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045be   e003     BZ        0x45c6                   bz        jUnpkA2            ; == 0xFF => either NaN or infinite       C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                     ;; set msb of Significand to get 1.f                                   C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045c0   80d8     BSF       0xd8,0x0,0x0             bsf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045c2   3242     RRCF      0x42,0x1,0x0             rrcf      fA0,F                                                        C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045c4   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           jUnpkA2:                                                                         C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                     ;; either NaN or infinity                                              C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045c6   90d8     BCF       0xd8,0x0,0x0             bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045c8   3242     RRCF      0x42,0x1,0x0             rrcf      fA0,F                                                        C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045ca   e102     BNZ       0x45d0                   bnz       jUnpkNaN           ; NaN                                     C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                     ;; infinity                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045cc   824a     BSF       0x4a,0x1,0x0             bsf       fFlg,FLG_INF_A      ; A: is infinity                         C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045ce   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           jUnpkNaN:                                                                        C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                     ;; either A or B is a NaN                                              C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045d0   864a     BSF       0x4a,0x3,0x0             bsf       fFlg,FLG_NaN_AorB   ; Signal NaN for A or B                  C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045d2   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           __FpUnPackB                                                                      C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045d4   3647     RLCF      0x47,0x1,0x0             rlcf      fB0,F                                                        C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045d6   3648     RLCF      0x48,0x1,0x0             rlcf      fBexp,F                                                      C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045d8   e302     BNC       0x45de                   bnc       jUnpkB1                                                      C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                     ;; Negative                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045da   8c4a     BSF       0x4a,0x6,0x0             bsf       fFlg,FLG_SIGN_B       ; Signal negative                      C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045dc   7e4a     BTG       0x4a,0x7,0x0             btg       fFlg,FLG_SIGN_ABW     ; Toggle combined sign                 C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           jUnpkB1:                                                                         C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045de   e106     BNZ       0x45ec                   bnz       jUnpkBNZ                                                     C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                     ;; Zero exponent => Zero value or subnormal                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045e0   884a     BSF       0x4a,0x4,0x0             bsf       fFlg,FLG_ZERO_B       ; Signal Zero                          C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                     ;; for safety force all bytes to zero since subnormals not supported   C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045e2   6a48     CLRF      0x48,0x0                 clrf      fBexp                                                        C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045e4   6a47     CLRF      0x47,0x0                 clrf      fB0                                                          C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045e6   6a46     CLRF      0x46,0x0                 clrf      fB1                                                          C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045e8   6a45     CLRF      0x45,0x0                 clrf      fB2                                                          C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045ea   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           jUnpkBNZ:                                                                        C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                     ;; Test for NaN or infinity                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045ec   2848     INCF      0x48,0x0,0x0             incf      fBexp,W                                                      C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045ee   e003     BZ        0x45f6                   bz        jUnpkB2            ; == 0xFF => either NaN or infinite       C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                     ;; set msb of Significand to get 1.f                                   C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045f0   80d8     BSF       0xd8,0x0,0x0             bsf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045f2   3247     RRCF      0x47,0x1,0x0             rrcf      fB0,F                                                        C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045f4   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           jUnpkB2:                                                                         C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                     ;; either NaN or infinity                                              C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045f6   90d8     BCF       0xd8,0x0,0x0             bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045f8   3247     RRCF      0x47,0x1,0x0             rrcf      fB0,F                                                        C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045fa   e1ea     BNZ       0x45d0                   bnz       jUnpkNaN           ; NaN                                     C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                     ;; infinity                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045fc   8a4a     BSF       0x4a,0x5,0x0             bsf       fFlg,FLG_INF_B      ; B: is infinity                         C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
0045fe   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                     END                                                                    C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\UnpackFP.asm
                                           #include <stdio.h>                                                               C:\mcc18\src\TRADIT~1\stdclib\printf.c
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\printf.c
                                           /* printf() is a wrapper function which calls vfprintf() with stdout as the      C:\mcc18\src\TRADIT~1\stdclib\printf.c
                                              destination output stream. EOF is returned on error, else the number          C:\mcc18\src\TRADIT~1\stdclib\printf.c
                                              of characters output. */                                                      C:\mcc18\src\TRADIT~1\stdclib\printf.c
                                           int                                                                              C:\mcc18\src\TRADIT~1\stdclib\printf.c
005d12   cfd9     MOVFF     0xfd9,0xfe6    printf (const rom char *fmt, ...)                                                C:\mcc18\src\TRADIT~1\stdclib\printf.c
005d14   ffe6                                                                                                               
005d16   cfda     MOVFF     0xfda,0xfe6                                                                                     
005d18   ffe6                                                                                                               
005d1a   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
005d1c   ffd9                                                                                                               
005d1e   cfe2     MOVFF     0xfe2,0xfda                                                                                     
005d20   ffda                                                                                                               
005d22   52e6     MOVF      0xe6,0x1,0x0                                                                                    
005d24   52e6     MOVF      0xe6,0x1,0x0                                                                                    
005d26   52e6     MOVF      0xe6,0x1,0x0                                                                                    
005d28   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\mcc18\src\TRADIT~1\stdclib\printf.c
                                             va_list ap;                                                                    C:\mcc18\src\TRADIT~1\stdclib\printf.c
                                             int n;                                                                         C:\mcc18\src\TRADIT~1\stdclib\printf.c
005d2a   50d9     MOVF      0xd9,0x0,0x0     va_start (ap, fmt);                                                            C:\mcc18\src\TRADIT~1\stdclib\printf.c
005d2c   0ffb     ADDLW     0xfb                                                                                            
005d2e   6e00     MOVWF     0x0,0x0                                                                                         
005d30   0eff     MOVLW     0xff                                                                                            
005d32   20da     ADDWFC    0xda,0x0,0x0                                                                                    
005d34   6e01     MOVWF     0x1,0x0                                                                                         
005d36   c000     MOVFF     0x0,0xfde                                                                                       
005d38   ffde                                                                                                               
005d3a   6edd     MOVWF     0xdd,0x0                                                                                        
005d3c   cfde     MOVFF     0xfde,0xfe6      n = vfprintf (stdout, fmt, ap);                                                C:\mcc18\src\TRADIT~1\stdclib\printf.c
005d3e   ffe6                                                                                                               
005d40   cfdd     MOVFF     0xfdd,0xfe6                                                                                     
005d42   ffe6                                                                                                               
005d44   0efb     MOVLW     0xfb                                                                                            
005d46   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
005d48   ffe6                                                                                                               
005d4a   0efc     MOVLW     0xfc                                                                                            
005d4c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
005d4e   ffe6                                                                                                               
005d50   0efd     MOVLW     0xfd                                                                                            
005d52   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
005d54   ffe6                                                                                                               
005d56   c2f9     MOVFF     0x2f9,0xfe6                                                                                     
005d58   ffe6                                                                                                               
005d5a   c2fa     MOVFF     0x2fa,0xfe6                                                                                     
005d5c   ffe6                                                                                                               
005d5e   ec02     CALL      0x1804,0x0                                                                                      
005d60   f00c                                                                                                               
005d62   6ef5     MOVWF     0xf5,0x0                                                                                        
005d64   0e07     MOVLW     0x7                                                                                             
005d66   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
005d68   e202     BC        0x5d6e                                                                                          
005d6a   6ae1     CLRF      0xe1,0x0                                                                                        
005d6c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
005d6e   6ee1     MOVWF     0xe1,0x0                                                                                        
005d70   50f5     MOVF      0xf5,0x0,0x0                                                                                    
005d72   0e02     MOVLW     0x2                                                                                             
005d74   cff3     MOVFF     0xff3,0xfdb                                                                                     
005d76   ffdb                                                                                                               
005d78   0e03     MOVLW     0x3                                                                                             
005d7a   cff4     MOVFF     0xff4,0xfdb                                                                                     
005d7c   ffdb                                                                                                               
                                             va_end (ap);                                                                   C:\mcc18\src\TRADIT~1\stdclib\printf.c
005d7e   0e02     MOVLW     0x2              return n;                                                                      C:\mcc18\src\TRADIT~1\stdclib\printf.c
005d80   cfdb     MOVFF     0xfdb,0x0                                                                                       
005d82   f000                                                                                                               
005d84   0e03     MOVLW     0x3                                                                                             
005d86   cfdb     MOVFF     0xfdb,0x1                                                                                       
005d88   f001                                                                                                               
005d8a   c000     MOVFF     0x0,0xff3                                                                                       
005d8c   fff3                                                                                                               
005d8e   c001     MOVFF     0x1,0xff4                                                                                       
005d90   fff4                                                                                                               
005d92   cfd9     MOVFF     0xfd9,0xfe1    }                                                                                C:\mcc18\src\TRADIT~1\stdclib\printf.c
005d94   ffe1                                                                                                               
005d96   cfda     MOVFF     0xfda,0xfe2                                                                                     
005d98   ffe2                                                                                                               
005d9a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
005d9c   cfe5     MOVFF     0xfe5,0xfda                                                                                     
005d9e   ffda                                                                                                               
005da0   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
005da2   ffd9                                                                                                               
005da4   0012     RETURN    0x0                                                                                             
                                           #include <stdio.h>                                                               C:\mcc18\src\TRADIT~1\stdclib\stdout.c
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\stdout.c
                                           /* by default stdout issues to the USART */                                      C:\mcc18\src\TRADIT~1\stdclib\stdout.c
                                           FILE *stdout = _H_USART;                                                         C:\mcc18\src\TRADIT~1\stdclib\stdout.c
                                           #include <stdio.h>                                                               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                           #include <ctype.h>                                                               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                           #include <string.h>                                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_MINUS 0x1                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_PLUS  0x2                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_SPACE 0x4                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_OCTO  0x8                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_ZERO  0x10                                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_SIGNED 0x80                                                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                           static const rom char s_digits[] = "0123456789abcdef";                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                           static unsigned char                                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0017d8   ec28     CALL      0x2250,0x0     s_put_n_chars (FILE * handle, unsigned char n, char c)                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0017da   f011                                                                                                               
002250   cfd9     MOVFF     0xfd9,0xfe6                                                                                     
002252   ffe6                                                                                                               
002254   cfda     MOVFF     0xfda,0xfe6                                                                                     
002256   ffe6                                                                                                               
002258   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00225a   ffd9                                                                                                               
00225c   cfe2     MOVFF     0xfe2,0xfda                                                                                     
00225e   ffda                                                                                                               
002260   0012     RETURN    0x0                                                                                             
                                           {                                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0017dc   0efb     MOVLW     0xfb             while (n--)                                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0017de   cfdb     MOVFF     0xfdb,0xff3                                                                                     
0017e0   fff3                                                                                                               
0017e2   06db     DECF      0xdb,0x1,0x0                                                                                    
0017e4   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0017e6   0900     IORLW     0x0                                                                                             
0017e8   e00a     BZ        0x17fe                                                                                          
0017ea   ec76     CALL      0x22ec,0x0         if (putc (c, handle) == EOF)                                                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0017ec   f011                                                                                                               
0017ee   0efa     MOVLW     0xfa                                                                                            
0017f0   ece1     CALL      0x23c2,0x0                                                                                      
0017f2   f011                                                                                                               
0017f4   e1f3     BNZ       0x17dc                                                                                          
0017f6   1c01     COMF      0x1,0x0,0x0                                                                                     
0017f8   e1f1     BNZ       0x17dc                                                                                          
0017fa   0e01     MOVLW     0x1                  return 1;                                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0017fc   d001     BRA       0x1800                                                                                          
0017fe   0e00     MOVLW     0x0              return 0;                                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001800   ef57     GOTO      0x22ae         }                                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001802   f011                                                                                                               
0022ae   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0022b0   cfe5     MOVFF     0xfe5,0xfda                                                                                     
0022b2   ffda                                                                                                               
0022b4   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0022b6   ffd9                                                                                                               
0022b8   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_UNSPECIFIED 0                                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_LONG 1                                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_SHLONG 2                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_BYTE   3                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                           int                                                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001804   ec28     CALL      0x2250,0x0     vfprintf (auto FILE *handle, auto const rom char *f, auto va_list ap)            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001806   f011                                                                                                               
001808   0e3b     MOVLW     0x3b                                                                                            
00180a   24e1     ADDWF     0xe1,0x0,0x0                                                                                    
00180c   e302     BNC       0x1812                                                                                          
00180e   68e1     SETF      0xe1,0x0                                                                                        
001810   52e6     MOVF      0xe6,0x1,0x0                                                                                    
001812   6ee1     MOVWF     0xe1,0x0                                                                                        
                                           {                                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                             unsigned char c;                                                               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001814   0e01     MOVLW     0x1              int count = 0;                                                                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001816   6adb     CLRF      0xdb,0x0                                                                                        
001818   0e02     MOVLW     0x2                                                                                             
00181a   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00181c   0ef9     MOVLW     0xf9             for (c = *f; c; c = *++f)                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00181e   cfdb     MOVFF     0xfdb,0xff6                                                                                     
001820   fff6                                                                                                               
001822   0efa     MOVLW     0xfa                                                                                            
001824   cfdb     MOVFF     0xfdb,0xff7                                                                                     
001826   fff7                                                                                                               
001828   0efb     MOVLW     0xfb                                                                                            
00182a   cfdb     MOVFF     0xfdb,0xff8                                                                                     
00182c   fff8                                                                                                               
00182e   0008     TBLRD                                                                                                     
001830   50f5     MOVF      0xf5,0x0,0x0                                                                                    
001832   6edf     MOVWF     0xdf,0x0                                                                                        
001834   50df     MOVF      0xdf,0x0,0x0                                                                                    
001836   e102     BNZ       0x183c                                                                                          
001838   ef7d     GOTO      0x20fa                                                                                          
00183a   f010                                                                                                               
0020f4   d977     RCALL     0x23e4                                                                                          
0020f6   ef17     GOTO      0x182e                                                                                          
0020f8   f00c                                                                                                               
0023e4   50d9     MOVF      0xd9,0x0,0x0                                                                                    
0023e6   0ff9     ADDLW     0xf9                                                                                            
0023e8   6ee9     MOVWF     0xe9,0x0                                                                                        
0023ea   0eff     MOVLW     0xff                                                                                            
0023ec   ef8b     GOTO      0x2316                                                                                          
0023ee   f011                                                                                                               
                                               {                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00183c   0e25     MOVLW     0x25                 if (c == '%')                                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00183e   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001840   e002     BZ        0x1846                                                                                          
001842   ef70     GOTO      0x20e0                                                                                          
001844   f010                                                                                                               
                                                   {                                                                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001846   0e03     MOVLW     0x3                      unsigned char flags = 0;                                               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001848   6adb     CLRF      0xdb,0x0                                                                                        
00184a   0e04     MOVLW     0x4                      unsigned char width = 0;                                               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00184c   6adb     CLRF      0xdb,0x0                                                                                        
00184e   0e05     MOVLW     0x5                      unsigned char precision = 0;                                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001850   6adb     CLRF      0xdb,0x0                                                                                        
001852   0e06     MOVLW     0x6                      unsigned char have_precision = 0;                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001854   6adb     CLRF      0xdb,0x0                                                                                        
001856   0e07     MOVLW     0x7                      unsigned char size = 0;                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001858   6adb     CLRF      0xdb,0x0                                                                                        
                                                     unsigned char space_cnt;                                               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                     unsigned char cval;                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                     unsigned long larg;                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                     far rom char *romstring;                                               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                     char *ramstring;                                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                     int n;                                                                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* get the first character of the conversion specifier */              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00185a   ec90     CALL      0x2120,0x0               c = *++f;                                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00185c   f010                                                                                                               
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /**  The conversion specification has, after the '%' character:        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                         7.9.6.1                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * Zero or more flags (in any order) that modify the meaning of the  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specification.                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * An optional minimum field width. If the converted value has       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          fewer characters than the field width, it will be padded with     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          spaces (by default) on the left (or right, if the left            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          adjustment flag, described later, has been given) to the field    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          width. The field width takes the form of an asterisk *            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          (described later) or a decimal integer.                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * An optional precision that gives the minimum number of digits     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          to appear for the d, i, o, u, x, and X conversions, the           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          maximum number of digits to appear after the decimal point        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          character for e, E, and f conversions, the maximum number         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          of significant digits for the g and G conversions, or the         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          maximum number of characters to be written from a string in       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          s conversion. The precision takes the form of a period (.)        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          followed by an asterisk * (described later) or by an optional     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          decimal integer; if only the period is specified, the precision   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          is taken as zero. If a precision appears with any other           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specifier, the behaviour is undefined.                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * An optional h specifying that a following d, i, o, u, x, or X     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specifier applies to a short int or unsigned short     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          int argument (the argument will have been promoted according      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          to the integer promotions, and its value shall be converted       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          to short int or unsigned short int before printing); an           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          optional h specifying that a following n conversion specifier     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          applies to a pointer to a short int argument; an optional l       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          (ell) specifying that a following d, i, o, u, x, or X             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specifier applies to a long int or unsigned long int   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          argument; or an optional L specifying that a following e, E,      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          f, g, or G conversion specifier applies to a long double          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          argument. If an h, l, or L appears with any other conversion      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          specifier, the behaviour is undefined.                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * A character that specifies the type of conversion to be applied.  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       */                                                                   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /** check for a flag.                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                        7.9.6.1                                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                        The flag characters and their meanings are:                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                        - The result of the conversion will be left-justified within        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          the field. (It will be right justified if this flag is not        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          specified.)                                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                        + The result of a signed conversion will always begin with a        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          plus or a minus sign. (It will begin with a sign only when        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          a negative value is converted if this flag is not specified.)     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                        space  If the first character of a signed conversion is not a       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          sign, or if a signed conversion results in no characters, a       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          space will be prefixed to the result. If the space and + flags    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          both appear, the space flag will be ignored.                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                        # The result is to be converted to an "alternate form." For o       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion, it increases the precision to force the first digit   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          of the result to be a zero. For x (or X) conversion, a nonzero    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          result will have 0x (or 0X) prefixed to it. For e, E, f, g,       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          and G conversions, the result will always contain a decimal-      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          point character, even if no digits follow it. (Normally, a        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          decimal point character appears in the result of these            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversions only if a digit follows it.) For g and G              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversions, trailing zeros will not be removed from the          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          result. For other conversions the behaviour is undefined.         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                        0 For d, i, o, u, x, X, e, E, f, g, and G conversions, leading      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          zeros (following any indication of sign or base) are used to      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          pad to the field width; no space padding is performed. If         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          the 0 and - flags both appear, the 0 flag will be ignored.        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                          For other conversions, the behaviour is undefined.                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       */                                                                   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00185e   0e2d     MOVLW     0x2d                     while (c == '-' || c == '+' || c == ' ' || c == '#'                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001860   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001862   e00c     BZ        0x187c                                                                                          
001864   0e2b     MOVLW     0x2b                                                                                            
001866   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001868   e009     BZ        0x187c                                                                                          
00186a   0e20     MOVLW     0x20                                                                                            
00186c   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00186e   e006     BZ        0x187c                                                                                          
001870   0e23     MOVLW     0x23                                                                                            
0018ae   d7d5     BRA       0x185a                                                                                          
001872   5cdf     SUBWF     0xdf,0x0,0x0                    || c == '0')                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001874   e003     BZ        0x187c                                                                                          
001876   0e30     MOVLW     0x30                                                                                            
001878   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00187a   e11a     BNZ       0x18b0                                                                                          
                                                       {                                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00187c   50df     MOVF      0xdf,0x0,0x0                 switch (c)                                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00187e   0a30     XORLW     0x30                                                                                            
001880   e014     BZ        0x18aa                                                                                          
001882   0a13     XORLW     0x13                                                                                            
001884   e00f     BZ        0x18a4                                                                                          
001886   0a03     XORLW     0x3                                                                                             
001888   e00a     BZ        0x189e                                                                                          
00188a   0a0b     XORLW     0xb                                                                                             
00188c   e005     BZ        0x1898                                                                                          
00188e   0a06     XORLW     0x6                                                                                             
001890   e1e4     BNZ       0x185a                                                                                          
                                                           {                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '-':                                                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001892   0e03     MOVLW     0x3                              flags |= _FLAG_MINUS;                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001894   80db     BSF       0xdb,0x0,0x0                                                                                    
001896   d7e1     BRA       0x185a                           break;                                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '+':                                                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001898   0e03     MOVLW     0x3                              flags |= _FLAG_PLUS;                                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00189a   82db     BSF       0xdb,0x1,0x0                                                                                    
00189c   d7de     BRA       0x185a                           break;                                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case ' ':                                                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00189e   0e03     MOVLW     0x3                              flags |= _FLAG_SPACE;                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018a0   84db     BSF       0xdb,0x2,0x0                                                                                    
0018a2   d7db     BRA       0x185a                           break;                                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '#':                                                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018a4   0e03     MOVLW     0x3                              flags |= _FLAG_OCTO;                                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018a6   86db     BSF       0xdb,0x3,0x0                                                                                    
0018a8   d7d8     BRA       0x185a                           break;                                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '0':                                                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018aa   0e03     MOVLW     0x3                              flags |= _FLAG_ZERO;                                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018ac   88db     BSF       0xdb,0x4,0x0                                                                                    
                                                             break;                                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                         c = *++f;                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the optional width field is next */                                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018b0   0e2a     MOVLW     0x2a                     if (c == '*')                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018b2   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0018b4   e11b     BNZ       0x18ec                                                                                          
                                                       {                                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018b6   ec8c     CALL      0x2118,0x0                   n = va_arg (ap, int);                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018b8   f010                                                                                                               
0018ba   ecda     CALL      0x21b4,0x0                                                                                      
0018bc   f010                                                                                                               
0021b4   0e13     MOVLW     0x13                                                                                            
0021b6   cfee     MOVFF     0xfee,0xfdb                                                                                     
0021b8   ffdb                                                                                                               
0021ba   0e14     MOVLW     0x14                                                                                            
0021bc   cfed     MOVFF     0xfed,0xfdb                                                                                     
0021be   ffdb                                                                                                               
0018be   e010     BZ        0x18e0                       if (n < 0)                                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0021c0   0e13     MOVLW     0x13                                                                                            
0021c2   cfdb     MOVFF     0xfdb,0x0                                                                                       
0021c4   f000                                                                                                               
0021c6   0e14     MOVLW     0x14                                                                                            
0021c8   cfdb     MOVFF     0xfdb,0x1                                                                                       
0021ca   f001                                                                                                               
0021cc   0100     MOVLB     0x0                                                                                             
0021ce   0e80     MOVLW     0x80                                                                                            
0021d0   1401     ANDWF     0x1,0x0,0x0                                                                                     
0021d2   0012     RETURN    0x0                                                                                             
                                                           {                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018c0   0e03     MOVLW     0x3                              flags |= _FLAG_MINUS;                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018c2   80db     BSF       0xdb,0x0,0x0                                                                                    
0018c4   6841     SETF      0x41,0x0                         width = -n;                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018c6   6842     SETF      0x42,0x0                                                                                        
0018c8   0e13     MOVLW     0x13                                                                                            
0018ca   cfdb     MOVFF     0xfdb,0x46                                                                                      
0018cc   f046                                                                                                               
0018ce   0e14     MOVLW     0x14                                                                                            
0018d0   cfdb     MOVFF     0xfdb,0x47                                                                                      
0018d2   f047                                                                                                               
0018d4   ec26     CALL      0x444c,0x0                                                                                      
0018d6   f022                                                                                                               
0018d8   0e04     MOVLW     0x4                                                                                             
0018da   c03f     MOVFF     0x3f,0xfdb                                                                                      
0018dc   ffdb                                                                                                               
                                                           }                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018de   d003     BRA       0x18e6                       else                                                               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018e0   0e13     MOVLW     0x13                           width = n;                                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018e2   ecc3     CALL      0x2186,0x0                                                                                      
0018e4   f010                                                                                                               
0018e6   ec90     CALL      0x2120,0x0                   c = *++f;                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018e8   f010                                                                                                               
                                                       }                                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018ea   d00b     BRA       0x1902                   else                                                                   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       {                                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018ec   0e09     MOVLW     0x9                          cval = 0;                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018ee   6adb     CLRF      0xdb,0x0                                                                                        
0018f0   ec31     CALL      0x2262,0x0                   while ((unsigned char) isdigit (c))                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018f2   f011                                                                                                               
0018f4   e003     BZ        0x18fc                                                                                          
0018fa   d7fa     BRA       0x18f0                                                                                          
002262   cfdf     MOVFF     0xfdf,0xfe6                                                                                     
002264   ffe6                                                                                                               
002266   6ae6     CLRF      0xe6,0x0                                                                                        
002268   ec86     CALL      0x610c,0x0                                                                                      
00226a   f030                                                                                                               
00226c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00226e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002270   50f3     MOVF      0xf3,0x0,0x0                                                                                    
002272   0012     RETURN    0x0                                                                                             
                                                           {                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018f6   eca5     CALL      0x234a,0x0                       cval = cval * 10 + c - '0';                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018f8   f011                                                                                                               
00234a   0e09     MOVLW     0x9                                                                                             
00234c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00234e   0d0a     MULLW     0xa                                                                                             
002350   50f3     MOVF      0xf3,0x0,0x0                                                                                    
002352   24df     ADDWF     0xdf,0x0,0x0                                                                                    
002354   0fd0     ADDLW     0xd0                                                                                            
002356   6ee7     MOVWF     0xe7,0x0                                                                                        
002358   0e09     MOVLW     0x9                                                                                             
00235a   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
00235c   ffdb                                                                                                               
00235e   ef90     GOTO      0x2120                           c = *++f;                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
002360   f010                                                                                                               
                                                           }                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018fc   0e09     MOVLW     0x9                          width = cval;                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0018fe   ecc3     CALL      0x2186,0x0                                                                                      
001900   f010                                                                                                               
                                                       }                                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* if '-' is specified, '0' is ignored */                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001902   0e03     MOVLW     0x3                      if (flags & _FLAG_MINUS)                                               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001904   b0db     BTFSC     0xdb,0x0,0x0                                                                                    
001906   98db     BCF       0xdb,0x4,0x0               flags &= ~_FLAG_ZERO;                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the optional precision field is next */                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001908   0e2e     MOVLW     0x2e                     if (c == '.')                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00190a   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00190c   e11b     BNZ       0x1944                                                                                          
                                                       {                                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00190e   ec90     CALL      0x2120,0x0                   c = *++f;                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001910   f010                                                                                                               
001912   0e2a     MOVLW     0x2a                         if (c == '*')                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001914   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001916   e10b     BNZ       0x192e                                                                                          
                                                           {                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001918   ec8c     CALL      0x2118,0x0                       n = va_arg (ap, int);                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00191a   f010                                                                                                               
00191c   ecda     CALL      0x21b4,0x0                                                                                      
00191e   f010                                                                                                               
002118   d929     RCALL     0x236c                                                                                          
00211a   0e02     MOVLW     0x2                                                                                             
00211c   ef7d     GOTO      0x22fa                                                                                          
00211e   f011                                                                                                               
0022fa   5e00     SUBWF     0x0,0x1,0x0                                                                                     
0022fc   0e00     MOVLW     0x0                                                                                             
0022fe   5a01     SUBWFB    0x1,0x1,0x0                                                                                     
002300   0ef7     MOVLW     0xf7                                                                                            
002302   c000     MOVFF     0x0,0xfdb                                                                                       
002304   ffdb                                                                                                               
002306   0ef8     MOVLW     0xf8                                                                                            
002308   c001     MOVFF     0x1,0xfdb                                                                                       
00230a   ffdb                                                                                                               
00230c   c000     MOVFF     0x0,0xfe9                                                                                       
00230e   ffe9                                                                                                               
002310   c001     MOVFF     0x1,0xfea                                                                                       
002312   ffea                                                                                                               
002314   0012     RETURN    0x0                                                                                             
00236c   0ef7     MOVLW     0xf7                                                                                            
00236e   cfdb     MOVFF     0xfdb,0x0                                                                                       
002370   f000                                                                                                               
002372   0ef8     MOVLW     0xf8                                                                                            
002374   cfdb     MOVFF     0xfdb,0x1                                                                                       
002376   f001                                                                                                               
002378   0012     RETURN    0x0                                                                                             
001920   e103     BNZ       0x1928                           if (n >= 0)                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                               {                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001922   0e13     MOVLW     0x13                                 precision = n;                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001924   ec15     CALL      0x222a,0x0                                                                                      
001926   f011                                                                                                               
00222a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00222c   d8ce     RCALL     0x23ca                                                                                          
0023ca   6ee7     MOVWF     0xe7,0x0                                                                                        
0023cc   0e05     MOVLW     0x5                                                                                             
0023ce   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0023d0   ffdb                                                                                                               
0023d2   0012     RETURN    0x0                                                                                             
00222e   0e01     MOVLW     0x1                                  have_precision = 1;                                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
002230   6ef3     MOVWF     0xf3,0x0                                                                                        
002232   0e06     MOVLW     0x6                                                                                             
002234   cff3     MOVFF     0xff3,0xfdb                                                                                     
002236   ffdb                                                                                                               
002238   0012     RETURN    0x0                                                                                             
                                                               }                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001928   ec90     CALL      0x2120,0x0                       c = *++f;                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00192a   f010                                                                                                               
                                                           }                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00192c   d00b     BRA       0x1944                       else                                                               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           {                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00192e   0e09     MOVLW     0x9                              cval = 0;                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001930   6adb     CLRF      0xdb,0x0                                                                                        
001932   ec31     CALL      0x2262,0x0                       while ((unsigned char) isdigit (c))                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001934   f011                                                                                                               
001936   e003     BZ        0x193e                                                                                          
00193c   d7fa     BRA       0x1932                                                                                          
                                                               {                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001938   eca5     CALL      0x234a,0x0                           cval = cval * 10 + c - '0';                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00193a   f011                                                                                                               
                                                                 c = *++f;                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                               }                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00193e   0e09     MOVLW     0x9                              precision = cval;                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001940   ec15     CALL      0x222a,0x0                                                                                      
001942   f011                                                                                                               
                                                             have_precision = 1;                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the optional 'h' specifier. since int and short int are             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                        the same size for MPLAB C18, this is a NOP for us. */               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001944   0e68     MOVLW     0x68                     if (c == 'h')                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001946   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001948   e107     BNZ       0x1958                                                                                          
                                                       {                                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00194a   ec90     CALL      0x2120,0x0                   c = *++f;                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00194c   f010                                                                                                               
                                                         /* if 'c' is another 'h' character, this is an 'hh'                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specifier and the size is 8 bits */                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00194e   0e68     MOVLW     0x68                         if (c == 'h')                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001950   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001952   e11d     BNZ       0x198e                                                                                          
                                                           {                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001954   0e03     MOVLW     0x3                              size = _FMT_BYTE;                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                             c = *++f;                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* 'z' and 't' are both 16-bit and so are NOPs */                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001956   d018     BRA       0x1988                   else if (c == 't' || c == 'z')                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001958   0e74     MOVLW     0x74                                                                                            
00195a   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00195c   e017     BZ        0x198c                                                                                          
00195e   0e7a     MOVLW     0x7a                                                                                            
001960   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001962   e014     BZ        0x198c                                                                                          
                                                       c = *++f;                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the 'H' specifier tells us to deal with 24-bit integers.            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                        the 'T' and 'Z' specifiers are also 24 bit */                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001964   0e48     MOVLW     0x48                     else if (c == 'H' || c == 'T' || c == 'Z')                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001966   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001968   e006     BZ        0x1976                                                                                          
00196a   0e54     MOVLW     0x54                                                                                            
00196c   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00196e   e003     BZ        0x1976                                                                                          
001970   0e5a     MOVLW     0x5a                                                                                            
001972   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001974   e102     BNZ       0x197a                                                                                          
                                                       {                                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001976   0e02     MOVLW     0x2                          size = _FMT_SHLONG;                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                         c = *++f;                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the 'l' specifier tells us to deal with 32-bit integers             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                        'j' specifies intmax_t (long in our case). */                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001978   d007     BRA       0x1988                   else if (c == 'l' || c == 'j')                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00197a   0e6c     MOVLW     0x6c                                                                                            
00197c   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00197e   e003     BZ        0x1986                                                                                          
001980   0e6a     MOVLW     0x6a                                                                                            
001982   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001984   e104     BNZ       0x198e                                                                                          
                                                       {                                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001986   0e01     MOVLW     0x1                          size = _FMT_LONG;                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001988   ec68     CALL      0x22d0,0x0                                                                                      
00198a   f011                                                                                                               
00198c   dbc9     RCALL     0x2120                       c = *++f;                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
002120   d961     RCALL     0x23e4                                                                                          
002122   0008     TBLRD                                                                                                     
002124   50f5     MOVF      0xf5,0x0,0x0                                                                                    
002126   6edf     MOVWF     0xdf,0x0                                                                                        
002128   0012     RETURN    0x0                                                                                             
002316   20da     ADDWFC    0xda,0x0,0x0                                                                                    
002318   6eea     MOVWF     0xea,0x0                                                                                        
00231a   2aef     INCF      0xef,0x1,0x0                                                                                    
00231c   cfee     MOVFF     0xfee,0xff6                                                                                     
00231e   fff6                                                                                                               
002320   0e00     MOVLW     0x0                                                                                             
002322   22ef     ADDWFC    0xef,0x1,0x0                                                                                    
002324   cfee     MOVFF     0xfee,0xff7                                                                                     
002326   fff7                                                                                                               
002328   22ef     ADDWFC    0xef,0x1,0x0                                                                                    
00232a   cfee     MOVFF     0xfee,0xff8                                                                                     
00232c   fff8                                                                                                               
00232e   0012     RETURN    0x0                                                                                             
                                                       }                                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00198e   50df     MOVF      0xdf,0x0,0x0             switch (c)                                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001990   0a6e     XORLW     0x6e                                                                                            
001992   e101     BNZ       0x1996                                                                                          
001994   d381     BRA       0x2098                                                                                          
001996   0a1e     XORLW     0x1e                                                                                            
001998   e101     BNZ       0x199c                                                                                          
00199a   d192     BRA       0x1cc0                                                                                          
00199c   0a20     XORLW     0x20                                                                                            
00199e   e101     BNZ       0x19a2                                                                                          
0019a0   d18f     BRA       0x1cc0                                                                                          
0019a2   0a3f     XORLW     0x3f                                                                                            
0019a4   e101     BNZ       0x19a8                                                                                          
0019a6   d149     BRA       0x1c3a                                                                                          
0019a8   0a1a     XORLW     0x1a                                                                                            
0019aa   e101     BNZ       0x19ae                                                                                          
0019ac   d146     BRA       0x1c3a                                                                                          
0019ae   0a0d     XORLW     0xd                                                                                             
0019b0   e101     BNZ       0x19b4                                                                                          
0019b2   d143     BRA       0x1c3a                                                                                          
0019b4   0a20     XORLW     0x20                                                                                            
0019b6   e101     BNZ       0x19ba                                                                                          
0019b8   d140     BRA       0x1c3a                                                                                          
0019ba   0a3a     XORLW     0x3a                                                                                            
0019bc   e101     BNZ       0x19c0                                                                                          
0019be   d13d     BRA       0x1c3a                                                                                          
0019c0   0a20     XORLW     0x20                                                                                            
0019c2   e101     BNZ       0x19c6                                                                                          
0019c4   d13a     BRA       0x1c3a                                                                                          
0019c6   0a26     XORLW     0x26                                                                                            
0019c8   e101     BNZ       0x19cc                                                                                          
0019ca   d135     BRA       0x1c36                                                                                          
0019cc   0a0d     XORLW     0xd                                                                                             
0019ce   e101     BNZ       0x19d2                                                                                          
0019d0   d132     BRA       0x1c36                                                                                          
0019d2   0a1a     XORLW     0x1a                                                                                            
0019d4   e101     BNZ       0x19d8                                                                                          
0019d6   d0d9     BRA       0x1b8a                                                                                          
0019d8   0a20     XORLW     0x20                                                                                            
0019da   e04a     BZ        0x1a70                                                                                          
0019dc   0a30     XORLW     0x30                                                                                            
0019de   e01f     BZ        0x1a1e                                                                                          
0019e0   0a46     XORLW     0x46                                                                                            
0019e2   e00e     BZ        0x1a00                                                                                          
0019e4   0a25     XORLW     0x25                                                                                            
0019e6   e001     BZ        0x19ea                                                                                          
0019e8   d385     BRA       0x20f4                                                                                          
                                                       {                                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case '\0':                                                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* this is undefined behaviour. we have a trailing '%' character   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            in the string, perhaps with some flags, width, precision        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            stuff as well, but no format specifier. We'll, arbitrarily,     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            back up a character so that the loop will terminate             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            properly when it loops back and we'll output a '%'              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            character. */                                                   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0019ea   50d9     MOVF      0xd9,0x0,0x0                 --f;                                                               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0019ec   0ff9     ADDLW     0xf9                                                                                            
0019ee   6ee9     MOVWF     0xe9,0x0                                                                                        
0019f0   0eff     MOVLW     0xff                                                                                            
0019f2   20da     ADDWFC    0xda,0x0,0x0                                                                                    
0019f4   6eea     MOVWF     0xea,0x0                                                                                        
0019f6   0e01     MOVLW     0x1                                                                                             
0019f8   5eee     SUBWF     0xee,0x1,0x0                                                                                    
0019fa   0e00     MOVLW     0x0                                                                                             
0019fc   5aee     SUBWFB    0xee,0x1,0x0                                                                                    
0019fe   5aee     SUBWFB    0xee,0x1,0x0                                                                                    
                                                         /* fallthrough */                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case '%':                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a00   ec76     CALL      0x22ec,0x0                   if (putc ('%', handle) == EOF)                                     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a02   f011                                                                                                               
001a04   0e25     MOVLW     0x25                                                                                            
001a06   6ee6     MOVWF     0xe6,0x0                                                                                        
001a08   db95     RCALL     0x2134                                                                                          
001a0a   e103     BNZ       0x1a12                                                                                          
001a0c   1c01     COMF      0x1,0x0,0x0                                                                                     
001a0e   e101     BNZ       0x1a12                                                                                          
001a10   d36b     BRA       0x20e8                                                                                          
                                                           return EOF;                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a12   ec72     CALL      0x22e4,0x0                   ++count;                                                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a14   f011                                                                                                               
001a16   e201     BC        0x1a1a                                                                                          
001a18   d36d     BRA       0x20f4                                                                                          
001a1a   2adb     INCF      0xdb,0x1,0x0                                                                                    
001a1c   d36b     BRA       0x20f4                       break;                                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'c':                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a1e   0e08     MOVLW     0x8                          space_cnt = 0;                                                     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a20   6adb     CLRF      0xdb,0x0                                                                                        
001a22   0e04     MOVLW     0x4                          if (width > 1)                                                     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a24   50db     MOVF      0xdb,0x0,0x0                                                                                    
001a26   0801     SUBLW     0x1                                                                                             
001a28   e206     BC        0x1a36                                                                                          
                                                           {                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a2a   0e04     MOVLW     0x4                              space_cnt = width - 1;                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a2c   04db     DECF      0xdb,0x0,0x0                                                                                    
001a2e   ec3a     CALL      0x2274,0x0                                                                                      
001a30   f011                                                                                                               
001a32   50db     MOVF      0xdb,0x0,0x0                     count += space_cnt;                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a34   db8b     RCALL     0x214c                                                                                          
                                                           }                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a36   0e08     MOVLW     0x8                          if (space_cnt && !(flags & _FLAG_MINUS))                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a38   50db     MOVF      0xdb,0x0,0x0                                                                                    
001a3a   e009     BZ        0x1a4e                                                                                          
001a3c   0e03     MOVLW     0x3                                                                                             
001a3e   50db     MOVF      0xdb,0x0,0x0                                                                                    
001a40   0b01     ANDLW     0x1                                                                                             
001a42   e105     BNZ       0x1a4e                                                                                          
                                                           {                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a44   db72     RCALL     0x212a                           if (s_put_n_chars (handle, space_cnt, ' '))                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a46   e001     BZ        0x1a4a                                                                                          
001a48   d34f     BRA       0x20e8                                                                                          
                                                               return EOF;                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a4a   0e08     MOVLW     0x8                              space_cnt = 0;                                                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a4c   6adb     CLRF      0xdb,0x0                                                                                        
                                                           }                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a4e   db64     RCALL     0x2118                       c = va_arg (ap, int);                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a50   cfef     MOVFF     0xfef,0xfdf                                                                                     
001a52   ffdf                                                                                                               
001a54   ecea     CALL      0x23d4,0x0                   if (putc (c, handle) == EOF)                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a56   f011                                                                                                               
001a58   e103     BNZ       0x1a60                                                                                          
001a5a   1c01     COMF      0x1,0x0,0x0                                                                                     
001a5c   e101     BNZ       0x1a60                                                                                          
001a5e   d344     BRA       0x20e8                                                                                          
                                                           return EOF;                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a60   ec72     CALL      0x22e4,0x0                   ++count;                                                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a62   f011                                                                                                               
001a64   e301     BNC       0x1a68                                                                                          
001a66   2adb     INCF      0xdb,0x1,0x0                                                                                    
001a68   db60     RCALL     0x212a                       if (s_put_n_chars (handle, space_cnt, ' '))                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a6a   e101     BNZ       0x1a6e                                                                                          
001a6c   d343     BRA       0x20f4                                                                                          
001a6e   d33c     BRA       0x20e8                         return EOF;                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'S':                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a70   0e07     MOVLW     0x7                          if (size == _FMT_SHLONG)                                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a72   50db     MOVF      0xdb,0x0,0x0                                                                                    
001a74   0802     SUBLW     0x2                                                                                             
001a76   e10f     BNZ       0x1a96                                                                                          
001a78   ecb6     CALL      0x236c,0x0                     romstring = va_arg (ap, rom far char *);                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a7a   f011                                                                                                               
001a7c   0e03     MOVLW     0x3                                                                                             
001a7e   ec7d     CALL      0x22fa,0x0                                                                                      
001a80   f011                                                                                                               
001a82   0e0e     MOVLW     0xe                                                                                             
001a84   cfee     MOVFF     0xfee,0xfdb                                                                                     
001a86   ffdb                                                                                                               
001a88   0e0f     MOVLW     0xf                                                                                             
001a8a   cfee     MOVFF     0xfee,0xfdb                                                                                     
001a8c   ffdb                                                                                                               
001a8e   0e10     MOVLW     0x10                                                                                            
001a90   cfee     MOVFF     0xfee,0xfdb                                                                                     
001a92   ffdb                                                                                                               
001a94   d020     BRA       0x1ad6                       else                                                               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a96   0ef7     MOVLW     0xf7                           romstring = (far rom char*)va_arg (ap, rom near char *);         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001a98   cfdb     MOVFF     0xfdb,0x3                                                                                       
001a9a   f003                                                                                                               
001a9c   0ef8     MOVLW     0xf8                                                                                            
001a9e   cfdb     MOVFF     0xfdb,0x4                                                                                       
001aa0   f004                                                                                                               
001aa2   0e02     MOVLW     0x2                                                                                             
001aa4   5e03     SUBWF     0x3,0x1,0x0                                                                                     
001aa6   0e00     MOVLW     0x0                                                                                             
001aa8   5a04     SUBWFB    0x4,0x1,0x0                                                                                     
001aaa   0ef7     MOVLW     0xf7                                                                                            
001aac   c003     MOVFF     0x3,0xfdb                                                                                       
001aae   ffdb                                                                                                               
001ab0   0ef8     MOVLW     0xf8                                                                                            
001ab2   c004     MOVFF     0x4,0xfdb                                                                                       
001ab4   ffdb                                                                                                               
001ab6   c003     MOVFF     0x3,0xfe9                                                                                       
001ab8   ffe9                                                                                                               
001aba   c004     MOVFF     0x4,0xfea                                                                                       
001abc   ffea                                                                                                               
001abe   ec6d     CALL      0x22da,0x0                                                                                      
001ac0   f011                                                                                                               
001ac2   6a02     CLRF      0x2,0x0                                                                                         
001ac4   0e0e     MOVLW     0xe                                                                                             
001ac6   c000     MOVFF     0x0,0xfdb                                                                                       
001ac8   ffdb                                                                                                               
001aca   0e0f     MOVLW     0xf                                                                                             
001acc   c001     MOVFF     0x1,0xfdb                                                                                       
001ace   ffdb                                                                                                               
001ad0   0e10     MOVLW     0x10                                                                                            
001ad2   c002     MOVFF     0x2,0xfdb                                                                                       
001ad4   ffdb                                                                                                               
001ad6   0e0e     MOVLW     0xe                          n = strlenpgm (romstring);                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001ad8   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001ada   ffe6                                                                                                               
001adc   0e0f     MOVLW     0xf                                                                                             
001ade   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001ae0   ffe6                                                                                                               
001ae2   0e10     MOVLW     0x10                                                                                            
001ae4   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001ae6   ffe6                                                                                                               
001ae8   ec8f     CALL      0x5f1e,0x0                                                                                      
001aea   f02f                                                                                                               
001aec   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001aee   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001af0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001af2   0e13     MOVLW     0x13                                                                                            
001af4   c040     MOVFF     0x40,0xfdb                                                                                      
001af6   ffdb                                                                                                               
001af8   0e14     MOVLW     0x14                                                                                            
001afa   c041     MOVFF     0x41,0xfdb                                                                                      
001afc   ffdb                                                                                                               
                                                         /* Normalize the width based on the length of the actual           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string and the precision. */                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001afe   0e06     MOVLW     0x6                          if (have_precision && precision < (unsigned char) n)               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b00   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b02   e005     BZ        0x1b0e                                                                                          
001b04   0e13     MOVLW     0x13                                                                                            
001b06   ecb1     CALL      0x2362,0x0                                                                                      
001b08   f011                                                                                                               
001b0a   e201     BC        0x1b0e                                                                                          
001b0c   db6a     RCALL     0x21e2                         n = precision;                                                   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0021e2   0e05     MOVLW     0x5                                                                                             
0021e4   50db     MOVF      0xdb,0x0,0x0                                                                                    
0021e6   6ee6     MOVWF     0xe6,0x0                                                                                        
0021e8   50d9     MOVF      0xd9,0x0,0x0                                                                                    
0021ea   0f13     ADDLW     0x13                                                                                            
0021ec   d901     RCALL     0x23f0                                                                                          
0021ee   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0021f0   50e7     MOVF      0xe7,0x0,0x0                                                                                    
0021f2   6eee     MOVWF     0xee,0x0                                                                                        
0021f4   6aed     CLRF      0xed,0x0                                                                                        
0021f6   0012     RETURN    0x0                                                                                             
001b0e   ecd5     CALL      0x23aa,0x0                   if (width < (unsigned char) n)                                     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b10   f011                                                                                                               
001b12   e202     BC        0x1b18                                                                                          
0023aa   0e13     MOVLW     0x13                                                                                            
0023ac   50db     MOVF      0xdb,0x0,0x0                                                                                    
0023ae   6ef3     MOVWF     0xf3,0x0                                                                                        
0023b0   0e04     MOVLW     0x4                                                                                             
0023b2   efbe     GOTO      0x217c                                                                                          
0023b4   f010                                                                                                               
001b14   0e13     MOVLW     0x13                           width = n;                                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b16   db37     RCALL     0x2186                                                                                          
001b18   ec98     CALL      0x2330,0x0                   space_cnt = width - (unsigned char) n;                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b1a   f011                                                                                                               
002330   0e04     MOVLW     0x4                                                                                             
002332   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002334   ffe6                                                                                                               
002336   0e13     MOVLW     0x13                                                                                            
002338   50db     MOVF      0xdb,0x0,0x0                                                                                    
00233a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00233c   5ce7     SUBWF     0xe7,0x0,0x0                                                                                    
00233e   df9a     RCALL     0x2274                                                                                          
002340   50db     MOVF      0xdb,0x0,0x0                 count += space_cnt;                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
002342   df04     RCALL     0x214c                                                                                          
                                                         /* we've already calculated the space count that the width         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            will require. now we want the width field to have the           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            number of character to display from the string itself,          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            limited by the length of the actual string and the              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specified precision. */                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b1c   e006     BZ        0x1b2a                       if (have_precision && precision < width)                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b1e   0e04     MOVLW     0x4                                                                                             
001b20   ecb1     CALL      0x2362,0x0                                                                                      
001b22   f011                                                                                                               
001b24   e202     BC        0x1b2a                                                                                          
002344   0e06     MOVLW     0x6                                                                                             
002346   50db     MOVF      0xdb,0x0,0x0                                                                                    
002348   0012     RETURN    0x0                                                                                             
001b26   0e05     MOVLW     0x5                            width = precision;                                               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b28   db2e     RCALL     0x2186                                                                                          
                                                         /* if right justified, we print the spaces before the              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string */                                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b2a   0e03     MOVLW     0x3                          if (!(flags & _FLAG_MINUS))                                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b2c   b0db     BTFSC     0xdb,0x0,0x0                                                                                    
001b2e   d005     BRA       0x1b3a                                                                                          
                                                           {                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b30   dafc     RCALL     0x212a                           if (s_put_n_chars (handle, space_cnt, ' '))                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b32   e001     BZ        0x1b36                                                                                          
001b34   d2d9     BRA       0x20e8                                                                                          
                                                               return EOF;                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b36   0e08     MOVLW     0x8                              space_cnt = 0;                                                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b38   6adb     CLRF      0xdb,0x0                                                                                        
                                                           }                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b3a   0e09     MOVLW     0x9                          cval = 0;                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b3c   6adb     CLRF      0xdb,0x0                                                                                        
001b3e   0e0e     MOVLW     0xe                          for (c = *romstring; c && cval < width; c = *++romstring)          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b40   cfdb     MOVFF     0xfdb,0xff6                                                                                     
001b42   fff6                                                                                                               
001b44   0e0f     MOVLW     0xf                                                                                             
001b46   cfdb     MOVFF     0xfdb,0xff7                                                                                     
001b48   fff7                                                                                                               
001b4a   0e10     MOVLW     0x10                                                                                            
001b4c   cfdb     MOVFF     0xfdb,0xff8                                                                                     
001b4e   fff8                                                                                                               
001b50   0008     TBLRD                                                                                                     
001b52   50f5     MOVF      0xf5,0x0,0x0                                                                                    
001b54   6edf     MOVWF     0xdf,0x0                                                                                        
001b56   50df     MOVF      0xdf,0x0,0x0                                                                                    
001b58   e014     BZ        0x1b82                                                                                          
001b5a   ecdb     CALL      0x23b6,0x0                                                                                      
001b5c   f011                                                                                                               
001b5e   e211     BC        0x1b82                                                                                          
001b76   50d9     MOVF      0xd9,0x0,0x0                                                                                    
001b78   0f0e     ADDLW     0xe                                                                                             
001b7a   6ee9     MOVWF     0xe9,0x0                                                                                        
001b7c   0e00     MOVLW     0x0                                                                                             
001b7e   dbcb     RCALL     0x2316                                                                                          
001b80   d7e7     BRA       0x1b50                                                                                          
0023b6   0e04     MOVLW     0x4                                                                                             
0023b8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0023ba   6ef3     MOVWF     0xf3,0x0                                                                                        
0023bc   0e09     MOVLW     0x9                                                                                             
0023be   efbe     GOTO      0x217c                                                                                          
0023c0   f010                                                                                                               
                                                           {                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b60   ecea     CALL      0x23d4,0x0                       if (putc (c, handle) == EOF)                                   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b62   f011                                                                                                               
001b64   e103     BNZ       0x1b6c                                                                                          
001b66   1c01     COMF      0x1,0x0,0x0                                                                                     
001b68   e101     BNZ       0x1b6c                                                                                          
001b6a   d2be     BRA       0x20e8                                                                                          
                                                               return EOF;                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b6c   dbbb     RCALL     0x22e4                           ++count;                                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b6e   e301     BNC       0x1b72                                                                                          
001b70   2adb     INCF      0xdb,0x1,0x0                                                                                    
001b72   0e09     MOVLW     0x9                              ++cval;                                                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b74   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                           }                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* If there are spaces left, it's left justified.                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            Either way, calling the function unconditionally                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            is smaller code. */                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b82   dad3     RCALL     0x212a                       if (s_put_n_chars (handle, space_cnt, ' '))                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b84   e101     BNZ       0x1b88                                                                                          
001b86   d2b6     BRA       0x20f4                                                                                          
001b88   d2af     BRA       0x20e8                         return EOF;                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 's':                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b8a   dac6     RCALL     0x2118                       ramstring = va_arg (ap, char *);                                   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b8c   0e11     MOVLW     0x11                                                                                            
001b8e   cfee     MOVFF     0xfee,0xfdb                                                                                     
001b90   ffdb                                                                                                               
001b92   0e12     MOVLW     0x12                                                                                            
001b94   cfed     MOVFF     0xfed,0xfdb                                                                                     
001b96   ffdb                                                                                                               
001b98   0e11     MOVLW     0x11                         n = strlen (ramstring);                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001b9a   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001b9c   ffe6                                                                                                               
001b9e   0e12     MOVLW     0x12                                                                                            
001ba0   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001ba2   ffe6                                                                                                               
001ba4   ec81     CALL      0x5f02,0x0                                                                                      
001ba6   f02f                                                                                                               
001ba8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001baa   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001bac   0e13     MOVLW     0x13                                                                                            
001bae   cff3     MOVFF     0xff3,0xfdb                                                                                     
001bb0   ffdb                                                                                                               
001bb2   0e14     MOVLW     0x14                                                                                            
001bb4   cff4     MOVFF     0xff4,0xfdb                                                                                     
001bb6   ffdb                                                                                                               
                                                         /* Normalize the width based on the length of the actual           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string and the precision. */                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001bb8   0e06     MOVLW     0x6                          if (have_precision && precision < (unsigned char) n)               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001bba   50db     MOVF      0xdb,0x0,0x0                                                                                    
001bbc   e004     BZ        0x1bc6                                                                                          
001bbe   0e13     MOVLW     0x13                                                                                            
001bc0   dbd0     RCALL     0x2362                                                                                          
001bc2   e201     BC        0x1bc6                                                                                          
001bc4   db0e     RCALL     0x21e2                         n = precision;                                                   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001bc6   ecd5     CALL      0x23aa,0x0                   if (width < (unsigned char) n)                                     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001bc8   f011                                                                                                               
001bca   e202     BC        0x1bd0                                                                                          
001bcc   0e13     MOVLW     0x13                           width = n;                                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001bce   dadb     RCALL     0x2186                                                                                          
001bd0   dbaf     RCALL     0x2330                       space_cnt = width - (unsigned char) n;                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
002274   6ee7     MOVWF     0xe7,0x0                                                                                        
002276   0e08     MOVLW     0x8                                                                                             
002278   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
00227a   ffdb                                                                                                               
00227c   0012     RETURN    0x0                                                                                             
                                                         count += space_cnt;                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* we've already calculated the space count that the width         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            will require. now we want the width field to have the           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            number of character to display from the string itself,          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            limited by the length of the actual string and the              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specified precision. */                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001bd2   e005     BZ        0x1bde                       if (have_precision && precision < width)                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001bd4   0e04     MOVLW     0x4                                                                                             
001bd6   dbc5     RCALL     0x2362                                                                                          
001bd8   e202     BC        0x1bde                                                                                          
002362   50db     MOVF      0xdb,0x0,0x0                                                                                    
002364   6ef3     MOVWF     0xf3,0x0                                                                                        
002366   0e05     MOVLW     0x5                                                                                             
002368   efbe     GOTO      0x217c                                                                                          
00236a   f010                                                                                                               
001bda   0e05     MOVLW     0x5                            width = precision;                                               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001bdc   dad4     RCALL     0x2186                                                                                          
002186   50db     MOVF      0xdb,0x0,0x0                                                                                    
002188   6ee7     MOVWF     0xe7,0x0                                                                                        
00218a   0e04     MOVLW     0x4                                                                                             
00218c   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
00218e   ffdb                                                                                                               
002190   0012     RETURN    0x0                                                                                             
                                                         /* if right justified, we print the spaces before the              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string */                                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001bde   0e03     MOVLW     0x3                          if (!(flags & _FLAG_MINUS))                                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001be0   b0db     BTFSC     0xdb,0x0,0x0                                                                                    
001be2   d005     BRA       0x1bee                                                                                          
                                                           {                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001be4   daa2     RCALL     0x212a                           if (s_put_n_chars (handle, space_cnt, ' '))                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001be6   e001     BZ        0x1bea                                                                                          
001be8   d27f     BRA       0x20e8                                                                                          
                                                               return EOF;                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001bea   0e08     MOVLW     0x8                              space_cnt = 0;                                                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001bec   6adb     CLRF      0xdb,0x0                                                                                        
                                                           }                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001bee   0e09     MOVLW     0x9                          cval = 0;                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001bf0   6adb     CLRF      0xdb,0x0                                                                                        
001bf2   0e11     MOVLW     0x11                         for (c = *ramstring; c && cval < width; c = *++ramstring)          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001bf4   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
001bf6   ffe9                                                                                                               
001bf8   0e12     MOVLW     0x12                                                                                            
001bfa   cfdb     MOVFF     0xfdb,0xfea                                                                                     
001bfc   ffea                                                                                                               
001bfe   cfef     MOVFF     0xfef,0xfdf                                                                                     
001c00   ffdf                                                                                                               
001c02   50df     MOVF      0xdf,0x0,0x0                                                                                    
001c04   e014     BZ        0x1c2e                                                                                          
001c06   dbd7     RCALL     0x23b6                                                                                          
001c08   e212     BC        0x1c2e                                                                                          
001c1e   0e11     MOVLW     0x11                                                                                            
001c20   2adb     INCF      0xdb,0x1,0x0                                                                                    
001c22   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
001c24   ffe9                                                                                                               
001c26   0e12     MOVLW     0x12                                                                                            
001c28   e3e8     BNC       0x1bfa                                                                                          
001c2a   2adb     INCF      0xdb,0x1,0x0                                                                                    
001c2c   d7e6     BRA       0x1bfa                                                                                          
                                                           {                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c0a   dbe4     RCALL     0x23d4                           if (putc (c, handle) == EOF)                                   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c0c   e103     BNZ       0x1c14                                                                                          
001c0e   1c01     COMF      0x1,0x0,0x0                                                                                     
001c10   e101     BNZ       0x1c14                                                                                          
001c12   d26a     BRA       0x20e8                                                                                          
                                                               return EOF;                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c14   db67     RCALL     0x22e4                           ++count;                                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c16   e301     BNC       0x1c1a                                                                                          
001c18   2adb     INCF      0xdb,0x1,0x0                                                                                    
001c1a   0e09     MOVLW     0x9                              ++cval;                                                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c1c   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                           }                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* If there are spaces left, it's left justified.                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            Either way, calling the function unconditionally                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            is smaller code. */                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c2e   da7d     RCALL     0x212a                       if (s_put_n_chars (handle, space_cnt, ' '))                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c30   e101     BNZ       0x1c34                                                                                          
001c32   d260     BRA       0x20f4                                                                                          
001c34   d259     BRA       0x20e8                         return EOF;                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'd':                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'i':                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c36   0e03     MOVLW     0x3                          flags |= _FLAG_SIGNED;                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c38   8edb     BSF       0xdb,0x7,0x0                                                                                    
                                                         /* fall through */                                                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'o':                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'u':                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'x':                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'X':                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'b':                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'B':                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* This is a bit of a sneaky trick. The 'l' and 'hh' size          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specifiers are valid only for the integer conversions,          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            not the 'p' or 'P' conversions, and are ignored for the         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            latter. By jumping over the additional size specifier           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            checks here we get the best code size since we can              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                            limit the size checks in the remaining code. */                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c3a   0e07     MOVLW     0x7                          if (size == _FMT_LONG)                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c3c   04db     DECF      0xdb,0x0,0x0                                                                                    
001c3e   e110     BNZ       0x1c60                                                                                          
                                                           {                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c40   db95     RCALL     0x236c                           larg = va_arg (ap, long int);                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c42   0e04     MOVLW     0x4                                                                                             
001c44   db5a     RCALL     0x22fa                                                                                          
001c46   0e0a     MOVLW     0xa                                                                                             
001c48   cfee     MOVFF     0xfee,0xfdb                                                                                     
001c4a   ffdb                                                                                                               
001c4c   0e0b     MOVLW     0xb                                                                                             
001c4e   cfee     MOVFF     0xfee,0xfdb                                                                                     
001c50   ffdb                                                                                                               
001c52   0e0c     MOVLW     0xc                                                                                             
001c54   cfee     MOVFF     0xfee,0xfdb                                                                                     
001c56   ffdb                                                                                                               
001c58   0e0d     MOVLW     0xd                                                                                             
001c5a   cfee     MOVFF     0xfee,0xfdb                                                                                     
001c5c   ffdb                                                                                                               
001c5e   d06c     BRA       0x1d38                           goto _do_integer_conversion;                                   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c60   0e07     MOVLW     0x7                          else if (size == _FMT_BYTE)                                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c62   50db     MOVF      0xdb,0x0,0x0                                                                                    
001c64   0803     SUBLW     0x3                                                                                             
001c66   e12c     BNZ       0x1cc0                                                                                          
                                                           {                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c68   0e03     MOVLW     0x3                              if (flags & _FLAG_SIGNED)                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c6a   aedb     BTFSS     0xdb,0x7,0x0                                                                                    
001c6c   d00d     BRA       0x1c88                                                                                          
001c6e   dab2     RCALL     0x21d4                             larg = (signed char) va_arg (ap, int);                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c70   0e02     MOVLW     0x2                                                                                             
001c72   da76     RCALL     0x2160                                                                                          
001c74   cfef     MOVFF     0xfef,0x0                                                                                       
001c76   f000                                                                                                               
001c78   6a01     CLRF      0x1,0x0                                                                                         
001c7a   6a02     CLRF      0x2,0x0                                                                                         
001c7c   6a03     CLRF      0x3,0x0                                                                                         
001c7e   ae00     BTFSS     0x0,0x7,0x0                                                                                     
001c80   d039     BRA       0x1cf4                                                                                          
001c82   6801     SETF      0x1,0x0                                                                                         
001c84   6802     SETF      0x2,0x0                                                                                         
001c86   d035     BRA       0x1cf2                           else                                                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c88   0ef7     MOVLW     0xf7                               larg = (unsigned char) va_arg (ap, unsigned int);            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001c8a   cfdb     MOVFF     0xfdb,0x1                                                                                       
001c8c   f001                                                                                                               
001c8e   0ef8     MOVLW     0xf8                                                                                            
001c90   cfdb     MOVFF     0xfdb,0x2                                                                                       
001c92   f002                                                                                                               
001c94   0e02     MOVLW     0x2                                                                                             
001c96   5e01     SUBWF     0x1,0x1,0x0                                                                                     
001c98   0e00     MOVLW     0x0                                                                                             
001c9a   5a02     SUBWFB    0x2,0x1,0x0                                                                                     
001c9c   0ef7     MOVLW     0xf7                                                                                            
001c9e   c001     MOVFF     0x1,0xfdb                                                                                       
001ca0   ffdb                                                                                                               
001ca2   0ef8     MOVLW     0xf8                                                                                            
001ca4   c002     MOVFF     0x2,0xfdb                                                                                       
001ca6   ffdb                                                                                                               
001ca8   c001     MOVFF     0x1,0xfe9                                                                                       
001caa   ffe9                                                                                                               
001cac   c002     MOVFF     0x2,0xfea                                                                                       
001cae   ffea                                                                                                               
001cb0   cfef     MOVFF     0xfef,0x0                                                                                       
001cb2   f000                                                                                                               
001cb4   0e0a     MOVLW     0xa                                                                                             
001cb6   c000     MOVFF     0x0,0xfdb                                                                                       
001cb8   ffdb                                                                                                               
001cba   0e0b     MOVLW     0xb                                                                                             
001cbc   6adb     CLRF      0xdb,0x0                                                                                        
001cbe   d038     BRA       0x1d30                           goto _do_integer_conversion;                                   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* fall through */                                                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'p':                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'P':                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001cc0   0e07     MOVLW     0x7                          if (size == _FMT_SHLONG)                                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001cc2   50db     MOVF      0xdb,0x0,0x0                                                                                    
001cc4   0802     SUBLW     0x2                                                                                             
001cc6   e109     BNZ       0x1cda                                                                                          
                                                           {                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001cc8   0e03     MOVLW     0x3                              if (flags & _FLAG_SIGNED)                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001cca   aedb     BTFSS     0xdb,0x7,0x0                                                                                    
001ccc   d004     BRA       0x1cd6                                                                                          
001cce   db59     RCALL     0x2382                             larg = va_arg (ap, short long int);                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001cd0   ae02     BTFSS     0x2,0x7,0x0                                                                                     
001cd2   d010     BRA       0x1cf4                                                                                          
00227e   cfee     MOVFF     0xfee,0x0                                                                                       
002280   f000                                                                                                               
002282   cfee     MOVFF     0xfee,0x1                                                                                       
002284   f001                                                                                                               
002286   cfef     MOVFF     0xfef,0x2                                                                                       
002288   f002                                                                                                               
00228a   6a03     CLRF      0x3,0x0                                                                                         
00228c   0012     RETURN    0x0                                                                                             
002382   df28     RCALL     0x21d4                                                                                          
002384   0e03     MOVLW     0x3                                                                                             
002386   deec     RCALL     0x2160                                                                                          
002388   ef3f     GOTO      0x227e                                                                                          
00238a   f011                                                                                                               
001cd4   d00e     BRA       0x1cf2                           else                                                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001cd6   db55     RCALL     0x2382                             larg = va_arg (ap, unsigned short long int);                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001cd8   d00d     BRA       0x1cf4                       else if (flags & _FLAG_SIGNED)                                     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001cda   0e03     MOVLW     0x3                                                                                             
001cdc   aedb     BTFSS     0xdb,0x7,0x0                                                                                    
001cde   d012     BRA       0x1d04                                                                                          
001ce0   da79     RCALL     0x21d4                         larg = va_arg (ap, int);                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001ce2   0e02     MOVLW     0x2                                                                                             
001ce4   da3d     RCALL     0x2160                                                                                          
001ce6   daf9     RCALL     0x22da                                                                                          
001ce8   6a02     CLRF      0x2,0x0                                                                                         
001cea   6a03     CLRF      0x3,0x0                                                                                         
001cec   ae01     BTFSS     0x1,0x7,0x0                                                                                     
001cee   d002     BRA       0x1cf4                                                                                          
001cf0   6802     SETF      0x2,0x0                                                                                         
001cf2   6803     SETF      0x3,0x0                                                                                         
001cf4   dae2     RCALL     0x22ba                                                                                          
001cf6   0e0c     MOVLW     0xc                                                                                             
001cf8   c002     MOVFF     0x2,0xfdb                                                                                       
001cfa   ffdb                                                                                                               
001cfc   0e0d     MOVLW     0xd                                                                                             
001cfe   c003     MOVFF     0x3,0xfdb                                                                                       
001d00   ffdb                                                                                                               
002160   5e04     SUBWF     0x4,0x1,0x0                                                                                     
002162   0e00     MOVLW     0x0                                                                                             
002164   5a05     SUBWFB    0x5,0x1,0x0                                                                                     
002166   0ef7     MOVLW     0xf7                                                                                            
002168   c004     MOVFF     0x4,0xfdb                                                                                       
00216a   ffdb                                                                                                               
00216c   0ef8     MOVLW     0xf8                                                                                            
00216e   c005     MOVFF     0x5,0xfdb                                                                                       
002170   ffdb                                                                                                               
002172   c004     MOVFF     0x4,0xfe9                                                                                       
002174   ffe9                                                                                                               
002176   c005     MOVFF     0x5,0xfea                                                                                       
002178   ffea                                                                                                               
00217a   0012     RETURN    0x0                                                                                             
0021d4   0ef7     MOVLW     0xf7                                                                                            
0021d6   cfdb     MOVFF     0xfdb,0x4                                                                                       
0021d8   f004                                                                                                               
0021da   0ef8     MOVLW     0xf8                                                                                            
0021dc   cfdb     MOVFF     0xfdb,0x5                                                                                       
0021de   f005                                                                                                               
0021e0   0012     RETURN    0x0                                                                                             
0022ba   0e0a     MOVLW     0xa                                                                                             
0022bc   c000     MOVFF     0x0,0xfdb                                                                                       
0022be   ffdb                                                                                                               
0022c0   0e0b     MOVLW     0xb                                                                                             
0022c2   c001     MOVFF     0x1,0xfdb                                                                                       
0022c4   ffdb                                                                                                               
0022c6   0012     RETURN    0x0                                                                                             
0022da   cfee     MOVFF     0xfee,0x0                                                                                       
0022dc   f000                                                                                                               
0022de   cfef     MOVFF     0xfef,0x1                                                                                       
0022e0   f001                                                                                                               
0022e2   0012     RETURN    0x0                                                                                             
001d02   d01a     BRA       0x1d38                       else                                                               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d04   0ef7     MOVLW     0xf7                           larg = va_arg (ap, unsigned int);                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d06   cfdb     MOVFF     0xfdb,0x2                                                                                       
001d08   f002                                                                                                               
001d0a   0ef8     MOVLW     0xf8                                                                                            
001d0c   cfdb     MOVFF     0xfdb,0x3                                                                                       
001d0e   f003                                                                                                               
001d10   0e02     MOVLW     0x2                                                                                             
001d12   5e02     SUBWF     0x2,0x1,0x0                                                                                     
001d14   0e00     MOVLW     0x0                                                                                             
001d16   5a03     SUBWFB    0x3,0x1,0x0                                                                                     
001d18   0ef7     MOVLW     0xf7                                                                                            
001d1a   c002     MOVFF     0x2,0xfdb                                                                                       
001d1c   ffdb                                                                                                               
001d1e   0ef8     MOVLW     0xf8                                                                                            
001d20   c003     MOVFF     0x3,0xfdb                                                                                       
001d22   ffdb                                                                                                               
001d24   c002     MOVFF     0x2,0xfe9                                                                                       
001d26   ffe9                                                                                                               
001d28   c003     MOVFF     0x3,0xfea                                                                                       
001d2a   ffea                                                                                                               
001d2c   dad6     RCALL     0x22da                                                                                          
001d2e   dac5     RCALL     0x22ba                                                                                          
001d30   0e0c     MOVLW     0xc                                                                                             
001d32   6adb     CLRF      0xdb,0x0                                                                                        
001d34   0e0d     MOVLW     0xd                                                                                             
001d36   6adb     CLRF      0xdb,0x0                                                                                        
                                                       _do_integer_conversion:                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* default precision is 1 */                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d38   0e06     MOVLW     0x6                          if (!have_precision)                                               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d3a   50db     MOVF      0xdb,0x0,0x0                                                                                    
001d3c   e105     BNZ       0x1d48                                                                                          
001d3e   0e01     MOVLW     0x1                            precision = 1;                                                   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d40   6ef3     MOVWF     0xf3,0x0                                                                                        
001d42   0e05     MOVLW     0x5                                                                                             
001d44   cff3     MOVFF     0xff3,0xfdb                                                                                     
001d46   ffdb                                                                                                               
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                         {                                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d48   0e15     MOVLW     0x15                           unsigned char digit_cnt = 0;                                     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d4a   6adb     CLRF      0xdb,0x0                                                                                        
001d4c   0e16     MOVLW     0x16                           unsigned char prefix_cnt = 0;                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d4e   6adb     CLRF      0xdb,0x0                                                                                        
                                                           unsigned char sign_char;                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* A 32 bit number will require at most 32 digits in the         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              string representation (binary format). */                     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           char buf[33];                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* Start storing digits least-significant first */               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d50   50d9     MOVF      0xd9,0x0,0x0                   char *q = &buf[31];                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d52   0f37     ADDLW     0x37                                                                                            
001d54   6e00     MOVWF     0x0,0x0                                                                                         
001d56   0e00     MOVLW     0x0                                                                                             
001d58   20da     ADDWFC    0xda,0x0,0x0                                                                                    
001d5a   6e01     MOVWF     0x1,0x0                                                                                         
001d5c   0e39     MOVLW     0x39                                                                                            
001d5e   c000     MOVFF     0x0,0xfdb                                                                                       
001d60   ffdb                                                                                                               
001d62   0e3a     MOVLW     0x3a                                                                                            
001d64   c001     MOVFF     0x1,0xfdb                                                                                       
001d66   ffdb                                                                                                               
                                                           /* null terminate the string */                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d68   0e38     MOVLW     0x38                           buf[32] = '\0';                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d6a   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d6c   0e08     MOVLW     0x8                            space_cnt = 0;                                                   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d6e   6adb     CLRF      0xdb,0x0                                                                                        
001d70   0e0a     MOVLW     0xa                            size = 10;                                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d72   daae     RCALL     0x22d0                                                                                          
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d74   50df     MOVF      0xdf,0x0,0x0                   switch (c)                                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d76   0a78     XORLW     0x78                                                                                            
001d78   e012     BZ        0x1d9e                                                                                          
001d7a   0a20     XORLW     0x20                                                                                            
001d7c   e010     BZ        0x1d9e                                                                                          
001d7e   0a28     XORLW     0x28                                                                                            
001d80   e00c     BZ        0x1d9a                                                                                          
001d82   0a20     XORLW     0x20                                                                                            
001d84   e00a     BZ        0x1d9a                                                                                          
001d86   0a3f     XORLW     0x3f                                                                                            
001d88   e006     BZ        0x1d96                                                                                          
001d8a   0a0d     XORLW     0xd                                                                                             
001d8c   e002     BZ        0x1d92                                                                                          
001d8e   0a20     XORLW     0x20                                                                                            
001d90   e108     BNZ       0x1da2                                                                                          
                                                             {                                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'b':                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'B':                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d92   0e02     MOVLW     0x2                                size = 2;                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d94   d005     BRA       0x1da0                             break;                                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'o':                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d96   0e08     MOVLW     0x8                                size = 8;                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d98   d003     BRA       0x1da0                             break;                                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'p':                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'P':                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                               /* from here on out, treat 'p' conversions just              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                  like 'x' conversions. */                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d9a   0e08     MOVLW     0x8                                c += 'x' - 'p';                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d9c   26df     ADDWF     0xdf,0x1,0x0                                                                                    
                                                               /* fall through */                                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'x':                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'X':                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001d9e   0e10     MOVLW     0x10                               size = 16;                                                   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001da0   da97     RCALL     0x22d0                                                                                          
0022d0   6ef3     MOVWF     0xf3,0x0                                                                                        
0022d2   0e07     MOVLW     0x7                                                                                             
0022d4   cff3     MOVFF     0xff3,0xfdb                                                                                     
0022d6   ffdb                                                                                                               
0022d8   0012     RETURN    0x0                                                                                             
                                                               break;                                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if it's an unsigned conversion, we should ignore the          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              ' ' and '+' flags */                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001da2   0e03     MOVLW     0x3                            if (!(flags & _FLAG_SIGNED))                                     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001da4   bedb     BTFSC     0xdb,0x7,0x0                                                                                    
001da6   d002     BRA       0x1dac                                                                                          
001da8   92db     BCF       0xdb,0x1,0x0                     flags &= ~(_FLAG_PLUS | _FLAG_SPACE);                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001daa   94db     BCF       0xdb,0x2,0x0                                                                                    
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if it's a negative value, we need to negate the               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              unsigned version before we convert to text. Using             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              unsigned for this allows us to (ab)use the 2's                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              complement system to avoid overflow and be able to            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              adequately handle LONG_MIN.                                   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              We'll figure out what sign character to print, if             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              any, here as well. */                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001dac   50db     MOVF      0xdb,0x0,0x0                   if (flags & _FLAG_SIGNED && ((long) larg < 0))                   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001dae   0b80     ANDLW     0x80                                                                                            
001db0   e026     BZ        0x1dfe                                                                                          
001db2   da8a     RCALL     0x22c8                                                                                          
001db4   0e03     MOVLW     0x3                                                                                             
001db6   50eb     MOVF      0xeb,0x0,0x0                                                                                    
001db8   0a00     XORLW     0x0                                                                                             
001dba   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
001dbc   d002     BRA       0x1dc2                                                                                          
001dbe   90d8     BCF       0xd8,0x0,0x0                                                                                    
001dc0   d008     BRA       0x1dd2                                                                                          
001dc2   0e00     MOVLW     0x0                                                                                             
001dc4   5cee     SUBWF     0xee,0x0,0x0                                                                                    
001dc6   0e00     MOVLW     0x0                                                                                             
001dc8   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
001dca   0e00     MOVLW     0x0                                                                                             
001dcc   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
001dce   0e00     MOVLW     0x0                                                                                             
001dd0   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
001dd2   e215     BC        0x1dfe                                                                                          
0022c8   50d9     MOVF      0xd9,0x0,0x0                                                                                    
0022ca   0f0a     ADDLW     0xa                                                                                             
0022cc   eff8     GOTO      0x23f0                                                                                          
0022ce   f011                                                                                                               
0023f0   6ee9     MOVWF     0xe9,0x0                                                                                        
0023f2   0e00     MOVLW     0x0                                                                                             
0023f4   20da     ADDWFC    0xda,0x0,0x0                                                                                    
0023f6   6eea     MOVWF     0xea,0x0                                                                                        
0023f8   0012     RETURN    0x0                                                                                             
                                                             {                                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001dd4   da11     RCALL     0x21f8                             larg = -(long) larg;                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001dd6   6844     SETF      0x44,0x0                                                                                        
001dd8   6845     SETF      0x45,0x0                                                                                        
001dda   6846     SETF      0x46,0x0                                                                                        
001ddc   6847     SETF      0x47,0x0                                                                                        
001dde   ec15     CALL      0x5e2a,0x0                                                                                      
001de0   f02f                                                                                                               
001de2   0e0a     MOVLW     0xa                                                                                             
001de4   c03b     MOVFF     0x3b,0xfdb                                                                                      
001de6   ffdb                                                                                                               
001de8   0e0b     MOVLW     0xb                                                                                             
001dea   c03c     MOVFF     0x3c,0xfdb                                                                                      
001dec   ffdb                                                                                                               
001dee   0e0c     MOVLW     0xc                                                                                             
001df0   c03d     MOVFF     0x3d,0xfdb                                                                                      
001df2   ffdb                                                                                                               
001df4   0e0d     MOVLW     0xd                                                                                             
001df6   c03e     MOVFF     0x3e,0xfdb                                                                                      
001df8   ffdb                                                                                                               
0021f8   0e0a     MOVLW     0xa                                                                                             
0021fa   cfdb     MOVFF     0xfdb,0x3f                                                                                      
0021fc   f03f                                                                                                               
0021fe   0e0b     MOVLW     0xb                                                                                             
002200   cfdb     MOVFF     0xfdb,0x40                                                                                      
002202   f040                                                                                                               
002204   0e0c     MOVLW     0xc                                                                                             
002206   cfdb     MOVFF     0xfdb,0x41                                                                                      
002208   f041                                                                                                               
00220a   0e0d     MOVLW     0xd                                                                                             
00220c   cfdb     MOVFF     0xfdb,0x42                                                                                      
00220e   f042                                                                                                               
002210   0012     RETURN    0x0                                                                                             
001dfa   0e2d     MOVLW     0x2d                               sign_char = '-';                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                               ++digit_cnt;                                                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001dfc   d008     BRA       0x1e0e                         else if (flags & _FLAG_PLUS)                                     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001dfe   0e03     MOVLW     0x3                                                                                             
001e00   a2db     BTFSS     0xdb,0x1,0x0                                                                                    
001e02   d002     BRA       0x1e08                                                                                          
                                                             {                                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001e04   0e2b     MOVLW     0x2b                               sign_char = '+';                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                               ++digit_cnt;                                                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001e06   d003     BRA       0x1e0e                         else if (flags & _FLAG_SPACE)                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001e08   a4db     BTFSS     0xdb,0x2,0x0                                                                                    
001e0a   d008     BRA       0x1e1c                                                                                          
                                                             {                                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001e0c   0e20     MOVLW     0x20                               sign_char = ' ';                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001e0e   6ef3     MOVWF     0xf3,0x0                                                                                        
001e10   0e17     MOVLW     0x17                                                                                            
001e12   cff3     MOVFF     0xff3,0xfdb                                                                                     
001e14   ffdb                                                                                                               
001e16   0e15     MOVLW     0x15                               ++digit_cnt;                                                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001e18   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                             }                                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001e1a   d002     BRA       0x1e20                         else                                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001e1c   0e17     MOVLW     0x17                             sign_char = '\0';                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001e1e   6adb     CLRF      0xdb,0x0                                                                                        
                                                           /* get the digits for the actual number. If the                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              precision is zero and the value is zero, the result           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              is no characters. */                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001e20   0e05     MOVLW     0x5                            if (precision || larg)                                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001e22   50db     MOVF      0xdb,0x0,0x0                                                                                    
001e24   e103     BNZ       0x1e2c                                                                                          
001e26   d9b5     RCALL     0x2192                                                                                          
001e28   e101     BNZ       0x1e2c                                                                                          
001e2a   d089     BRA       0x1f3e                                                                                          
002192   0e0a     MOVLW     0xa                                                                                             
002194   cfdb     MOVFF     0xfdb,0x0                                                                                       
002196   f000                                                                                                               
002198   0e0b     MOVLW     0xb                                                                                             
00219a   cfdb     MOVFF     0xfdb,0x1                                                                                       
00219c   f001                                                                                                               
00219e   0e0c     MOVLW     0xc                                                                                             
0021a0   cfdb     MOVFF     0xfdb,0x2                                                                                       
0021a2   f002                                                                                                               
0021a4   0e0d     MOVLW     0xd                                                                                             
0021a6   cfdb     MOVFF     0xfdb,0x3                                                                                       
0021a8   f003                                                                                                               
0021aa   5000     MOVF      0x0,0x0,0x0                                                                                     
0021ac   1001     IORWF     0x1,0x0,0x0                                                                                     
0021ae   1002     IORWF     0x2,0x0,0x0                                                                                     
0021b0   1003     IORWF     0x3,0x0,0x0                                                                                     
0021b2   0012     RETURN    0x0                                                                                             
                                                             {                                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                               do                                                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                 {                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001e2c   0ea2     MOVLW     0xa2                                   cval = s_digits[larg % size];                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001e2e   6e00     MOVWF     0x0,0x0                                                                                         
001e30   0e61     MOVLW     0x61                                                                                            
001e32   6e01     MOVWF     0x1,0x0                                                                                         
001e34   0e00     MOVLW     0x0                                                                                             
001e36   6e02     MOVWF     0x2,0x0                                                                                         
001e38   0e07     MOVLW     0x7                                                                                             
001e3a   cfdb     MOVFF     0xfdb,0x3                                                                                       
001e3c   f003                                                                                                               
001e3e   6a04     CLRF      0x4,0x0                                                                                         
001e40   6a05     CLRF      0x5,0x0                                                                                         
001e42   6a06     CLRF      0x6,0x0                                                                                         
001e44   c003     MOVFF     0x3,0x44                                                                                        
001e46   f044                                                                                                               
001e48   c004     MOVFF     0x4,0x45                                                                                        
001e4a   f045                                                                                                               
001e4c   c005     MOVFF     0x5,0x46                                                                                        
001e4e   f046                                                                                                               
001e50   c006     MOVFF     0x6,0x47                                                                                        
001e52   f047                                                                                                               
001e54   d9d1     RCALL     0x21f8                                                                                          
001e56   ec19     CALL      0x6032,0x0                                                                                      
001e58   f030                                                                                                               
001e5a   5000     MOVF      0x0,0x0,0x0                                                                                     
001e5c   243b     ADDWF     0x3b,0x0,0x0                                                                                    
001e5e   6ef3     MOVWF     0xf3,0x0                                                                                        
001e60   5001     MOVF      0x1,0x0,0x0                                                                                     
001e62   203c     ADDWFC    0x3c,0x0,0x0                                                                                    
001e64   6ef4     MOVWF     0xf4,0x0                                                                                        
001e66   5002     MOVF      0x2,0x0,0x0                                                                                     
001e68   203d     ADDWFC    0x3d,0x0,0x0                                                                                    
001e6a   6ef8     MOVWF     0xf8,0x0                                                                                        
001e6c   cff4     MOVFF     0xff4,0xff7                                                                                     
001e6e   fff7                                                                                                               
001e70   cff3     MOVFF     0xff3,0xff6                                                                                     
001e72   fff6                                                                                                               
001e74   0008     TBLRD                                                                                                     
001e76   0e09     MOVLW     0x9                                                                                             
001e78   cff5     MOVFF     0xff5,0xfdb                                                                                     
001e7a   ffdb                                                                                                               
001e7c   0e58     MOVLW     0x58                                   if (c == 'X' && cval >= 'a')                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001e7e   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001e80   e10f     BNZ       0x1ea0                                                                                          
001e82   0e61     MOVLW     0x61                                                                                            
001e84   6ef3     MOVWF     0xf3,0x0                                                                                        
001e86   0e09     MOVLW     0x9                                                                                             
001e88   d979     RCALL     0x217c                                                                                          
001e8a   e30a     BNC       0x1ea0                                                                                          
00217c   cfdb     MOVFF     0xfdb,0xff4                                                                                     
00217e   fff4                                                                                                               
002180   50f3     MOVF      0xf3,0x0,0x0                                                                                    
002182   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
002184   0012     RETURN    0x0                                                                                             
001e8c   0e20     MOVLW     0x20                                     cval -= 'a' - 'A';                                     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001e8e   6e00     MOVWF     0x0,0x0                                                                                         
001e90   0e09     MOVLW     0x9                                                                                             
001e92   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
001e94   ffe7                                                                                                               
001e96   5000     MOVF      0x0,0x0,0x0                                                                                     
001e98   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
001e9a   0e09     MOVLW     0x9                                                                                             
001e9c   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001e9e   ffdb                                                                                                               
001ea0   0e07     MOVLW     0x7                                    larg /= size;                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001ea2   cfdb     MOVFF     0xfdb,0x0                                                                                       
001ea4   f000                                                                                                               
001ea6   6a01     CLRF      0x1,0x0                                                                                         
001ea8   6a02     CLRF      0x2,0x0                                                                                         
001eaa   6a03     CLRF      0x3,0x0                                                                                         
001eac   da0d     RCALL     0x22c8                                                                                          
001eae   c000     MOVFF     0x0,0x44                                                                                        
001eb0   f044                                                                                                               
001eb2   c001     MOVFF     0x1,0x45                                                                                        
001eb4   f045                                                                                                               
001eb6   c002     MOVFF     0x2,0x46                                                                                        
001eb8   f046                                                                                                               
001eba   c003     MOVFF     0x3,0x47                                                                                        
001ebc   f047                                                                                                               
001ebe   cfee     MOVFF     0xfee,0x3f                                                                                      
001ec0   f03f                                                                                                               
001ec2   cfee     MOVFF     0xfee,0x40                                                                                      
001ec4   f040                                                                                                               
001ec6   cfee     MOVFF     0xfee,0x41                                                                                      
001ec8   f041                                                                                                               
001eca   cfef     MOVFF     0xfef,0x42                                                                                      
001ecc   f042                                                                                                               
001ece   ec19     CALL      0x6032,0x0                                                                                      
001ed0   f030                                                                                                               
001ed2   c042     MOVFF     0x42,0xfed                                                                                      
001ed4   ffed                                                                                                               
001ed6   c041     MOVFF     0x41,0xfed                                                                                      
001ed8   ffed                                                                                                               
001eda   c040     MOVFF     0x40,0xfed                                                                                      
001edc   ffed                                                                                                               
001ede   c03f     MOVFF     0x3f,0xfef                                                                                      
001ee0   ffef                                                                                                               
001ee2   0e39     MOVLW     0x39                                   *q-- = cval;                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001ee4   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
001ee6   ffe9                                                                                                               
001ee8   06db     DECF      0xdb,0x1,0x0                                                                                    
001eea   0e3a     MOVLW     0x3a                                                                                            
001eec   cfdb     MOVFF     0xfdb,0xfea                                                                                     
001eee   ffea                                                                                                               
001ef0   e201     BC        0x1ef4                                                                                          
001ef2   06db     DECF      0xdb,0x1,0x0                                                                                    
001ef4   0e09     MOVLW     0x9                                                                                             
001ef6   cfdb     MOVFF     0xfdb,0xfef                                                                                     
001ef8   ffef                                                                                                               
001efa   0e15     MOVLW     0x15                                   ++digit_cnt;                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001efc   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                                 }                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001efe   d949     RCALL     0x2192                             while (larg);                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f00   e195     BNZ       0x1e2c                                                                                          
                                                               /* if the '#' flag was specified and we're dealing           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                  with an 'o', 'b', 'B', 'x', or 'X' conversion,            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                  we need a bit more. */                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f02   0e03     MOVLW     0x3                                if (flags & _FLAG_OCTO)                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f04   a6db     BTFSS     0xdb,0x3,0x0                                                                                    
001f06   d01d     BRA       0x1f42                                                                                          
                                                                 {                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f08   0e6f     MOVLW     0x6f                                   if (c == 'o')                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f0a   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001f0c   e106     BNZ       0x1f1a                                                                                          
                                                                     {                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                       /* per the standard, for octal, the '#' flag         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                          makes the precision be at least one more          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                          than the number of digits in the number */        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f0e   d9bf     RCALL     0x228e                                     if (precision <= digit_cnt)                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f10   e318     BNC       0x1f42                                                                                          
00228e   0e05     MOVLW     0x5                                                                                             
002290   cfdb     MOVFF     0xfdb,0x0                                                                                       
002292   f000                                                                                                               
002294   0e15     MOVLW     0x15                                                                                            
002296   50db     MOVF      0xdb,0x0,0x0                                                                                    
002298   80d8     BSF       0xd8,0x0,0x0                                                                                    
00229a   5400     SUBFWB    0x0,0x0,0x0                                                                                     
00229c   0012     RETURN    0x0                                                                                             
001f12   0e15     MOVLW     0x15                                         precision = digit_cnt + 1;                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f14   28db     INCF      0xdb,0x0,0x0                                                                                    
001f16   da59     RCALL     0x23ca                                                                                          
                                                                     }                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f18   d014     BRA       0x1f42                                 else if (c == 'x'                                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f1a   0e78     MOVLW     0x78                                                                                            
001f1c   5cdf     SUBWF     0xdf,0x0,0x0                                    || c == 'X' || c == 'b' || c == 'B')            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f1e   e009     BZ        0x1f32                                                                                          
001f20   0e58     MOVLW     0x58                                                                                            
001f22   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001f24   e006     BZ        0x1f32                                                                                          
001f26   0e62     MOVLW     0x62                                                                                            
001f28   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001f2a   e003     BZ        0x1f32                                                                                          
001f2c   0e42     MOVLW     0x42                                                                                            
001f2e   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001f30   e108     BNZ       0x1f42                                                                                          
001f32   0e02     MOVLW     0x2                                      prefix_cnt = 2;                                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f34   6ef3     MOVWF     0xf3,0x0                                                                                        
001f36   0e16     MOVLW     0x16                                                                                            
001f38   cff3     MOVFF     0xff3,0xfdb                                                                                     
001f3a   ffdb                                                                                                               
                                                                 }                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f3c   d002     BRA       0x1f42                         else                                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f3e   0e15     MOVLW     0x15                             digit_cnt = 0;                                                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f40   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* The leading zero count depends on whether the '0'             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              flag was specified or not. If it was not, then the            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              count is the difference between the specified                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              precision and the number of digits (including the             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              sign character, if any) to be printed; otherwise,             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              it's as if the precision were equal to the max of             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              the specified precision and the field width. If a             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              precision was specified, the '0' flag is ignored,             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              however. */                                                   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f42   0e03     MOVLW     0x3                            if ((flags & _FLAG_ZERO) && (width > precision)                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f44   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f46   0b10     ANDLW     0x10                                                                                            
001f4a   0e04     MOVLW     0x4                                                                                             
001f4c   cfdb     MOVFF     0xfdb,0x0                                                                                       
001f4e   f000                                                                                                               
001f50   0e05     MOVLW     0x5                                                                                             
001f52   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f54   80d8     BSF       0xd8,0x0,0x0                                                                                    
001f56   5400     SUBFWB    0x0,0x0,0x0                                                                                     
001f48   e00e     BZ        0x1f66                             && !have_precision)                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f58   e206     BC        0x1f66                                                                                          
001f5a   0e06     MOVLW     0x6                                                                                             
001f5c   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f5e   e103     BNZ       0x1f66                                                                                          
001f60   0e04     MOVLW     0x4                              precision = width;                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f62   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f64   da32     RCALL     0x23ca                                                                                          
                                                           /* for the rest of the processing, precision contains            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              the leading zero count for the conversion. */                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f66   d993     RCALL     0x228e                         if (precision > digit_cnt)                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f68   e20a     BC        0x1f7e                                                                                          
001f6a   0e05     MOVLW     0x5                              precision -= digit_cnt;                                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f6c   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
001f6e   ffe7                                                                                                               
001f70   0e15     MOVLW     0x15                                                                                            
001f72   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f74   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
001f76   0e05     MOVLW     0x5                                                                                             
001f78   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001f7a   ffdb                                                                                                               
001f7c   d002     BRA       0x1f82                         else                                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f7e   0e05     MOVLW     0x5                              precision = 0;                                                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f80   6adb     CLRF      0xdb,0x0                                                                                        
                                                           /* the space count is the difference between the field           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              width and the digit count plus the leading zero               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              count. If the width is less than the digit count              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              plus the leading zero count, the space count is               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              zero. */                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f82   0e04     MOVLW     0x4                            if (width > precision + digit_cnt + prefix_cnt)                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f84   cfdb     MOVFF     0xfdb,0x0                                                                                       
001f86   f000                                                                                                               
001f88   0e16     MOVLW     0x16                                                                                            
001f8a   d943     RCALL     0x2212                                                                                          
001f8c   80d8     BSF       0xd8,0x0,0x0                                                                                    
001f8e   5400     SUBFWB    0x0,0x0,0x0                                                                                     
001f90   e214     BC        0x1fba                                                                                          
002212   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002214   ffe6                                                                                                               
002216   0e15     MOVLW     0x15                                                                                            
002218   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00221a   ffe6                                                                                                               
00221c   0e05     MOVLW     0x5                                                                                             
00221e   50db     MOVF      0xdb,0x0,0x0                                                                                    
002220   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002222   24e7     ADDWF     0xe7,0x0,0x0                                                                                    
002224   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002226   24e7     ADDWF     0xe7,0x0,0x0                                                                                    
002228   0012     RETURN    0x0                                                                                             
                                                             space_cnt =                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f92   0e16     MOVLW     0x16                               width - precision - digit_cnt - prefix_cnt;                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001f94   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001f96   ffe6                                                                                                               
001f98   0e15     MOVLW     0x15                                                                                            
001f9a   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001f9c   ffe6                                                                                                               
001f9e   0e04     MOVLW     0x4                                                                                             
001fa0   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001fa2   ffe6                                                                                                               
001fa4   0e05     MOVLW     0x5                                                                                             
001fa6   50db     MOVF      0xdb,0x0,0x0                                                                                    
001fa8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001faa   5ce7     SUBWF     0xe7,0x0,0x0                                                                                    
001fac   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001fae   80d8     BSF       0xd8,0x0,0x0                                                                                    
001fb0   54e7     SUBFWB    0xe7,0x0,0x0                                                                                    
001fb2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001fb4   80d8     BSF       0xd8,0x0,0x0                                                                                    
001fb6   54e7     SUBFWB    0xe7,0x0,0x0                                                                                    
001fb8   d95d     RCALL     0x2274                                                                                          
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* for output, we check the justification, if it's               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              right justified and the space count is positive, we           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              emit the space characters first. */                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001fba   0e03     MOVLW     0x3                            if (!(flags & _FLAG_MINUS) && space_cnt)                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001fbc   50db     MOVF      0xdb,0x0,0x0                                                                                    
001fbe   0b01     ANDLW     0x1                                                                                             
001fc0   e10b     BNZ       0x1fd8                                                                                          
001fc2   0e08     MOVLW     0x8                                                                                             
001fc4   50db     MOVF      0xdb,0x0,0x0                                                                                    
001fc6   e008     BZ        0x1fd8                                                                                          
                                                             {                                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001fc8   d8b0     RCALL     0x212a                             if (s_put_n_chars (handle, space_cnt, ' '))                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001fca   e001     BZ        0x1fce                                                                                          
001fcc   d08d     BRA       0x20e8                                                                                          
                                                                 return EOF;                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001fce   0e08     MOVLW     0x8                                count += space_cnt;                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001fd0   50db     MOVF      0xdb,0x0,0x0                                                                                    
001fd2   d8bc     RCALL     0x214c                                                                                          
001fd4   0e08     MOVLW     0x8                                space_cnt = 0;                                               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001fd6   6adb     CLRF      0xdb,0x0                                                                                        
                                                             }                                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if we have a sign character to print, that comes              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              next */                                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001fd8   0e17     MOVLW     0x17                           if (sign_char)                                                   C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001fda   50db     MOVF      0xdb,0x0,0x0                                                                                    
001fdc   e007     BZ        0x1fec                                                                                          
001fde   d986     RCALL     0x22ec                           if (putc (sign_char, handle) == EOF)                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001fe0   0e17     MOVLW     0x17                                                                                            
001fe2   d9ef     RCALL     0x23c2                                                                                          
001fe4   e103     BNZ       0x1fec                                                                                          
001fe6   1c01     COMF      0x1,0x0,0x0                                                                                     
001fe8   e101     BNZ       0x1fec                                                                                          
001fea   d07e     BRA       0x20e8                                                                                          
                                                               return EOF;                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if we have a prefix (0b, 0B, 0x or 0X), that's next */        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001fec   0e16     MOVLW     0x16                           if (prefix_cnt)                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001fee   50db     MOVF      0xdb,0x0,0x0                                                                                    
001ff0   e016     BZ        0x201e                                                                                          
                                                             {                                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001ff2   d97c     RCALL     0x22ec                             if (putc ('0', handle) == EOF)                               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
001ff4   0e30     MOVLW     0x30                                                                                            
001ff6   6ee6     MOVWF     0xe6,0x0                                                                                        
001ff8   d89d     RCALL     0x2134                                                                                          
001ffa   e102     BNZ       0x2000                                                                                          
001ffc   1c01     COMF      0x1,0x0,0x0                                                                                     
001ffe   e074     BZ        0x20e8                                                                                          
                                                                 return EOF;                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
002000   d975     RCALL     0x22ec                             if (putc (c, handle) == EOF)                                 C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
002002   cfdf     MOVFF     0xfdf,0xfe6                                                                                     
002004   ffe6                                                                                                               
002006   ecd3     CALL      0x5da6,0x0                                                                                      
002008   f02e                                                                                                               
00200a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00200c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00200e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002010   cff4     MOVFF     0xff4,0x1                                                                                       
002012   f001                                                                                                               
002014   0100     MOVLB     0x0                                                                                             
002016   1cf3     COMF      0xf3,0x0,0x0                                                                                    
002018   e102     BNZ       0x201e                                                                                          
00201a   1c01     COMF      0x1,0x0,0x0                                                                                     
00201c   e065     BZ        0x20e8                                                                                          
                                                                 return EOF;                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if we have leading zeros, they follow. the prefix, if any     C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              is included in the number of digits when determining how      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              many leading zeroes are needed. */                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00201e   0e05     MOVLW     0x5                            if (precision > prefix_cnt)                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
002020   cfdb     MOVFF     0xfdb,0x0                                                                                       
002022   f000                                                                                                               
002024   0e16     MOVLW     0x16                                                                                            
002026   50db     MOVF      0xdb,0x0,0x0                                                                                    
002028   80d8     BSF       0xd8,0x0,0x0                                                                                    
00202a   5400     SUBFWB    0x0,0x0,0x0                                                                                     
00202c   e209     BC        0x2040                                                                                          
00202e   0e05     MOVLW     0x5                              precision -= prefix_cnt;                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
002030   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
002032   ffe7                                                                                                               
002034   0e16     MOVLW     0x16                                                                                            
002036   50db     MOVF      0xdb,0x0,0x0                                                                                    
002038   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
00203a   0e05     MOVLW     0x5                                                                                             
00203c   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
00203e   ffdb                                                                                                               
002040   0e30     MOVLW     0x30                           if (s_put_n_chars (handle, precision, '0'))                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
002042   6ee6     MOVWF     0xe6,0x0                                                                                        
002044   0e05     MOVLW     0x5                                                                                             
002046   d9c9     RCALL     0x23da                                                                                          
002048   e14f     BNZ       0x20e8                                                                                          
00238c   ecec     CALL      0x17d8,0x0                                                                                      
00238e   f00b                                                                                                               
002390   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002392   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002394   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002396   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002398   0900     IORLW     0x0                                                                                             
00239a   0012     RETURN    0x0                                                                                             
0023da   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0023dc   ffe6                                                                                                               
0023de   df86     RCALL     0x22ec                                                                                          
0023e0   efc6     GOTO      0x238c                                                                                          
0023e2   f011                                                                                                               
                                                             return EOF;                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* print the actual number */                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00204a   0e39     MOVLW     0x39                           for (cval = *++q; cval; cval = *++q)                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00204c   2adb     INCF      0xdb,0x1,0x0                                                                                    
00204e   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002050   ffe9                                                                                                               
002052   0e3a     MOVLW     0x3a                                                                                            
002054   e301     BNC       0x2058                                                                                          
002056   2adb     INCF      0xdb,0x1,0x0                                                                                    
002058   cfdb     MOVFF     0xfdb,0xfea                                                                                     
00205a   ffea                                                                                                               
00205c   0e09     MOVLW     0x9                                                                                             
00205e   cfef     MOVFF     0xfef,0xfdb                                                                                     
002060   ffdb                                                                                                               
002062   50db     MOVF      0xdb,0x0,0x0                                                                                    
002064   e00e     BZ        0x2082                                                                                          
002072   0e39     MOVLW     0x39                                                                                            
002074   2adb     INCF      0xdb,0x1,0x0                                                                                    
002076   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002078   ffe9                                                                                                               
00207a   0e3a     MOVLW     0x3a                                                                                            
00207c   e3ed     BNC       0x2058                                                                                          
00207e   2adb     INCF      0xdb,0x1,0x0                                                                                    
002080   d7eb     BRA       0x2058                                                                                          
002066   d942     RCALL     0x22ec                           if (putc (cval, handle) == EOF)                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
002068   0e09     MOVLW     0x9                                                                                             
00206a   d9ab     RCALL     0x23c2                                                                                          
00206c   e102     BNZ       0x2072                                                                                          
00206e   1c01     COMF      0x1,0x0,0x0                                                                                     
002070   e03b     BZ        0x20e8                                                                                          
0023c2   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0023c4   ffe6                                                                                                               
0023c6   ef9a     GOTO      0x2134                                                                                          
0023c8   f010                                                                                                               
                                                               return EOF;                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if there are any spaces left, they go to right-pad            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                              the field */                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
002082   d853     RCALL     0x212a                         if (s_put_n_chars (handle, space_cnt, ' '))                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
002084   e131     BNZ       0x20e8                                                                                          
00212a   0e20     MOVLW     0x20                                                                                            
00212c   6ee6     MOVWF     0xe6,0x0                                                                                        
00212e   0e08     MOVLW     0x8                                                                                             
002130   efed     GOTO      0x23da                                                                                          
002132   f011                                                                                                               
0022ec   0efc     MOVLW     0xfc                                                                                            
0022ee   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0022f0   ffe6                                                                                                               
0022f2   0efd     MOVLW     0xfd                                                                                            
0022f4   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0022f6   ffe6                                                                                                               
0022f8   0012     RETURN    0x0                                                                                             
                                                             return EOF;                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
002086   0e16     MOVLW     0x16                           count += precision + digit_cnt + space_cnt + prefix_cnt;         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
002088   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00208a   ffe6                                                                                                               
00208c   0e08     MOVLW     0x8                                                                                             
00208e   d8c1     RCALL     0x2212                                                                                          
002090   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002092   24e7     ADDWF     0xe7,0x0,0x0                                                                                    
002094   d85b     RCALL     0x214c                                                                                          
00214c   6e00     MOVWF     0x0,0x0                                                                                         
00214e   6a01     CLRF      0x1,0x0                                                                                         
002150   50d9     MOVF      0xd9,0x0,0x0                                                                                    
002152   0f01     ADDLW     0x1                                                                                             
002154   d94d     RCALL     0x23f0                                                                                          
002156   5000     MOVF      0x0,0x0,0x0                                                                                     
002158   26ee     ADDWF     0xee,0x1,0x0                                                                                    
00215a   5001     MOVF      0x1,0x0,0x0                                                                                     
00215c   22ed     ADDWFC    0xed,0x1,0x0                                                                                    
00215e   0012     RETURN    0x0                                                                                             
                                                         }                                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
002096   d02e     BRA       0x20f4                       break;                                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'n':                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
002098   0e07     MOVLW     0x7                          switch (size)                                                      C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
00209a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00209c   0a03     XORLW     0x3                                                                                             
00209e   e01c     BZ        0x20d8                                                                                          
0020a0   0a01     XORLW     0x1                                                                                             
0020a2   e014     BZ        0x20cc                                                                                          
0020a4   0a03     XORLW     0x3                                                                                             
0020a6   e007     BZ        0x20b6                                                                                          
                                                           {                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case _FMT_LONG:                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0020b6   d8f3     RCALL     0x229e                           *(long *) va_arg (ap, long *) = count;                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0020b8   6a05     CLRF      0x5,0x0                                                                                         
0020ba   ae03     BTFSS     0x3,0x7,0x0                                                                                     
0020bc   d002     BRA       0x20c2                                                                                          
0020be   6804     SETF      0x4,0x0                                                                                         
0020c0   6805     SETF      0x5,0x0                                                                                         
0020c2   d82a     RCALL     0x2118                                                                                          
0020c4   d8ba     RCALL     0x223a                                                                                          
0020c6   c005     MOVFF     0x5,0xfee                                                                                       
0020c8   ffee                                                                                                               
00223a   50ee     MOVF      0xee,0x0,0x0                                                                                    
00223c   cfef     MOVFF     0xfef,0xfea                                                                                     
00223e   ffea                                                                                                               
002240   6ee9     MOVWF     0xe9,0x0                                                                                        
002242   c002     MOVFF     0x2,0xfee                                                                                       
002244   ffee                                                                                                               
002246   c003     MOVFF     0x3,0xfee                                                                                       
002248   ffee                                                                                                               
00224a   c004     MOVFF     0x4,0xfee                                                                                       
00224c   ffee                                                                                                               
00224e   0012     RETURN    0x0                                                                                             
00229e   0e01     MOVLW     0x1                                                                                             
0022a0   cfdb     MOVFF     0xfdb,0x2                                                                                       
0022a2   f002                                                                                                               
0022a4   0e02     MOVLW     0x2                                                                                             
0022a6   cfdb     MOVFF     0xfdb,0x3                                                                                       
0022a8   f003                                                                                                               
0022aa   6a04     CLRF      0x4,0x0                                                                                         
0022ac   0012     RETURN    0x0                                                                                             
0020ca   d014     BRA       0x20f4                           break;                                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case _FMT_SHLONG:                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0020cc   d8e8     RCALL     0x229e                           *(short long *) va_arg (ap, short long *) = count;             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0020ce   be03     BTFSC     0x3,0x7,0x0                                                                                     
0020d0   6804     SETF      0x4,0x0                                                                                         
0020d2   d822     RCALL     0x2118                                                                                          
0020d4   d8b2     RCALL     0x223a                                                                                          
0020d6   d00e     BRA       0x20f4                           break;                                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case _FMT_BYTE:                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0020d8   d961     RCALL     0x239c                           *(signed char *) va_arg (ap, signed char *) = count;           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0020da   cfdb     MOVFF     0xfdb,0xfef                                                                                     
0020dc   ffef                                                                                                               
0020de   d00a     BRA       0x20f4                           break;                                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           default:                                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0020a8   d979     RCALL     0x239c                           *(int *) va_arg (ap, int *) = count;                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0020aa   cfdb     MOVFF     0xfdb,0xfee                                                                                     
0020ac   ffee                                                                                                               
0020ae   0e02     MOVLW     0x2                                                                                             
0020b0   cfdb     MOVFF     0xfdb,0xfed                                                                                     
0020b2   ffed                                                                                                               
00239c   debd     RCALL     0x2118                                                                                          
00239e   50ee     MOVF      0xee,0x0,0x0                                                                                    
0023a0   cfef     MOVFF     0xfef,0xfea                                                                                     
0023a2   ffea                                                                                                               
0023a4   6ee9     MOVWF     0xe9,0x0                                                                                        
0023a6   0e01     MOVLW     0x1                                                                                             
0023a8   0012     RETURN    0x0                                                                                             
                                                             break;                                                         C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0020b4   d01f     BRA       0x20f4                       break;                                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       default:                                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* undefined behaviour. we do nothing */                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                   }                                                                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                 else                                                                       C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                   {                                                                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0020e0   d979     RCALL     0x23d4                   if (putc (c, handle) == EOF)                                           C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0020e2   e105     BNZ       0x20ee                                                                                          
0020e4   1c01     COMF      0x1,0x0,0x0                                                                                     
0020e6   e103     BNZ       0x20ee                                                                                          
002134   ecd3     CALL      0x5da6,0x0                                                                                      
002136   f02e                                                                                                               
002138   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00213a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00213c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00213e   cff3     MOVFF     0xff3,0x0                                                                                       
002140   f000                                                                                                               
002142   cff4     MOVFF     0xff4,0x1                                                                                       
002144   f001                                                                                                               
002146   0100     MOVLB     0x0                                                                                             
002148   1cf3     COMF      0xf3,0x0,0x0                                                                                    
00214a   0012     RETURN    0x0                                                                                             
00237a   cfdf     MOVFF     0xfdf,0xfe6                                                                                     
00237c   ffe6                                                                                                               
00237e   ef9a     GOTO      0x2134                                                                                          
002380   f010                                                                                                               
0023d4   df8b     RCALL     0x22ec                                                                                          
0023d6   efbd     GOTO      0x237a                                                                                          
0023d8   f011                                                                                                               
0020e8   68f3     SETF      0xf3,0x0                   return EOF;                                                          C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0020ea   68f4     SETF      0xf4,0x0                                                                                        
0020ec   d010     BRA       0x210e                                                                                          
0020ee   d8fa     RCALL     0x22e4                   ++count;                                                               C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0020f0   e301     BNC       0x20f4                                                                                          
0020f2   2adb     INCF      0xdb,0x1,0x0                                                                                    
0022e4   0e01     MOVLW     0x1                                                                                             
0022e6   2adb     INCF      0xdb,0x1,0x0                                                                                    
0022e8   0e02     MOVLW     0x2                                                                                             
0022ea   0012     RETURN    0x0                                                                                             
                                                   }                                                                        C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                               }                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0020fa   0e01     MOVLW     0x1              return count;                                                                  C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
0020fc   cfdb     MOVFF     0xfdb,0x0                                                                                       
0020fe   f000                                                                                                               
002100   0e02     MOVLW     0x2                                                                                             
002102   cfdb     MOVFF     0xfdb,0x1                                                                                       
002104   f001                                                                                                               
002106   c000     MOVFF     0x0,0xff3                                                                                       
002108   fff3                                                                                                               
00210a   c001     MOVFF     0x1,0xff4                                                                                       
00210c   fff4                                                                                                               
00210e   cfd9     MOVFF     0xfd9,0xfe1    }                                                                                C:\mcc18\src\TRADIT~1\stdclib\vfprintf.c
002110   ffe1                                                                                                               
002112   cfda     MOVFF     0xfda,0xfe2                                                                                     
002114   ffe2                                                                                                               
002116   d0cb     BRA       0x22ae                                                                                          
                                           #include "P18CXXX.INC"                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Version 1.00   Microchip Technology, Inc.   C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F64J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F84J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; $Id: p18macro.inc,v 1.1 2003/12/16 21:50:10 GrosbaJ Exp $                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
006110   0eff     MOVLW     0xff                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
006112   24e1     ADDWF     0xe1,0x0,0x0             addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
006114   6ee9     MOVWF     0xe9,0x0                 movwf     Ptr,ACCESS                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
006116   0eff     MOVLW     0xff                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
006118   20e2     ADDWFC    0xe2,0x0,0x0             addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
00611a   6eea     MOVWF     0xea,0x0                 movwf     Ptr+1                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Ptr                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
006120   0e2f     MOVLW     0x2f                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
006122   64ef     CPFSGT    0xef,0x0                 cpfsgt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
006124   d004     BRA       0x612e                 bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
006126   0e3a     MOVLW     0x3a                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
006128   60ef     CPFSLT    0xef,0x0                 cpfslt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
00612a   d001     BRA       0x612e                 bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; @name isdigit                                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;The {\bf isdigit} function tests the value of {\bf c} to determine if it        C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;is a digit character. A digit character is defined as any decimal digit         C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;character (0, 1, 2, 3, 4, 5, 6, 7, 8, 9).                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; int isdigit (int c);                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           CTYPE CODE                                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           isdigit                                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             global isdigit                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; Proceedure: Use FSR0 as pointer to 'c'                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;         Return with result in PROD                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             ; Clear out result                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
00610c   6af3     CLRF      0xf3,0x0                 clrf      PRODL, ACCESS                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
00610e   6af4     CLRF      0xf4,0x0       	  clrf      PRODH, ACCESS                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             ; Set FSR0 = FSR1 - 2 ( location of 'c')                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                     StkSetPtrToOffset FSR0L,-1                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
00611c   66ed     TSTFSZ    0xed,0x0                 tstfsz    POSTDEC0,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
00611e   d007     BRA       0x612e                   bra       jNoMatch            ; upper byte must be 0 to match          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             ; Test for condition                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                     jmpFleL   INDF0,ACCESS,'0'-1,jNoMatch                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                     jmpFgeL   INDF0,ACCESS,'9'+1,jNoMatch                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           jMatch:                                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
00612c   2af3     INCF      0xf3,0x1,0x0             incf      PRODL,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           jNoMatch:                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
00612e   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             end                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           #include <stdio.h>                                                               C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                           int _user_putc (char c);                                                         C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                           int _usart_putc (char c);                                                        C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                           int                                                                              C:\mcc18\src\TRADIT~1\stdclib\putc.c
005da6   cfd9     MOVFF     0xfd9,0xfe6    putc (char c, FILE * f)                                                          C:\mcc18\src\TRADIT~1\stdclib\putc.c
005da8   ffe6                                                                                                               
005daa   cfda     MOVFF     0xfda,0xfe6                                                                                     
005dac   ffe6                                                                                                               
005dae   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
005db0   ffd9                                                                                                               
005db2   cfe2     MOVFF     0xfe2,0xfda                                                                                     
005db4   ffda                                                                                                               
                                           {                                                                                C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                             /* if the handle > 0 then it's a pointer to a string buffer address.           C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                                specifically, a pointer to a pointer referencing the next available         C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                                byte in the buffer, to which the character will be stored. */               C:\mcc18\src\TRADIT~1\stdclib\putc.c
005db6   0efb     MOVLW     0xfb             if ((int) f >= 0)                                                              C:\mcc18\src\TRADIT~1\stdclib\putc.c
005db8   cfdb     MOVFF     0xfdb,0x0                                                                                       
005dba   f000                                                                                                               
005dbc   0efc     MOVLW     0xfc                                                                                            
005dbe   cfdb     MOVFF     0xfdb,0x1                                                                                       
005dc0   f001                                                                                                               
005dc2   0100     MOVLB     0x0                                                                                             
005dc4   0e80     MOVLW     0x80                                                                                            
005dc6   1401     ANDWF     0x1,0x0,0x0                                                                                     
005dc8   e11a     BNZ       0x5dfe                                                                                          
005dca   0efb     MOVLW     0xfb               return (unsigned char) (*(*(char **) f)++ = c);                              C:\mcc18\src\TRADIT~1\stdclib\putc.c
005dcc   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
005dce   ffe9                                                                                                               
005dd0   0efc     MOVLW     0xfc                                                                                            
005dd2   cfdb     MOVFF     0xfdb,0xfea                                                                                     
005dd4   ffea                                                                                                               
005dd6   cfee     MOVFF     0xfee,0xff3                                                                                     
005dd8   fff3                                                                                                               
005dda   cfed     MOVFF     0xfed,0xff4                                                                                     
005ddc   fff4                                                                                                               
005dde   2aee     INCF      0xee,0x1,0x0                                                                                    
005de0   0e00     MOVLW     0x0                                                                                             
005de2   22ef     ADDWFC    0xef,0x1,0x0                                                                                    
005de4   cff3     MOVFF     0xff3,0xfe9                                                                                     
005de6   ffe9                                                                                                               
005de8   cff4     MOVFF     0xff4,0xfea                                                                                     
005dea   ffea                                                                                                               
005dec   0efd     MOVLW     0xfd                                                                                            
005dee   cfdb     MOVFF     0xfdb,0xfef                                                                                     
005df0   ffef                                                                                                               
005df2   50ef     MOVF      0xef,0x0,0x0                                                                                    
005df4   6a01     CLRF      0x1,0x0                                                                                         
005df6   6ef3     MOVWF     0xf3,0x0                                                                                        
005df8   c001     MOVFF     0x1,0xff4                                                                                       
005dfa   fff4                                                                                                               
005dfc   d010     BRA       0x5e1e                                                                                          
                                                                                                                            C:\mcc18\src\TRADIT~1\stdclib\putc.c
005dfe   0efb     MOVLW     0xfb             if ((signed char) f == (signed char) _H_USART)                                 C:\mcc18\src\TRADIT~1\stdclib\putc.c
005e00   50db     MOVF      0xdb,0x0,0x0                                                                                    
005e02   08fe     SUBLW     0xfe                                                                                            
005e04   e106     BNZ       0x5e12                                                                                          
                                               {                                                                            C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                                 /* the invocation of the USART function is direct, as it's our             C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                                    default value and we want it to work without needing any                C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                                    direct initialization from the user */                                  C:\mcc18\src\TRADIT~1\stdclib\putc.c
005e06   0efd     MOVLW     0xfd                 return _usart_putc (c);                                                    C:\mcc18\src\TRADIT~1\stdclib\putc.c
005e08   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
005e0a   ffe6                                                                                                               
005e0c   ecb8     CALL      0x6170,0x0                                                                                      
005e0e   f030                                                                                                               
005e10   d005     BRA       0x5e1c                                                                                          
                                               }                                                                            C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                             else                                                                           C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                               {                                                                            C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                                 /* the invocation of the user function is direct, not via a                C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                                    function pointer. We just put an empty definition of the                C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                                    function in the library and if the user specifies their own             C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                                    version it will be found first and the library definition will          C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                                    be ignored. We do it this way because it's generally better to          C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                                    spend 2 bytes of program memory for the RETURN instruction of           C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                                    the empty function than three bytes of data memory for the              C:\mcc18\src\TRADIT~1\stdclib\putc.c
                                                    function pointer. */                                                    C:\mcc18\src\TRADIT~1\stdclib\putc.c
005e12   0efd     MOVLW     0xfd                 return _user_putc (c);                                                     C:\mcc18\src\TRADIT~1\stdclib\putc.c
005e14   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
005e16   ffe6                                                                                                               
005e18   ec8b     CALL      0x5316,0x0                                                                                      
005e1a   f029                                                                                                               
005e1c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                               }                                                                            C:\mcc18\src\TRADIT~1\stdclib\putc.c
005e1e   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\mcc18\src\TRADIT~1\stdclib\putc.c
005e20   cfe5     MOVFF     0xfe5,0xfda                                                                                     
005e22   ffda                                                                                                               
005e24   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
005e26   ffd9                                                                                                               
005e28   0012     RETURN    0x0                                                                                             
                                             include <P18CXXX.INC>                                                          C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Version 1.00   Microchip Technology, Inc.   C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18F8722.INC
                                                                                                                            C:\MCC18\MPASM\P18F8722.INC
                                           ;==========================================================================      C:\MCC18\MPASM\P18F8722.INC
                                           ;  $Id: P18F8722.INC,v 1.2 2004/10/06 22:25:07 curtiss Exp $                     C:\MCC18\MPASM\P18F8722.INC
                                           ;  MPASM PIC18F8722 processor include                                            C:\MCC18\MPASM\P18F8722.INC
                                           ;                                                                                C:\MCC18\MPASM\P18F8722.INC
                                           ;  (c) Copyright 1999-2004 Microchip Technology, All rights reserved             C:\MCC18\MPASM\P18F8722.INC
                                           ;==========================================================================      C:\MCC18\MPASM\P18F8722.INC
                                                                                                                            C:\MCC18\MPASM\P18F8722.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18F8722.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F64J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F84J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1220                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1320                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                             GLOBAL _usart_putc                                                             C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           STDIO CODE                                                                       C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           _usart_putc                                                                      C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
006170   0eff     MOVLW     0xff                         MOVLW     0xff                                                     C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
006172   50e3     MOVF      0xe3,0x0,0x0                 MOVF      PLUSW1, w                                                C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
006174   baac     BTFSC     0xac,0x5,0x0                 BTFSC     TXSTA, 0x5                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
006176   d004     BRA       0x6180                       BRA       loop                                                     C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
006178   6aaf     CLRF      0xaf,0x0                     CLRF      SPBRG                                                    C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
00617a   8eab     BSF       0xab,0x7,0x0                 BSF       RCSTA, 0x7                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
00617c   8aac     BSF       0xac,0x5,0x0                 BSF       TXSTA, 0x5                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __USE_PORTB                                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                         BCF       TRISB, 0x1                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #else                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
00617e   9c94     BCF       0x94,0x6,0x0                 BCF       TRISC, 0x6                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
006180   a2ac     BTFSS     0xac,0x1,0x0   loop:         BTFSS     TXSTA, 0x1                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
006182   d7fe     BRA       0x6180                       BRA       loop                                                     C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
006184   6ead     MOVWF     0xad,0x0                     MOVWF     TXREG                                                    C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
006186   6ef3     MOVWF     0xf3,0x0                     MOVWF     PRODL                                                    C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
006188   6af4     CLRF      0xf4,0x0                     CLRF      PRODL + 1                                                C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
00618a   0012     RETURN    0x0                          RETURN                                                             C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                               END                                                                          C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           ; $Id: strlen.asm,v 1.1 2003/12/09 22:53:20 GrosbaJ Exp $                        C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           #include "P18CXXX.INC"                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Version 1.00   Microchip Technology, Inc.   C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F64J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F84J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; $Id: p18macro.inc,v 1.1 2003/12/16 21:50:10 GrosbaJ Exp $                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Ptr                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f02   0efe     MOVLW     0xfe                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f04   cfe3     MOVFF     0xfe3,0xfe9              movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f06   ffe9                                                                                                               
005f08   0eff     MOVLW     0xff                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f0a   cfe3     MOVFF     0xfe3,0xfea              movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f0c   ffea                                                                                                               
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; @name strlen                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;``The {\bf strlen} function computes the length of the string pointed           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;to by {\bf s}.''                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;Stack usage: 2 bytes. Re-entrant.                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;@param s pointer to the string                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;@return ``The {\bf strlen} function returns the number of characters            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;that precede the terminating null character.''                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; size_t strlen (const char *s);                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           STRING CODE                                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           strlen                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             global strlen                                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; Proceedure: Use FSR0 for 's' and use PROD for 'n'.                             C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Load FSR0 by copying 's' off stack into FSR0.                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                     Stk2CpyToReg -2,FSR0L                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Clear PROD                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
005f0e   6af3     CLRF      0xf3,0x0                 clrf      PRODL,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
005f10   6af4     CLRF      0xf4,0x0                 clrf      PRODH,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Scan for '\0' while counting.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           jLoop:                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Test for '\0'                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
005f12   52ee     MOVF      0xee,0x1,0x0             movf      POSTINC0,F,ACCESS   ; set Z flag                             C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
005f14   e003     BZ        0x5f1c                   bz        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Count it                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
005f16   4af3     INFSNZ    0xf3,0x1,0x0   	  infsnz    PRODL, F, ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
005f18   2af4     INCF      0xf4,0x1,0x0   	  incf      PRODH, F, ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
005f1a   d7fb     BRA       0x5f12                   bra       jLoop                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           jEnd                                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
005f1c   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             end                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; $Id: slenpgm.asm,v 1.3 2004/04/01 17:25:11 kuhrtt Exp $                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #include "P18CXXX.INC"                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Version 1.00   Microchip Technology, Inc.   C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4681                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4681.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F64J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F84J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <P18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; $Id: p18macro.inc,v 1.1 2003/12/16 21:50:10 GrosbaJ Exp $                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Ptr                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f1e   0eff     MOVLW     0xff                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f20   cfe3     MOVFF     0xfe3,0xff8              movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f22   fff8                                                                                                               
005f24   52e5     MOVF      0xe5,0x1,0x0             movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f26   0eff     MOVLW     0xff                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f28   cfe3     MOVFF     0xfe3,0xff7              movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f2a   fff7                                                                                                               
005f2c   52e5     MOVF      0xe5,0x1,0x0             movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f2e   0eff     MOVLW     0xff                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f30   cfe3     MOVFF     0xfe3,0xff6              movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f32   fff6                                                                                                               
005f34   52e5     MOVF      0xe5,0x1,0x0             movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f54   0efd     MOVLW     0xfd                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f56   cfe3     MOVFF     0xfe3,0x40               movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f58   f040                                                                                                               
005f5a   0efe     MOVLW     0xfe                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f5c   cfe3     MOVFF     0xfe3,0x41               movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f5e   f041                                                                                                               
005f60   0eff     MOVLW     0xff                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f62   cfe3     MOVFF     0xfe3,0x42               movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f64   f042                                                                                                               
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f42   0efd     MOVLW     0xfd                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f44   2ae3     INCF      0xe3,0x1,0x0             incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f46   e105     BNZ       0x5f52                   bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f48   0efe     MOVLW     0xfe                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f4a   2ae3     INCF      0xe3,0x1,0x0             incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f4c   e102     BNZ       0x5f52                   bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f4e   0eff     MOVLW     0xff                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
005f50   2ae3     INCF      0xe3,0x1,0x0             incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; @name strlenpgm                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;``The {\bf strlenpgm} function computes the length of the string pointed        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;to by {\bf s}.''                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;@param s pointer to the string                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;@return ``The {\bf strlenpgm} function returns the number of characters         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;that precede the terminating null character.''                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; sizerom_t strlenpgm (const rom char *s);                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             extern AARGB2                                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           STRING CODE                                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           strlenpgm                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             global strlenpgm                                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #ifdef __SMALL__                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                            messg "strlenpgm - SMALL"                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; Procedure: Use TBLPTR for 's' and create 'n' on stack.  Return 'n' in          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; AARGB0:AARGB1:AARGB2.                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Load TBLPTR by POPing 's' off stack.                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     Stk2PopToReg TBLPTRL                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTDEC1,ACCESS    ; provide extra byte below stack          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Push 3 bytes of 0 onto stack. This is initial value of 'n'.                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Scan for '\0' while counting.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jLoop:                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Test for '\0'                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     tblrd     *+                  ; read & increment                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     movf      TABLAT, F, ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     bz        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Count it                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     Stk3Inc   -3                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     bra       jLoop                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jEnd                                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     Stk3CpyToReg -3, AARGB2                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #else                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #ifdef __LARGE__                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                            messg "strlenpgm - LARGE"                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; Procedure: Use TBLPTR for 's' and create 'n' on stack.  Return 'n' in          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; AARGB0:AARGB1:AARGB2.                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Load TBLPTR by POPing 's' off stack.                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     Stk3PopToReg TBLPTRL                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Push 3 bytes of 0 onto stack. This is initial value of 'n'.                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
005f36   6ae6     CLRF      0xe6,0x0                 clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
005f38   6ae6     CLRF      0xe6,0x0                 clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
005f3a   6ae6     CLRF      0xe6,0x0                 clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Scan for '\0' while counting.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jLoop:                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Test for '\0'                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
005f3c   0009     TBLRDPOSTINC                       tblrd     *+                  ; read & increment                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
005f3e   52f5     MOVF      0xf5,0x1,0x0             movf      TABLAT, F, ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
005f40   e009     BZ        0x5f54                   bz        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Count it                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     Stk3Inc   -3                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
005f52   d7f4     BRA       0x5f3c                   bra       jLoop                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jEnd                                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     Stk3CpyToReg -3, AARGB2                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
005f66   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #else                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                            error "No Model Specified"                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             end                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
